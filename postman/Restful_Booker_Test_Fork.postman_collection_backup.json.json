{
	"info": {
		"_postman_id": "33edb186-d91d-45c5-8707-bbb7e5289c19",
		"name": "Restful Booker Test Fork",
		"description": "This collection demonstrates different ways to perform CRUD web API testing. It uses different test validations with different request and response formats (i.e., JSON, XML, and form URL encoded data).\n\nThe web service API used is Restfulbooker API which can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html).",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-requisite API Tests",
			"item": [
				{
					"name": "Ping Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56901334-81e4-4703-814a-97c54dbb3d1e",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(`#TEST: ${pm.info.requestName}: Status code is 201`, function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(`#TEST: ${pm.info.requestName}: Body is correct`, function () {\r",
									"    pm.response.to.have.body(\"Created\");\r",
									"});\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "c912bd33-8a36-491c-91fb-558cd07e6b44",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/ping",
						"description": "Sends a ping request to the Restfulbooker API to determine if the service is up. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Ping-Ping)."
					},
					"response": [
						{
							"id": "d08d80f6-d2f8-4946-bdba-73671d3ce2ce",
							"name": "Ping Request",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{prod_url}}/ping"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "7"
								},
								{
									"key": "Etag",
									"value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Jan 2022 16:22:31 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "Created"
						},
						{
							"id": "9e9a1a33-acd5-4567-9a23-a6445851ee64",
							"name": "Ping Request (Mock)",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{mock_url}}/ping"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "7"
								},
								{
									"key": "Etag",
									"value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Jan 2022 16:22:31 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "Created"
						}
					]
				},
				{
					"name": "Auth Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35879870-be53-4cf1-973c-22bc795ab83a",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(`#TEST: ${pm.info.requestName}: Status code is 200`, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(`#TEST: ${pm.info.requestName}: Body is correct`, function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    if (pm.expect(jsonData.token).exist) {\r",
									"        pm.environment.set(\"token_key\", jsonData.token);\r",
									"        console.log(`${pm.info.requestName}: Token Value: ` + pm.environment.get(\"token_key\"));\r",
									"    } else {\r",
									"        console.log(`${pm.info.requestName}: token property does not exist!`);\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"// if this data variable exist, then a data file is in use\r",
									"if (pm.iterationData.has(\"data_format\")) {  \r",
									"    console.log(\"Using data file!\");\r",
									"    const dataformat = pm.iterationData.get(\"data_format\");\r",
									"    switch (dataformat) {\r",
									"        case \"json\" :\r",
									"            console.log(\"JSON data format\");\r",
									"            postman.setNextRequest(\"Create Booking - JSON\");\r",
									"            break;\r",
									"        case \"xml\" :\r",
									"            console.log(\"XML data format\");\r",
									"            postman.setNextRequest(\"Create Booking - XML\");\r",
									"            break;\r",
									"        case \"urlencoded\" :\r",
									"            console.log(\"URL-encoded data format\");\r",
									"            postman.setNextRequest(\"Create Booking - URL Encoded\");\r",
									"            break;\r",
									"        default:\r",
									"            console.log(\"Unknown data format\");\r",
									"            postman.setNextRequest(null);\r",
									"    }\r",
									"}\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "9e58b9e8-1e6f-4b69-94de-c28803627eaa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/auth",
						"description": "Sends an authentication request to create a new auth token. The token can be saved and later used for the PUT and DELETE /booking requests.\n\nThe API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Auth-CreateToken)."
					},
					"response": [
						{
							"id": "7f8129eb-6bb9-4f8c-8154-c1a530051bae",
							"name": "Auth Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{prod_url}}/auth"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "27"
								},
								{
									"key": "Etag",
									"value": "W/\"1b-pS/qtEh6/2yBZQjdBbT0fzsO3QY\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Jan 2022 16:27:03 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"token\": \"abc123\"\n}"
						},
						{
							"id": "1fd4085e-6423-4cd6-ab6f-642170702b05",
							"name": "Auth Request (Mock)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{mock_url}}/auth"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "27"
								},
								{
									"key": "Etag",
									"value": "W/\"1b-pS/qtEh6/2yBZQjdBbT0fzsO3QY\""
								},
								{
									"key": "Date",
									"value": "Tue, 18 Jan 2022 16:27:03 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"token\": \"abc123\"\n}"
						}
					]
				}
			],
			"_postman_id": "1da5bfde-c94b-419c-ba38-e6003e23e137",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9d994d07-32bd-4fc9-b23e-bede7e56bce7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e93b5291-e8e7-47b9-8f14-8c277272ca81",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tests using JSON format",
			"item": [
				{
					"name": "Create Booking - JSON",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f0004ed2-637a-4306-bc5c-3570e07e2c8c",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Pre-req ===`);\r",
									"\r",
									"/*\r",
									"function formatDate(date) {\r",
									"    let yourDate = new Date(date);\r",
									"    yourDate.toISOString().split('T')[0];\r",
									"    const offset = yourDate.getTimezoneOffset();\r",
									"    yourDate = new Date(yourDate.getTime() - (offset*60000));\r",
									"    return yourDate.toISOString().split('T')[0];\r",
									"};\r",
									"*/\r",
									"\r",
									"/*\r",
									"let util = pm.collectionVariables.get(\"utilityclass\");\r",
									"console.log(\"Create Booking: \" + util );\r",
									"console.log(\"utililityclasss name: \" + util.constructor.name);\r",
									"*/\r",
									"\r",
									"// if this data variable exist, then a data file is in use\r",
									"if (pm.iterationData.has(\"data_format\")) {  \r",
									"    console.log(\"Using data file!\");\r",
									"    // New implementation using test data variables\r",
									"    pm.environment.set(\"firstname\", pm.iterationData.get(\"first_name\"));\r",
									"    console.log(\"firstname: \" + pm.environment.get(\"firstname\"));\r",
									"\r",
									"    pm.environment.set(\"lastname\", pm.iterationData.get(\"last_name\"));\r",
									"    console.log(\"lastname: \" + pm.environment.get(\"lastname\"));\r",
									"\r",
									"    pm.environment.set(\"totalprice\", pm.iterationData.get(\"total_price\"));\r",
									"    console.log(\"totalprice: \" + pm.environment.get(\"totalprice\"));\r",
									"\r",
									"    var boolVal = pm.iterationData.get(\"deposit_paid\");\r",
									"    console.log(\"boolVal: \" + boolVal);\r",
									"\r",
									"    pm.environment.set(\"depositpaid\", boolVal );\r",
									"    console.log(\"depositpaid: \" + pm.environment.get(\"depositpaid\"));\r",
									"\r",
									"    pm.environment.set(\"checkin\", pm.iterationData.get(\"check_in\"));\r",
									"    console.log(\"checkin: \" + pm.environment.get(\"checkin\"));\r",
									"\r",
									"    pm.environment.set(\"checkout\", pm.iterationData.get(\"check_out\"));\r",
									"    console.log(\"checkout: \" + pm.environment.get(\"checkout\"));\r",
									"\r",
									"    pm.environment.set(\"additionalneeds\", pm.iterationData.get(\"additional_needs\"));\r",
									"    console.log(\"additionalneeds: \" + pm.environment.get(\"additionalneeds\"));\r",
									"} else {\r",
									"    console.log(\"Using dynamic variables!\");\r",
									"    // Old implementation using Postman Dynamic Variables\r",
									"    pm.environment.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"    console.log(\"firstname: \" + pm.environment.get(\"firstname\"));\r",
									"\r",
									"    pm.environment.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"    console.log(\"lastname: \" + pm.environment.get(\"lastname\"));\r",
									"\r",
									"    pm.environment.set(\"totalprice\", pm.variables.replaceIn('{{$randomInt}}'));\r",
									"    console.log(\"totalprice: \" + pm.environment.get(\"totalprice\"));\r",
									"\r",
									"    var boolVal = pm.variables.replaceIn('{{$randomBoolean}}');\r",
									"    console.log(\"boolVal: \" + boolVal);\r",
									"\r",
									"    pm.environment.set(\"depositpaid\", boolVal );\r",
									"    console.log(\"depositpaid: \" + pm.environment.get(\"depositpaid\"));\r",
									"\r",
									"    pm.environment.set(\"checkin\", util.formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
									"    console.log(\"checkin: \" + pm.environment.get(\"checkin\"));\r",
									"\r",
									"    pm.environment.set(\"checkout\", util.formatDate(pm.variables.replaceIn('{{$randomDateFuture}}')));\r",
									"    console.log(\"checkout: \" + pm.environment.get(\"checkout\"));\r",
									"\r",
									"    pm.environment.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomNoun}}'));\r",
									"    console.log(\"additionalneeds: \" + pm.environment.get(\"additionalneeds\"));\r",
									"}\r",
									"\r",
									"\r",
									"const mock = String(pm.environment.get(\"mock\"));\r",
									"if (mock === \"true\") {\r",
									"/*\r",
									"    // Start persisting variables current values to initial values for mock data\r",
									"    let rawdata = {\r",
									"        environment: {\r",
									"            'values' : []\r",
									"        }\r",
									"    }\r",
									"\r",
									"    // Issue: https://github.com/rproman/Restful-Booker/issues/11#issue-1212135656\r",
									"    // Fix: 2022-04-22: Ensure key-value pair are using String data type\r",
									"    let vars = {key: '', value: ''};\r",
									"    vars.key = 'firstname';\r",
									"    vars.value = String(pm.environment.get(\"firstname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'lastname';\r",
									"    vars.value = String(pm.environment.get(\"lastname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'totalprice';\r",
									"    vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'depositpaid';\r",
									"    vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkin';\r",
									"    vars.value = String(pm.environment.get(\"checkin\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkout';\r",
									"    vars.value = String(pm.environment.get(\"checkout\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'additionalneeds';\r",
									"    vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    const requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'PUT',\r",
									"        header: headers,\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: rawdata\r",
									"        }\r",
									"    }\r",
									"\r",
									"    //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error)\r",
									"        }\r",
									"    })\r",
									"*/\r",
									"\r",
									"// 2022-04-26: Fix for https://github.com/rproman/Restful-Booker/issues/13\r",
									"// New implementation of persisting environment variables\r",
									"// to ensure values of other variables that will not be updated will be preserved\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    let requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'GET',\r",
									"        header: headers\r",
									"    }\r",
									"\r",
									"    // retrieve first the complete set of current environment data\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.error(\"Error retrieving current environment data: \" + error)\r",
									"        } else {\r",
									"            let body = response.json()\r",
									"\r",
									"            console.log(\"Current Environment: \" + JSON.stringify(body))\r",
									"\r",
									"/*\r",
									"            // start updating target environment variables\r",
									"            let index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"firstname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"firstname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'firstname';\r",
									"                vars.value = String(pm.environment.get(\"firstname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"lastname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"lastname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'lastname';\r",
									"                vars.value = String(pm.environment.get(\"lastname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"totalprice\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"totalprice\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'totalprice';\r",
									"                vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"depositpaid\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"depositpaid\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'depositpaid';\r",
									"                vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkin\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkin\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkin';\r",
									"                vars.value = String(pm.environment.get(\"checkin\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkout\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkout\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkout';\r",
									"                vars.value = String(pm.environment.get(\"checkout\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"additionalneeds\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"additionalneeds\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'additionalneeds';\r",
									"                vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"*/\r",
									"\r",
									"// Ehancement fix for https://github.com/rproman/Restful-Booker/issues/15\r",
									"            const env_keys = [\r",
									"                'firstname', \r",
									"                'lastname', \r",
									"                'totalprice', \r",
									"                'depositpaid', \r",
									"                'checkin', \r",
									"                'checkout', \r",
									"                'additionalneeds', \r",
									"                'bookingid'];\r",
									"\r",
									"            // start updating target environment variables\r",
									"            env_keys.forEach((env_val) => {\r",
									"                let index = body.environment.values.findIndex((item) => {\r",
									"                    return (item.key === env_val)\r",
									"                })\r",
									"                if (index != -1) {\r",
									"                    body.environment.values[index].value = String(pm.environment.get(env_val));\r",
									"                } else {\r",
									"                    let vars = {key: '', value: ''};\r",
									"                    vars.key = String(env_val);\r",
									"                    vars.value = String(pm.environment.get(env_val));\r",
									"                    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                    body.environment.values.push(vars);\r",
									"                }\r",
									"            })\r",
									"\r",
									"            console.log(\"New Environment Variables: \" + JSON.stringify(body))\r",
									"\r",
									"            requestOptions = {\r",
									"                url: postman_api_url,\r",
									"                method: 'PUT',\r",
									"                header: headers,\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: body\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"            pm.sendRequest(requestOptions, (error, response) => {\r",
									"                if (error) {\r",
									"                    console.error(\"Error updating current environment: \" + error)\r",
									"                }\r",
									"            })\r",
									"        }\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Pre-req ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4999fb9c-3c64-432a-a16f-e57475d181e5",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(`#TEST: ${pm.info.requestName}: Status code is 200`, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = {};\r",
									"\r",
									"pm.test(`#TEST: ${pm.info.requestName}: JSON response data validation`, () => {\r",
									"    try {\r",
									"        /*\r",
									"        pm.expect(pm.response.text()).to.not.eql('');\r",
									"        jsonData = pm.response.json();\r",
									"        */\r",
									"        pm.response.to.be.ok;\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"        jsonData = pm.response.json();\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(`${pm.info.requestName}: JSON response data validation failed! ` + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"// JSON schema validation\r",
									"const schema = JSON.parse(pm.collectionVariables.get(\"BOOKING_JSON_SCHEMA\"));\r",
									"\r",
									"/*\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"bookingid\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"booking\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"firstname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lastname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"totalprice\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"depositpaid\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"bookingdates\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"checkin\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"checkout\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"checkin\",\r",
									"            \"checkout\"\r",
									"          ]\r",
									"        },\r",
									"        \"additionalneeds\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"firstname\",\r",
									"        \"lastname\",\r",
									"        \"totalprice\",\r",
									"        \"depositpaid\",\r",
									"        \"bookingdates\",\r",
									"        \"additionalneeds\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"bookingid\",\r",
									"    \"booking\"\r",
									"  ]\r",
									"}\r",
									"*/\r",
									"pm.test(`#TEST: ${pm.info.requestName}: JSON response schema validation`, () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(`#TEST: ${pm.info.requestName}: Booking ID validation`, function () {\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"bookingid\");\r",
									"        pm.environment.set(\"bookingid\", jsonData.bookingid);\r",
									"        console.log(`${pm.info.requestName}: bookingid: ` + jsonData.bookingid);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(`${pm.info.requestName}: Booking ID validation failed! ` + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(`#TEST: ${pm.info.requestName}: First Name validation`, function () {\r",
									"    const firstname = pm.environment.get(\"firstname\");\r",
									"    try {\r",
									"        pm.expect(jsonData.booking).to.have.property(\"firstname\", firstname);\r",
									"        console.log(`${pm.info.requestName}: firstname: ` + jsonData.booking.firstname);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(`${pm.info.requestName}: First Name validation failed! ` + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(`#TEST: ${pm.info.requestName}: Last Name validation`, function () {\r",
									"    const lastname = pm.environment.get(\"lastname\");\r",
									"    try {\r",
									"        pm.expect(jsonData.booking).to.have.property(\"lastname\", lastname);\r",
									"        console.log(`${pm.info.requestName}: lastname: ` + jsonData.booking.lastname);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(`${pm.info.requestName}: Last Name validation failed! ` + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(`#TEST: ${pm.info.requestName}: Total Price validation`, function () {\r",
									"    const totalprice = Number.parseInt(pm.environment.get(\"totalprice\"));\r",
									"    try {\r",
									"        pm.expect(jsonData.booking).to.have.property(\"totalprice\", totalprice);\r",
									"        console.log(`${pm.info.requestName}: totalprice: ` + jsonData.booking.totalprice);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(`${pm.info.requestName}: Total Price validation failed! ` + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(`#TEST: ${pm.info.requestName}: Deposit Paid validation`, function () {\r",
									"    const depositpaid = pm.environment.get(\"depositpaid\");\r",
									"    try {\r",
									"        //var boolVal = JSON.parse(depositpaid);\r",
									"        if (typeof(depositpaid) === \"boolean\") {\r",
									"            console.log(`${pm.info.requestName}: typeof(depositpaid) is boolean` );\r",
									"            var boolVal = depositpaid;\r",
									"        } else {\r",
									"            var boolVal = depositpaid === \"true\";\r",
									"        }\r",
									"        //var boolVal = depositpaid === \"true\";\r",
									"        console.log(`${pm.info.requestName}: environment depositpaid: ` + depositpaid)\r",
									"        console.log(`${pm.info.requestName}: depositpaid boolVal: ` + boolVal)\r",
									"        pm.expect(jsonData.booking).to.have.property(\"depositpaid\", boolVal);\r",
									"  \r",
									"/*\r",
									"        // alternative way to validate\r",
									"        pm.expect(jsonData.booking).has.ownProperty(\"depositpaid\");\r",
									"        pm.expect(jsonData.booking.depositpaid.toString()).eql(depositpaid)\r",
									"*/\r",
									"        console.log(`${pm.info.requestName}: depositpaid: ` + jsonData.booking.depositpaid);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(`${pm.info.requestName}: Deposit Paid validation failed! ` + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(`#TEST: ${pm.info.requestName}: Additional Needs validation`, function () {\r",
									"    const additionalneeds = pm.environment.get(\"additionalneeds\");\r",
									"    try {\r",
									"        pm.expect(jsonData.booking).to.have.property(\"additionalneeds\", additionalneeds);\r",
									"        console.log(`${pm.info.requestName}: additionalneeds: ` + jsonData.booking.additionalneeds);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(`${pm.info.requestName}: Additional Needs validation failed! ` + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(`#TEST: ${pm.info.requestName}: Checkin Date validation`, function () {\r",
									"    const checkin = pm.environment.get(\"checkin\");\r",
									"    try {\r",
									"        pm.expect(jsonData.booking.bookingdates).to.have.property(\"checkin\", checkin);\r",
									"        console.log(`${pm.info.requestName}: checkin: ` + jsonData.booking.bookingdates.checkin);\r",
									"        console.log(`${pm.info.requestName}: environment checkin: ` + checkin);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(`${pm.info.requestName}: Checkin Date validation failed! ` + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(`#TEST: ${pm.info.requestName}: Checkout Date validation`, function () {\r",
									"    const checkout = pm.environment.get(\"checkout\");\r",
									"    try {\r",
									"        pm.expect(jsonData.booking.bookingdates).to.have.property(\"checkout\", checkout);\r",
									"        console.log(`${pm.info.requestName}: checkout: ` + jsonData.booking.bookingdates.checkout);\r",
									"        console.log(`${pm.info.requestName}: environment checkout: ` + checkout);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(`${pm.info.requestName}: Checkout Date validation failed! ` + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "4cf1738f-a7a5-482c-951e-49801ac11fa5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : {{depositpaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{create_booking_json_url}}",
						"description": "Sends a create booking request using JSON format. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-CreateBooking)."
					},
					"response": [
						{
							"id": "5ec9c664-1774-417a-bff1-b310a0b2b38c",
							"name": "Create Booking - JSON (Mock)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : {{depositpaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://1b109d3c-87dc-48fc-8ac7-c29772894eb6.mock.pstmn.io/mock/json/booking"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "199"
								},
								{
									"key": "Etag",
									"value": "W/\"c7-NWl+1z3CXaSjSq/e8mwSBcPzEX4\""
								},
								{
									"key": "Date",
									"value": "Thu, 24 Feb 2022 08:28:22 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "{\n    \"bookingid\": {{$randomInt}},\n    \"booking\": {\n        \"firstname\": \"{{firstname}}\",\n        \"lastname\": \"{{lastname}}\",\n        \"totalprice\": {{totalprice}},\n        \"depositpaid\": {{depositpaid}},\n        \"bookingdates\": {\n            \"checkin\": \"{{checkin}}\",\n            \"checkout\": \"{{checkout}}\"\n        },\n        \"additionalneeds\": \"{{additionalneeds}}\"\n    }\n}\n"
						},
						{
							"id": "9fc022b3-ab8b-46a7-b57d-e44a24c3288a",
							"name": "Create Booking - JSON",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : {{depositpaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://restful-booker.herokuapp.com/booking"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "199"
								},
								{
									"key": "Etag",
									"value": "W/\"c7-NWl+1z3CXaSjSq/e8mwSBcPzEX4\""
								},
								{
									"key": "Date",
									"value": "Thu, 24 Feb 2022 08:28:22 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "{\n    \"bookingid\": {{$randomInt}},\n    \"booking\": {\n        \"firstname\": \"{{firstname}}\",\n        \"lastname\": \"{{lastname}}\",\n        \"totalprice\": {{totalprice}},\n        \"depositpaid\": {{depositpaid}},\n        \"bookingdates\": {\n            \"checkin\": \"{{checkin}}\",\n            \"checkout\": \"{{checkout}}\"\n        },\n        \"additionalneeds\": \"{{additionalneeds}}\"\n    }\n}\n"
						}
					]
				},
				{
					"name": "Get Booking - JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4811dd6-2983-4b84-8076-7512130c7d38",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(\"#TEST: Get Booking Request: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsondata = {};\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - JSON: JSON response data validation\", () => {\r",
									"    try {\r",
									"        pm.response.to.be.ok.\r",
									"            and.to.be.withBody.\r",
									"            and.to.be.json;\r",
									"\r",
									"\r",
									"        jsonData = pm.response.json();\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"JSON response data validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"// JSON schema validation\r",
									"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKING_JSON_SCHEMA\"));\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - JSON: JSON response schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - JSON: First Name validation\", function () {\r",
									"    const firstname = pm.environment.get(\"firstname\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"firstname\", firstname);\r",
									"        console.log(\"firstname: \" + jsonData.firstname);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"First Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - JSON: Last Name validation\", function () {\r",
									"    const lastname = pm.environment.get(\"lastname\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"lastname\", lastname);\r",
									"        console.log(\"lastname: \" + jsonData.lastname);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Last Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - JSON: Total Price validation\", function () {\r",
									"    const totalprice = Number.parseInt(pm.environment.get(\"totalprice\"));\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"totalprice\", totalprice);\r",
									"        console.log(\"totalprice: \" + jsonData.totalprice);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Total Price validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - JSON: Deposit Paid validation\", function () {\r",
									"    const depositpaid = pm.environment.get(\"depositpaid\");\r",
									"    try {\r",
									"        //var boolVal = JSON.parse(depositpaid);\r",
									"        if (typeof(depositpaid) === \"boolean\") {\r",
									"            console.log(\"typeof(depositpaid) is boolean\")\r",
									"            var boolVal = depositpaid;\r",
									"        } else {\r",
									"            var boolVal = depositpaid === \"true\";\r",
									"        }\r",
									"        console.log(\"environment depositpaid: \" + depositpaid)\r",
									"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
									"        pm.expect(jsonData).to.have.property(\"depositpaid\", boolVal);\r",
									"  \r",
									"/*\r",
									"        // alternative way to validate\r",
									"        pm.expect(jsonData).has.ownProperty(\"depositpaid\");\r",
									"        pm.expect(jsonData.depositpaid.toString()).eql(depositpaid)\r",
									"*/\r",
									"        console.log(\"depositpaid: \" + jsonData.depositpaid);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Deposit Paid validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - JSON: Additional Needs validation\", function () {\r",
									"    const additionalneeds = pm.environment.get(\"additionalneeds\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"additionalneeds\", additionalneeds);\r",
									"        console.log(\"additionalneeds: \" + jsonData.additionalneeds);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Additional Needs validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - JSON: Checkin Date validation\", function () {\r",
									"    const checkin = pm.environment.get(\"checkin\");\r",
									"    try {\r",
									"        pm.expect(jsonData.bookingdates).to.have.property(\"checkin\", checkin);\r",
									"        console.log(\"checkin: \" + jsonData.bookingdates.checkin);\r",
									"        console.log(\"environment checkin: \" + checkin);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkin Date validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - JSON: Checkout Date validation\", function () {\r",
									"    const checkout = pm.environment.get(\"checkout\");\r",
									"    try {\r",
									"        pm.expect(jsonData.bookingdates).to.have.property(\"checkout\", checkout);\r",
									"        console.log(\"checkout: \" + jsonData.bookingdates.checkout);\r",
									"        console.log(\"environment checkout: \" + checkout);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkout Date validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e704629f-58de-4b90-b7ca-5ed396091cb9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "7c1a7869-645c-4d64-b648-d7fd2f32aef5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-mock-response-name",
								"value": "Get Booking - JSON (Mock)",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{get_booking_json_url}}/:id",
							"host": [
								"{{get_booking_json_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"id": "5e92a8dc-7b22-488b-a81d-eb685e5436fb",
									"key": "id",
									"value": "{{bookingid}}",
									"description": "Booking ID",
									"type": "string"
								}
							]
						},
						"description": "Sends a get booking request to the Restfulbooker API to retrieve a booking record based on the booking ID. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-GetBooking)."
					},
					"response": [
						{
							"id": "1106d3d9-e0c2-4f50-8611-ec797951cb96",
							"name": "Get Booking - JSON",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{prod_url}}/booking/:id",
									"host": [
										"{{prod_url}}"
									],
									"path": [
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "172"
								},
								{
									"key": "Etag",
									"value": "W/\"ac-cADWL4ZnGnhGBYUUO2+atwmrptA\""
								},
								{
									"key": "Date",
									"value": "Thu, 10 Feb 2022 20:16:18 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}"
						},
						{
							"id": "4b3c6877-1095-47b1-bcd9-6e2eb83c41ba",
							"name": "Get Booking - JSON (Mock)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mock_url}}/mock/json/booking/:id",
									"host": [
										"{{mock_url}}"
									],
									"path": [
										"mock",
										"json",
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "172"
								},
								{
									"key": "Etag",
									"value": "W/\"ac-cADWL4ZnGnhGBYUUO2+atwmrptA\""
								},
								{
									"key": "Date",
									"value": "Thu, 10 Feb 2022 20:16:18 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}"
						}
					]
				},
				{
					"name": "Update Booking - JSON",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "45fa1a06-44d2-486b-82aa-2687a1b23005",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Pre-req ===`);\r",
									"\r",
									"/*\r",
									"function formatDate(date) {\r",
									"    let yourDate = new Date(date);\r",
									"    yourDate.toISOString().split('T')[0];\r",
									"    const offset = yourDate.getTimezoneOffset();\r",
									"    yourDate = new Date(yourDate.getTime() - (offset*60000));\r",
									"    return yourDate.toISOString().split('T')[0];\r",
									"};\r",
									"*/\r",
									"\r",
									"/*\r",
									"let util = pm.collectionVariables.get(\"utilityclass\");\r",
									"console.log(\"Create Booking: \" + util );\r",
									"console.log(\"utililityclasss name: \" + util.constructor.name);\r",
									"*/\r",
									"\r",
									"pm.environment.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"console.log(\"firstname: \" + pm.environment.get(\"firstname\"));\r",
									"\r",
									"pm.environment.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"console.log(\"lastname: \" + pm.environment.get(\"lastname\"));\r",
									"\r",
									"pm.environment.set(\"totalprice\", pm.variables.replaceIn('{{$randomInt}}'));\r",
									"console.log(\"totalprice: \" + pm.environment.get(\"totalprice\"));\r",
									"\r",
									"var boolVal = pm.variables.replaceIn('{{$randomBoolean}}');\r",
									"console.log(\"boolVal: \" + boolVal);\r",
									"\r",
									"pm.environment.set(\"depositpaid\", boolVal );\r",
									"console.log(\"depositpaid: \" + pm.environment.get(\"depositpaid\"));\r",
									"\r",
									"/*\r",
									"pm.environment.set(\"checkin\", pm.variables.replaceIn('{{$randomDatePast}}'));\r",
									"console.log(\"checkin: \" + pm.environment.get(\"checkin\"));\r",
									"*/\r",
									"/*\r",
									"pm.environment.set(\"checkin\", formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
									"*/\r",
									"pm.environment.set(\"checkin\", util.formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
									"console.log(\"checkin: \" + pm.environment.get(\"checkin\"));\r",
									"\r",
									"\r",
									"pm.environment.set(\"checkout\", util.formatDate(pm.variables.replaceIn('{{$randomDateFuture}}')));\r",
									"console.log(\"checkout: \" + pm.environment.get(\"checkout\"));\r",
									"\r",
									"pm.environment.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomNoun}}'));\r",
									"console.log(\"additionalneeds: \" + pm.environment.get(\"additionalneeds\"));\r",
									"\r",
									"\r",
									"const mock = String(pm.environment.get(\"mock\"));\r",
									"if (mock === \"true\") {\r",
									"/*\r",
									"    // Start persisting variables current values to initial values for mock data\r",
									"    let rawdata = {\r",
									"        environment: {\r",
									"            'values' : []\r",
									"        }\r",
									"    }\r",
									"\r",
									"    // Issue: https://github.com/rproman/Restful-Booker/issues/11#issue-1212135656\r",
									"    // Fix: 2022-04-22: Ensure key-value pair are using String data type\r",
									"    let vars = {key: '', value: ''};\r",
									"    vars.key = 'firstname';\r",
									"    vars.value = String(pm.environment.get(\"firstname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'lastname';\r",
									"    vars.value = String(pm.environment.get(\"lastname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'totalprice';\r",
									"    vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'depositpaid';\r",
									"    vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkin';\r",
									"    vars.value = String(pm.environment.get(\"checkin\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkout';\r",
									"    vars.value = String(pm.environment.get(\"checkout\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'additionalneeds';\r",
									"    vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    const requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'PUT',\r",
									"        header: headers,\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: rawdata\r",
									"        }\r",
									"    }\r",
									"\r",
									"    //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error)\r",
									"        }\r",
									"    })\r",
									"*/\r",
									"\r",
									"// 2022-04-26: Fix for https://github.com/rproman/Restful-Booker/issues/13\r",
									"// New implementation of persisting environment variables\r",
									"// to ensure values of other variables that will not be updated will be preserved\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    let requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'GET',\r",
									"        header: headers\r",
									"    }\r",
									"\r",
									"    // retrieve first the complete set of current environment data\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.error(\"Error retrieving current environment data: \" + error)\r",
									"        } else {\r",
									"            let body = response.json()\r",
									"\r",
									"            console.log(\"Current Environment: \" + JSON.stringify(body))\r",
									"\r",
									"/*\r",
									"            // start updating target environment variables\r",
									"            let index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"firstname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"firstname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'firstname';\r",
									"                vars.value = String(pm.environment.get(\"firstname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"lastname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"lastname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'lastname';\r",
									"                vars.value = String(pm.environment.get(\"lastname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"totalprice\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"totalprice\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'totalprice';\r",
									"                vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"depositpaid\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"depositpaid\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'depositpaid';\r",
									"                vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkin\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkin\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkin';\r",
									"                vars.value = String(pm.environment.get(\"checkin\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkout\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkout\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkout';\r",
									"                vars.value = String(pm.environment.get(\"checkout\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"additionalneeds\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"additionalneeds\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'additionalneeds';\r",
									"                vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"bookingid\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"bookingid\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'bookingid';\r",
									"                vars.value = String(pm.environment.get(\"bookingid\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"*/\r",
									"\r",
									"// Ehancement fix for https://github.com/rproman/Restful-Booker/issues/15\r",
									"            const env_keys = [\r",
									"                'firstname', \r",
									"                'lastname', \r",
									"                'totalprice', \r",
									"                'depositpaid', \r",
									"                'checkin', \r",
									"                'checkout', \r",
									"                'additionalneeds', \r",
									"                'bookingid'];\r",
									"\r",
									"            // start updating target environment variables\r",
									"            env_keys.forEach((env_val) => {\r",
									"                let index = body.environment.values.findIndex((item) => {\r",
									"                    return (item.key === env_val)\r",
									"                })\r",
									"                if (index != -1) {\r",
									"                    body.environment.values[index].value = String(pm.environment.get(env_val));\r",
									"                } else {\r",
									"                    let vars = {key: '', value: ''};\r",
									"                    vars.key = String(env_val);\r",
									"                    vars.value = String(pm.environment.get(env_val));\r",
									"                    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                    body.environment.values.push(vars);\r",
									"                }\r",
									"            })\r",
									"\r",
									"\r",
									"            console.log(\"New Environment Variables: \" + JSON.stringify(body))\r",
									"\r",
									"            requestOptions = {\r",
									"                url: postman_api_url,\r",
									"                method: 'PUT',\r",
									"                header: headers,\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: body\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"            pm.sendRequest(requestOptions, (error, response) => {\r",
									"                if (error) {\r",
									"                    console.error(\"Error updating current environment: \" + error)\r",
									"                }\r",
									"            })\r",
									"        }\r",
									"    })\r",
									"}\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Pre-req ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c01e7164-5219-42ec-bcff-34af3d92f85d",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - JSON: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = {};\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - JSON: JSON response data validation\", () => {\r",
									"    try {\r",
									"        /*\r",
									"        pm.expect(pm.response.text()).to.not.eql('');\r",
									"        jsonData = pm.response.json();\r",
									"        */\r",
									"        pm.response.to.be.ok;\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"        jsonData = pm.response.json();\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"JSON response data validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"// JSON schema validation\r",
									"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKING_JSON_SCHEMA\"));\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - JSON: JSON response schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - JSON: First Name validation\", function () {\r",
									"    const firstname = pm.environment.get(\"firstname\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"firstname\", firstname);\r",
									"        console.log(\"firstname: \" + jsonData.firstname);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"First Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - JSON: Last Name validation\", function () {\r",
									"    const lastname = pm.environment.get(\"lastname\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"lastname\", lastname);\r",
									"        console.log(\"lastname: \" + jsonData.lastname);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Last Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - JSON: Total Price validation\", function () {\r",
									"    const totalprice = Number.parseInt(pm.environment.get(\"totalprice\"));\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"totalprice\", totalprice);\r",
									"        console.log(\"totalprice: \" + jsonData.totalprice);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Total Price validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - JSON: Deposit Paid validation\", function () {\r",
									"    const depositpaid = pm.environment.get(\"depositpaid\");\r",
									"    try {\r",
									"        //var boolVal = JSON.parse(depositpaid);\r",
									"        if (typeof(depositpaid) === \"boolean\") {\r",
									"            console.log(\"typeof(depositpaid) is boolean\")\r",
									"            var boolVal = depositpaid;\r",
									"        } else if (typeof(depositpaid) === \"string\") {\r",
									"            console.log(\"typeof(depositpaid) is string\")\r",
									"            var boolVal = depositpaid === \"true\";\r",
									"        }\r",
									"        console.log(\"environment depositpaid: \" + depositpaid)\r",
									"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
									"        pm.expect(jsonData).to.have.property(\"depositpaid\", boolVal);\r",
									"  \r",
									"/*\r",
									"        // alternative way to validate\r",
									"        pm.expect(jsonData.booking).has.ownProperty(\"depositpaid\");\r",
									"        pm.expect(jsonData.booking.depositpaid.toString()).eql(depositpaid)\r",
									"*/\r",
									"        console.log(\"depositpaid: \" + jsonData.depositpaid);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Deposit Paid validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - JSON: Additional Needs validation\", function () {\r",
									"    const additionalneeds = pm.environment.get(\"additionalneeds\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"additionalneeds\", additionalneeds);\r",
									"        console.log(\"additionalneeds: \" + jsonData.additionalneeds);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Additional Needs validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - JSON: Checkin Date validation\", function () {\r",
									"    const checkin = pm.environment.get(\"checkin\");\r",
									"    try {\r",
									"        pm.expect(jsonData.bookingdates).to.have.property(\"checkin\", checkin);\r",
									"        console.log(\"checkin: \" + jsonData.bookingdates.checkin);\r",
									"        console.log(\"environment checkin: \" + checkin);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkin Date validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - JSON: Checkout Date validation\", function () {\r",
									"    const checkout = pm.environment.get(\"checkout\");\r",
									"    try {\r",
									"        pm.expect(jsonData.bookingdates).to.have.property(\"checkout\", checkout);\r",
									"        console.log(\"checkout: \" + jsonData.bookingdates.checkout);\r",
									"        console.log(\"environment checkout: \" + checkout);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkout Date validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "87c8f6da-40ea-49a6-918a-1250a746ddbc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token_key}}",
								"description": "Authorization token returned by Auth request",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : {{depositpaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{update_booking_json_url}}/:id",
							"host": [
								"{{update_booking_json_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingid}}",
									"description": "Booking ID of booking record to update",
									"type": "string"
								}
							]
						},
						"description": "Sends an update booking request using JSON format. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-UpdateBooking)."
					},
					"response": [
						{
							"id": "2b193200-de2a-4d8f-88b2-419a6c203723",
							"name": "Update Booking - JSON",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token=abc123",
										"description": "Authorization token returned by Auth request",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : {{depositpaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{prod_url}}/booking/:id",
									"host": [
										"{{prod_url}}"
									],
									"path": [
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"description": "Booking ID of booking record to update"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "175"
								},
								{
									"key": "Etag",
									"value": "W/\"af-rp4q6tHcg705fHS9dbh3joiQJCo\""
								},
								{
									"key": "Date",
									"value": "Tue, 01 Mar 2022 12:40:45 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}"
						},
						{
							"id": "1548412b-6d1c-47df-b28f-63cd4e4e7905",
							"name": "Update Booking - JSON (Mock)",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token=abc123",
										"description": "Authorization token returned by Auth request",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : {{depositpaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mock_url}}/mock/json/fullupdate/booking/:id",
									"host": [
										"{{mock_url}}"
									],
									"path": [
										"mock",
										"json",
										"fullupdate",
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"description": "Booking ID of booking record to update"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "175"
								},
								{
									"key": "Etag",
									"value": "W/\"af-rp4q6tHcg705fHS9dbh3joiQJCo\""
								},
								{
									"key": "Date",
									"value": "Tue, 01 Mar 2022 12:40:45 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}"
						}
					]
				},
				{
					"name": "Partial Update Booking - JSON",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "45fa1a06-44d2-486b-82aa-2687a1b23005",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Pre-req ===`);\r",
									"\r",
									"/*\r",
									"function formatDate(date) {\r",
									"    let yourDate = new Date(date);\r",
									"    yourDate.toISOString().split('T')[0];\r",
									"    const offset = yourDate.getTimezoneOffset();\r",
									"    yourDate = new Date(yourDate.getTime() - (offset*60000));\r",
									"    return yourDate.toISOString().split('T')[0];\r",
									"};\r",
									"*/\r",
									"\r",
									"/*\r",
									"let util = pm.collectionVariables.get(\"utilityclass\");\r",
									"console.log(\"Create Booking: \" + util );\r",
									"console.log(\"utililityclasss name: \" + util.constructor.name);\r",
									"*/\r",
									"\r",
									"// update only subset of variables for partial update\r",
									"pm.environment.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"console.log(\"firstname: \" + pm.environment.get(\"firstname\"));\r",
									"pm.environment.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"console.log(\"lastname: \" + pm.environment.get(\"lastname\"));\r",
									"\r",
									"\r",
									"const mock = String(pm.environment.get(\"mock\"));\r",
									"if (mock === \"true\") {\r",
									"/*\r",
									"    // Start persisting variables current values to initial values for mock data\r",
									"    let rawdata = {\r",
									"        environment: {\r",
									"            'values' : []\r",
									"        }\r",
									"    }\r",
									"\r",
									"    // Issue: https://github.com/rproman/Restful-Booker/issues/11#issue-1212135656\r",
									"    // Fix: 2022-04-22: Ensure key-value pair are using String data type\r",
									"    let vars = {key: '', value: ''};\r",
									"    vars.key = 'firstname';\r",
									"    vars.value = String(pm.environment.get(\"firstname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'lastname';\r",
									"    vars.value = String(pm.environment.get(\"lastname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'totalprice';\r",
									"    vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'depositpaid';\r",
									"    vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkin';\r",
									"    vars.value = String(pm.environment.get(\"checkin\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkout';\r",
									"    vars.value = String(pm.environment.get(\"checkout\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'additionalneeds';\r",
									"    vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    const requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'PUT',\r",
									"        header: headers,\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: rawdata\r",
									"        }\r",
									"    }\r",
									"\r",
									"    //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error)\r",
									"        }\r",
									"    })\r",
									"*/\r",
									"\r",
									"// 2022-04-26: Fix for https://github.com/rproman/Restful-Booker/issues/13\r",
									"// New implementation of persisting environment variables\r",
									"// to ensure values of other variables that will not be updated will be preserved\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    let requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'GET',\r",
									"        header: headers\r",
									"    }\r",
									"\r",
									"    // retrieve first the complete set of current environment data\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.error(\"Error retrieving current environment data: \" + error)\r",
									"        } else {\r",
									"            let body = response.json()\r",
									"\r",
									"            console.log(\"Current Environment: \" + JSON.stringify(body))\r",
									"\r",
									"/*\r",
									"            // start updating target environment variables\r",
									"            let index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"firstname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"firstname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'firstname';\r",
									"                vars.value = String(pm.environment.get(\"firstname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"lastname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"lastname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'lastname';\r",
									"                vars.value = String(pm.environment.get(\"lastname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"totalprice\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"totalprice\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'totalprice';\r",
									"                vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"depositpaid\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"depositpaid\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'depositpaid';\r",
									"                vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkin\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkin\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkin';\r",
									"                vars.value = String(pm.environment.get(\"checkin\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkout\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkout\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkout';\r",
									"                vars.value = String(pm.environment.get(\"checkout\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"additionalneeds\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"additionalneeds\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'additionalneeds';\r",
									"                vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"bookingid\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"bookingid\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'bookingid';\r",
									"                vars.value = String(pm.environment.get(\"bookingid\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"*/\r",
									"\r",
									"// Ehancement fix for https://github.com/rproman/Restful-Booker/issues/15\r",
									"            const env_keys = [\r",
									"                'firstname', \r",
									"                'lastname', \r",
									"                'totalprice', \r",
									"                'depositpaid', \r",
									"                'checkin', \r",
									"                'checkout', \r",
									"                'additionalneeds', \r",
									"                'bookingid'];\r",
									"\r",
									"            // start updating target environment variables\r",
									"            env_keys.forEach((env_val) => {\r",
									"                let index = body.environment.values.findIndex((item) => {\r",
									"                    return (item.key === env_val)\r",
									"                })\r",
									"                if (index != -1) {\r",
									"                    body.environment.values[index].value = String(pm.environment.get(env_val));\r",
									"                } else {\r",
									"                    let vars = {key: '', value: ''};\r",
									"                    vars.key = String(env_val);\r",
									"                    vars.value = String(pm.environment.get(env_val));\r",
									"                    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                    body.environment.values.push(vars);\r",
									"                }\r",
									"            })\r",
									"\r",
									"            console.log(\"New Environment Variables: \" + JSON.stringify(body))\r",
									"\r",
									"            requestOptions = {\r",
									"                url: postman_api_url,\r",
									"                method: 'PUT',\r",
									"                header: headers,\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: body\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"            pm.sendRequest(requestOptions, (error, response) => {\r",
									"                if (error) {\r",
									"                    console.error(\"Error updating current environment: \" + error)\r",
									"                }\r",
									"            })\r",
									"        }\r",
									"    })\r",
									"}\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Pre-req ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c01e7164-5219-42ec-bcff-34af3d92f85d",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - JSON: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = {};\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - JSON: JSON response data validation\", () => {\r",
									"    try {\r",
									"        /*\r",
									"        pm.expect(pm.response.text()).to.not.eql('');\r",
									"        jsonData = pm.response.json();\r",
									"        */\r",
									"        pm.response.to.be.ok;\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"        jsonData = pm.response.json();\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"JSON response data validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"// JSON schema validation\r",
									"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKING_JSON_SCHEMA\"));\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - JSON: JSON response schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - JSON: First Name validation\", function () {\r",
									"    const firstname = pm.environment.get(\"firstname\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"firstname\", firstname);\r",
									"        console.log(\"firstname: \" + jsonData.firstname);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"First Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - JSON: Last Name validation\", function () {\r",
									"    const lastname = pm.environment.get(\"lastname\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"lastname\", lastname);\r",
									"        console.log(\"lastname: \" + jsonData.lastname);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Last Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - JSON: Total Price validation\", function () {\r",
									"    const totalprice = Number.parseInt(pm.environment.get(\"totalprice\"));\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"totalprice\", totalprice);\r",
									"        console.log(\"totalprice: \" + jsonData.totalprice);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Total Price validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - JSON: Deposit Paid validation\", function () {\r",
									"    const depositpaid = pm.environment.get(\"depositpaid\");\r",
									"    try {\r",
									"        //var boolVal = JSON.parse(depositpaid);\r",
									"        if (typeof(depositpaid) === \"boolean\") {\r",
									"            console.log(\"typeof(depositpaid) is boolean\")\r",
									"            var boolVal = depositpaid;\r",
									"        } else {\r",
									"            var boolVal = depositpaid === \"true\";\r",
									"        }\r",
									"        console.log(\"environment depositpaid: \" + depositpaid)\r",
									"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
									"        pm.expect(jsonData).to.have.property(\"depositpaid\", boolVal);\r",
									"  \r",
									"/*\r",
									"        // alternative way to validate\r",
									"        pm.expect(jsonData.booking).has.ownProperty(\"depositpaid\");\r",
									"        pm.expect(jsonData.booking.depositpaid.toString()).eql(depositpaid)\r",
									"*/\r",
									"        console.log(\"depositpaid: \" + jsonData.depositpaid);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Deposit Paid validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - JSON: Additional Needs validation\", function () {\r",
									"    const additionalneeds = pm.environment.get(\"additionalneeds\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"additionalneeds\", additionalneeds);\r",
									"        console.log(\"additionalneeds: \" + jsonData.additionalneeds);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Additional Needs validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - JSON: Checkin Date validation\", function () {\r",
									"    const checkin = pm.environment.get(\"checkin\");\r",
									"    try {\r",
									"        pm.expect(jsonData.bookingdates).to.have.property(\"checkin\", checkin);\r",
									"        console.log(\"checkin: \" + jsonData.bookingdates.checkin);\r",
									"        console.log(\"environment checkin: \" + checkin);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkin Date validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - JSON: Checkout Date validation\", function () {\r",
									"    const checkout = pm.environment.get(\"checkout\");\r",
									"    try {\r",
									"        pm.expect(jsonData.bookingdates).to.have.property(\"checkout\", checkout);\r",
									"        console.log(\"checkout: \" + jsonData.bookingdates.checkout);\r",
									"        console.log(\"environment checkout: \" + checkout);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkout Date validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"if (pm.iterationData.has(\"data_format\")) {\r",
									"    postman.setNextRequest(\"Get Booking IDs - JSON\");\r",
									"}\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "37b8f042-2962-4ec8-a332-e6da94f9d418",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "{{password}}",
								"username": "{{username}}"
							}
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{partialupdate_booking_json_url}}/:id",
							"host": [
								"{{partialupdate_booking_json_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"id": "2efcb5b6-fbf7-4063-b6f9-3cb420ef6a84",
									"key": "id",
									"value": "{{bookingid}}",
									"description": "Booking ID of booking record to update",
									"type": "string"
								}
							]
						},
						"description": "Sends a partial update booking request using JSON format. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-PartialUpdateBooking)."
					},
					"response": [
						{
							"id": "7940e67f-66a9-4ea3-b29d-b32963ea8aac",
							"name": "Partial Update Booking - JSON",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"FirstName\",\r\n    \"lastname\" : \"LastName\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{prod_url}}/booking/:id",
									"host": [
										"{{prod_url}}"
									],
									"path": [
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"description": "Booking ID of booking record to update"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "174"
								},
								{
									"key": "Etag",
									"value": "W/\"ae-PNzOs1BICgzekEvBeCbJ87lHLmg\""
								},
								{
									"key": "Date",
									"value": "Wed, 02 Mar 2022 13:23:59 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}"
						},
						{
							"id": "b15e40d0-e62a-4445-b989-e2f95014112f",
							"name": "Partial Update Booking - JSON (Mock)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mock_url}}/mock/json/partialupdate/booking/:id",
									"host": [
										"{{mock_url}}"
									],
									"path": [
										"mock",
										"json",
										"partialupdate",
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"description": "Booking ID of booking record to update"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "174"
								},
								{
									"key": "Etag",
									"value": "W/\"ae-PNzOs1BICgzekEvBeCbJ87lHLmg\""
								},
								{
									"key": "Date",
									"value": "Wed, 02 Mar 2022 13:23:59 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "{\n    \"firstname\" : \"{{firstname}}\",\n    \"lastname\" : \"{{lastname}}\",\n    \"totalprice\" : {{totalprice}},\n    \"depositpaid\" : {{depositpaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{additionalneeds}}\"\n}"
						}
					]
				}
			],
			"_postman_id": "1ec20f36-2098-4b53-a4cb-289082f732f4"
		},
		{
			"name": "Tests using XML format",
			"item": [
				{
					"name": "Create Booking - XML",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e5f1e93-0599-4a5f-86f5-2fa7dfef53e5",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - XML: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//let jsonData = '';\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - XML: XML response data validation\", () => {\r",
									"    try {\r",
									"        /*\r",
									"        pm.expect(pm.response.text()).to.not.eql('');\r",
									"        jsonData = pm.response.json();\r",
									"        */\r",
									"        pm.response.to.be.ok;\r",
									"        pm.response.to.be.withBody;\r",
									"        \r",
									"        console.log(\"response.text(): \\n\" + pm.response.text());\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"XML response data validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"//const cheerio = require('cheerio');\r",
									"const $ = cheerio.load(pm.response.text(), {\r",
									"    ignoreWhitespace: true,\r",
									"    xmlMode: true\r",
									"    });\r",
									"\r",
									"\r",
									"// Render XML\r",
									"console.log(\"cheerio render XML:\\n\" + $.xml());\r",
									"\r",
									"// JSON schema validation\r",
									"var jsonData = xml2Json($.xml());\r",
									"\r",
									"console.log(\"xml2JSON: \" + JSON.stringify(jsonData));\r",
									"\r",
									"const schema = JSON.parse(pm.collectionVariables.get(\"BOOKING_XML2JSON_SCHEMA\"));\r",
									"\r",
									"// XML -> JSON schema validation. Use this since there is no direct way to validate XML schema in postman\r",
									"pm.test(\"#TEST: Create Booking - XML: XML to JSON response schema validation\", () => {\r",
									"    try {\r",
									"        //tv4.validate(jsonData, schema);\r",
									"        let Ajv = require('ajv');\r",
									"        ajv = new Ajv({logger: console, allErrors: true});\r",
									"        pm.expect(ajv.validate(schema, jsonData), JSON.stringify(ajv.errors)).to.be.true;\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"XML to JSON schema validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - XML: Booking ID validation\", function () {\r",
									"    try {\r",
									"\r",
									"        // Get <created-booking> node\r",
									"        //let booking = $('created-booking');\r",
									"        let bookingid = $(\"bookingid\");\r",
									"\r",
									"        pm.expect(bookingid.text()).to.be.not.empty;\r",
									"\r",
									"        pm.environment.set(\"bookingid\", bookingid.text());\r",
									"        console.log(\"bookingid: \" + bookingid.text());\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Booking ID validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - XML: First Name validation\", function () {\r",
									"    try {\r",
									"        let firstname = $(\"firstname\");\r",
									"        console.log(\"firstname: \" + firstname.text());\r",
									"\r",
									"        pm.expect(firstname.text()).to.be.eql(pm.environment.get(\"firstname\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"First Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - XML: Last Name validation\", function () {\r",
									"    try {\r",
									"        let lastname = $(\"lastname\");\r",
									"        console.log(\"lastname: \" + lastname.text());\r",
									"\r",
									"        pm.expect(lastname.text()).to.be.eql(pm.environment.get(\"lastname\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Last Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - XML: Total Price validation\", function () {\r",
									"    try {\r",
									"        let totalprice = $(\"totalprice\");\r",
									"        console.log(\"totalprice: \" + totalprice.text());\r",
									"\r",
									"        \r",
									"\r",
									"        pm.expect(totalprice.text()).to.be.eql(\"\" + pm.environment.get(\"totalprice\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Total Price validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - XML: Deposit Paid validation\", function () {\r",
									"    const depositpaidVal = pm.environment.get(\"depositpaid\");\r",
									"    try {\r",
									"        //var boolVal = JSON.parse(depositpaidVal);\r",
									"        if (typeof(depositpaidVal) === \"boolean\") {\r",
									"            console.log(\"typeof(depositpaidVal) is boolean\")\r",
									"            var boolVal = depositpaidVal;\r",
									"        } else {\r",
									"            var boolVal = depositpaidVal === \"true\";\r",
									"        }\r",
									"        console.log(\"environment depositpaid: \" + depositpaidVal);\r",
									"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
									"  \r",
									"        let depositpaid = $(\"depositpaid\");\r",
									"        console.log(\"depositpaid: \" + depositpaid.text());\r",
									"\r",
									"        pm.expect(depositpaid.text()).to.be.eql(\"\" + pm.environment.get(\"depositpaid\"));\r",
									"        //pm.expect(depositpaid.text()).to.be.eql(boolVal);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Deposit Paid validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - XML: Checkin validation\", function () {\r",
									"    try {\r",
									"        let checkin = $(\"checkin\");\r",
									"        console.log(\"checkin: \" + checkin.text());\r",
									"\r",
									"        pm.expect(checkin.text()).to.be.eql(pm.environment.get(\"checkin\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkin validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - XML: Checkout validation\", function () {\r",
									"    try {\r",
									"        let checkout = $(\"checkout\");\r",
									"        console.log(\"checkout: \" + checkout.text());\r",
									"\r",
									"        pm.expect(checkout.text()).to.be.eql(pm.environment.get(\"checkout\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkout validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - XML: Additional needs validation\", function () {\r",
									"    try {\r",
									"        let additionalneeds = $(\"additionalneeds\");\r",
									"        console.log(\"additionalneeds: \" + additionalneeds.text());\r",
									"\r",
									"        pm.expect(additionalneeds.text()).to.be.eql(pm.environment.get(\"additionalneeds\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Additional needs validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2ba29eb5-80d9-4acf-9802-02d8efe546ad",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Pre-req ===`);\r",
									"\r",
									"/*\r",
									"function formatDate(date) {\r",
									"    let yourDate = new Date(date);\r",
									"    yourDate.toISOString().split('T')[0];\r",
									"    const offset = yourDate.getTimezoneOffset();\r",
									"    yourDate = new Date(yourDate.getTime() - (offset*60000));\r",
									"    return yourDate.toISOString().split('T')[0];\r",
									"};\r",
									"*/\r",
									"\r",
									"/*\r",
									"let util = pm.collectionVariables.get(\"utilityclass\");\r",
									"console.log(\"Create Booking: \" + util );\r",
									"console.log(\"utililityclasss name: \" + util.constructor.name);\r",
									"*/\r",
									"\r",
									"// if this data variable exist, then a data file is in use\r",
									"if (pm.iterationData.has(\"data_format\")) {  \r",
									"    console.log(\"Using data file!\");\r",
									"    // New implementation using test data variables\r",
									"    pm.environment.set(\"firstname\", pm.iterationData.get(\"first_name\"));\r",
									"    console.log(\"firstname: \" + pm.environment.get(\"firstname\"));\r",
									"\r",
									"    pm.environment.set(\"lastname\", pm.iterationData.get(\"last_name\"));\r",
									"    console.log(\"lastname: \" + pm.environment.get(\"lastname\"));\r",
									"\r",
									"    pm.environment.set(\"totalprice\", pm.iterationData.get(\"total_price\"));\r",
									"    console.log(\"totalprice: \" + pm.environment.get(\"totalprice\"));\r",
									"\r",
									"    var boolVal = pm.iterationData.get(\"deposit_paid\");\r",
									"    console.log(\"boolVal: \" + boolVal);\r",
									"\r",
									"    pm.environment.set(\"depositpaid\", boolVal );\r",
									"    console.log(\"depositpaid: \" + pm.environment.get(\"depositpaid\"));\r",
									"\r",
									"    pm.environment.set(\"checkin\", pm.iterationData.get(\"check_in\"));\r",
									"    console.log(\"checkin: \" + pm.environment.get(\"checkin\"));\r",
									"\r",
									"    pm.environment.set(\"checkout\", pm.iterationData.get(\"check_out\"));\r",
									"    console.log(\"checkout: \" + pm.environment.get(\"checkout\"));\r",
									"\r",
									"    pm.environment.set(\"additionalneeds\", pm.iterationData.get(\"additional_needs\"));\r",
									"    console.log(\"additionalneeds: \" + pm.environment.get(\"additionalneeds\"));\r",
									"} else {\r",
									"    console.log(\"Using dynamic variables!\");\r",
									"    // Old implementation using Postman Dynamic Variables\r",
									"    pm.environment.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"    console.log(\"firstname: \" + pm.environment.get(\"firstname\"));\r",
									"\r",
									"    pm.environment.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"    console.log(\"lastname: \" + pm.environment.get(\"lastname\"));\r",
									"\r",
									"    pm.environment.set(\"totalprice\", pm.variables.replaceIn('{{$randomInt}}'));\r",
									"    console.log(\"totalprice: \" + pm.environment.get(\"totalprice\"));\r",
									"\r",
									"    var boolVal = pm.variables.replaceIn('{{$randomBoolean}}');\r",
									"    console.log(\"boolVal: \" + boolVal);\r",
									"\r",
									"    pm.environment.set(\"depositpaid\", boolVal );\r",
									"    console.log(\"depositpaid: \" + pm.environment.get(\"depositpaid\"));\r",
									"\r",
									"    pm.environment.set(\"checkin\", util.formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
									"    console.log(\"checkin: \" + pm.environment.get(\"checkin\"));\r",
									"\r",
									"    pm.environment.set(\"checkout\", util.formatDate(pm.variables.replaceIn('{{$randomDateFuture}}')));\r",
									"    console.log(\"checkout: \" + pm.environment.get(\"checkout\"));\r",
									"\r",
									"    pm.environment.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomNoun}}'));\r",
									"    console.log(\"additionalneeds: \" + pm.environment.get(\"additionalneeds\"));\r",
									"}\r",
									"\r",
									"const mock = String(pm.environment.get(\"mock\"));\r",
									"if (mock === \"true\") {\r",
									"/*\r",
									"    // Start persisting variables current values to initial values for mock data\r",
									"    let rawdata = {\r",
									"        environment: {\r",
									"            'values' : []\r",
									"        }\r",
									"    }\r",
									"\r",
									"    // Issue: https://github.com/rproman/Restful-Booker/issues/11#issue-1212135656\r",
									"    // Fix: 2022-04-22: Ensure key-value pair are using String data type\r",
									"    let vars = {key: '', value: ''};\r",
									"    vars.key = 'firstname';\r",
									"    vars.value = String(pm.environment.get(\"firstname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'lastname';\r",
									"    vars.value = String(pm.environment.get(\"lastname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'totalprice';\r",
									"    vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'depositpaid';\r",
									"    vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkin';\r",
									"    vars.value = String(pm.environment.get(\"checkin\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkout';\r",
									"    vars.value = String(pm.environment.get(\"checkout\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'additionalneeds';\r",
									"    vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    const requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'PUT',\r",
									"        header: headers,\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: rawdata\r",
									"        }\r",
									"    }\r",
									"\r",
									"    //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error)\r",
									"        }\r",
									"    })\r",
									"*/\r",
									"\r",
									"// 2022-04-26: Fix for https://github.com/rproman/Restful-Booker/issues/13\r",
									"// New implementation of persisting environment variables\r",
									"// to ensure values of other variables that will not be updated will be preserved\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    let requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'GET',\r",
									"        header: headers\r",
									"    }\r",
									"\r",
									"    // retrieve first the complete set of current environment data\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.error(\"Error retrieving current environment data: \" + error)\r",
									"        } else {\r",
									"            let body = response.json()\r",
									"\r",
									"            console.log(\"Current Environment: \" + JSON.stringify(body))\r",
									"\r",
									"/*\r",
									"            // start updating target environment variables\r",
									"            let index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"firstname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"firstname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'firstname';\r",
									"                vars.value = String(pm.environment.get(\"firstname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"lastname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"lastname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'lastname';\r",
									"                vars.value = String(pm.environment.get(\"lastname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"totalprice\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"totalprice\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'totalprice';\r",
									"                vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"depositpaid\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"depositpaid\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'depositpaid';\r",
									"                vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkin\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkin\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkin';\r",
									"                vars.value = String(pm.environment.get(\"checkin\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkout\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkout\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkout';\r",
									"                vars.value = String(pm.environment.get(\"checkout\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"additionalneeds\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"additionalneeds\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'additionalneeds';\r",
									"                vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"*/\r",
									"\r",
									"// Ehancement fix for https://github.com/rproman/Restful-Booker/issues/15\r",
									"            const env_keys = [\r",
									"                'firstname', \r",
									"                'lastname', \r",
									"                'totalprice', \r",
									"                'depositpaid', \r",
									"                'checkin', \r",
									"                'checkout', \r",
									"                'additionalneeds', \r",
									"                'bookingid'];\r",
									"\r",
									"            // start updating target environment variables\r",
									"            env_keys.forEach((env_val) => {\r",
									"                let index = body.environment.values.findIndex((item) => {\r",
									"                    return (item.key === env_val)\r",
									"                })\r",
									"                if (index != -1) {\r",
									"                    body.environment.values[index].value = String(pm.environment.get(env_val));\r",
									"                } else {\r",
									"                    let vars = {key: '', value: ''};\r",
									"                    vars.key = String(env_val);\r",
									"                    vars.value = String(pm.environment.get(env_val));\r",
									"                    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                    body.environment.values.push(vars);\r",
									"                }\r",
									"            })\r",
									"\r",
									"            console.log(\"New Environment Variables: \" + JSON.stringify(body))\r",
									"\r",
									"            requestOptions = {\r",
									"                url: postman_api_url,\r",
									"                method: 'PUT',\r",
									"                header: headers,\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: body\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"            pm.sendRequest(requestOptions, (error, response) => {\r",
									"                if (error) {\r",
									"                    console.error(\"Error updating current environment: \" + error)\r",
									"                }\r",
									"            })\r",
									"        }\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Pre-req ===`);\r"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "1b61dbac-2df2-4c38-8efc-7c6d1328e603",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true,
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<booking>\r\n    <firstname>{{firstname}}</firstname>\r\n    <lastname>{{lastname}}</lastname>\r\n    <totalprice>{{totalprice}}</totalprice>\r\n    <depositpaid>{{depositpaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\r\n</booking>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": "{{create_booking_xml_url}}",
						"description": "Sends a create booking request using XML format. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-CreateBooking)."
					},
					"response": [
						{
							"id": "7346bc1f-0a9f-4014-b49b-bb52fe326523",
							"name": "Create Booking - XML",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <firstname>{{firstname}}</firstname>\r\n    <lastname>{{lastname}}</lastname>\r\n    <totalprice>{{totalprice}}</totalprice>\r\n    <depositpaid>{{depositpaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": "{{prod_url}}/booking"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "449"
								},
								{
									"key": "Etag",
									"value": "W/\"1c1-0rwkvO98FqdAmIc2ZAer2gWnFQY\""
								},
								{
									"key": "Date",
									"value": "Thu, 24 Feb 2022 08:37:59 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "<?xml version='1.0'?>\n<created-booking>\n    <bookingid>{{$randomInt}}</bookingid>\n    <booking>\n        <firstname>{{firstname}}</firstname>\n        <lastname>{{lastname}}</lastname>\n        <totalprice>{{totalprice}}</totalprice>\n        <depositpaid>{{depositpaid}}</depositpaid>\n        <bookingdates>\n            <checkin>{{checkin}}</checkin>\n            <checkout>{{checkout}}</checkout>\n        </bookingdates>\n        <additionalneeds>{{additionalneeds}}</additionalneeds>\n    </booking>\n</created-booking>"
						},
						{
							"id": "c613b8a4-a6b7-49d8-94c4-77aa67f10ac3",
							"name": "Create Booking - XML (Mock)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <firstname>{{firstname}}</firstname>\r\n    <lastname>{{lastname}}</lastname>\r\n    <totalprice>{{totalprice}}</totalprice>\r\n    <depositpaid>{{depositpaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": "{{mock_url}}/mock/xml/booking"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "449"
								},
								{
									"key": "Etag",
									"value": "W/\"1c1-0rwkvO98FqdAmIc2ZAer2gWnFQY\""
								},
								{
									"key": "Date",
									"value": "Thu, 24 Feb 2022 08:37:59 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "<?xml version='1.0'?>\n<created-booking>\n    <bookingid>{{$randomInt}}</bookingid>\n    <booking>\n        <firstname>{{firstname}}</firstname>\n        <lastname>{{lastname}}</lastname>\n        <totalprice>{{totalprice}}</totalprice>\n        <depositpaid>{{depositpaid}}</depositpaid>\n        <bookingdates>\n            <checkin>{{checkin}}</checkin>\n            <checkout>{{checkout}}</checkout>\n        </bookingdates>\n        <additionalneeds>{{additionalneeds}}</additionalneeds>\n    </booking>\n</created-booking>"
						}
					]
				},
				{
					"name": "Get Booking - XML",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67f51642-4e61-4756-b2f0-addbbbd8feeb",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(\"#TEST: Get Booking Request: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsondata = {};\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - XML: XML response data validation\", () => {\r",
									"    try {\r",
									"        pm.response.to.be.ok;\r",
									"        pm.response.to.be.withBody;\r",
									"        \r",
									"        console.log(pm.response.text());\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"XML response data validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"//const cheerio = require('cheerio');\r",
									"const $ = cheerio.load(pm.response.text(), {\r",
									"    ignoreWhitespace: true,\r",
									"    xmlMode: true\r",
									"    });\r",
									"\r",
									"\r",
									"// Render XML\r",
									"console.log($.xml());\r",
									"\r",
									"// JSON schema validation\r",
									"jsonData = xml2Json($.xml());\r",
									"\r",
									"console.log(\"xml2JSON: \" + JSON.stringify(jsonData));\r",
									"\r",
									"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKING_XML_SCHEMA\"));\r",
									"\r",
									"console.log(\"schema \" + JSON.stringify(schema));\r",
									"\r",
									"// XML -> JSON schema validation. Use this since there is no direct way to validate XML schema in postman\r",
									"pm.test(\"#TEST: Get Booking - XML: XML to JSON response schema validation\", () => {\r",
									"    try {\r",
									"        \r",
									"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"        /*\r",
									"        let Ajv = require('ajv');\r",
									"        ajv = new Ajv({logger: console, allErrors: true});\r",
									"        pm.expect(ajv.validate(schema, jsonData), JSON.stringify(ajv.errors)).to.be.true;\r",
									"        */\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"XML to JSON schema validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - XML: First Name validation\", function () {\r",
									"    try {\r",
									"        let firstname = $(\"firstname\");\r",
									"        console.log(\"firstname: \" + firstname.text());\r",
									"\r",
									"        pm.expect(firstname.text()).to.be.eql(pm.environment.get(\"firstname\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"First Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - XML: Last Name validation\", function () {\r",
									"    try {\r",
									"        let lastname = $(\"lastname\");\r",
									"        console.log(\"lastname: \" + lastname.text());\r",
									"\r",
									"        pm.expect(lastname.text()).to.be.eql(pm.environment.get(\"lastname\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Last Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - XML: Total Price validation\", function () {\r",
									"    try {\r",
									"        let totalprice = $(\"totalprice\");\r",
									"        console.log(\"totalprice: \" + totalprice.text());\r",
									"\r",
									"        pm.expect(totalprice.text()).to.be.eql(\"\" + pm.environment.get(\"totalprice\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Total Price validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - XML: Deposit Paid validation\", function () {\r",
									"    const depositpaidVal = pm.environment.get(\"depositpaid\");\r",
									"    try {\r",
									"        //var boolVal = JSON.parse(depositpaidVal);\r",
									"        if (typeof(depositpaidVal) === \"boolean\") {\r",
									"            console.log(\"typeof(depositpaidVal) is boolean\")\r",
									"            var boolVal = depositpaidVal;\r",
									"        } else {\r",
									"            var boolVal = depositpaidVal === \"true\";\r",
									"        }\r",
									"        console.log(\"environment depositpaid: \" + depositpaidVal);\r",
									"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
									"  \r",
									"        let depositpaid = $(\"depositpaid\");\r",
									"        console.log(\"depositpaid: \" + depositpaid.text());\r",
									"\r",
									"        pm.expect(depositpaid.text()).to.be.eql(\"\" + pm.environment.get(\"depositpaid\"));\r",
									"        //pm.expect(depositpaid.text()).to.be.eql(boolVal);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Deposit Paid validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - XML: Checkin validation\", function () {\r",
									"    try {\r",
									"        let checkin = $(\"checkin\");\r",
									"        console.log(\"checkin: \" + checkin.text());\r",
									"\r",
									"        pm.expect(checkin.text()).to.be.eql(pm.environment.get(\"checkin\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkin validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - XML: Checkout validation\", function () {\r",
									"    try {\r",
									"        let checkout = $(\"checkout\");\r",
									"        console.log(\"checkout: \" + checkout.text());\r",
									"\r",
									"        pm.expect(checkout.text()).to.be.eql(pm.environment.get(\"checkout\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkout validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Get Booking - XML: Additional needs validation\", function () {\r",
									"    try {\r",
									"        let additionalneeds = $(\"additionalneeds\");\r",
									"        console.log(\"additionalneeds: \" + additionalneeds.text());\r",
									"\r",
									"        pm.expect(additionalneeds.text()).to.be.eql(pm.environment.get(\"additionalneeds\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Additional needs validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ed225f08-f878-45fd-b7bb-7d7915a9b6c1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "164f444a-1030-4c2c-8200-64a3730b601b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{get_booking_xml_url}}/:id",
							"host": [
								"{{get_booking_xml_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"id": "e5c90f22-3c81-40c6-8184-40b5717620ae",
									"key": "id",
									"value": "{{bookingid}}",
									"description": "Booking ID",
									"type": "string"
								}
							]
						},
						"description": "Sends a get booking request to the Restfulbooker API to retrieve a booking record based on the booking ID. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-GetBooking)."
					},
					"response": [
						{
							"id": "3e19182b-412e-4382-990f-092b511ab37d",
							"name": "Get Booking - XML",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{prod_url}}/booking/:id",
									"host": [
										"{{prod_url}}"
									],
									"path": [
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"description": "Booking ID"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "335"
								},
								{
									"key": "Etag",
									"value": "W/\"14f-4FByqNj9vFuyG2QZ4622Mzwiu9E\""
								},
								{
									"key": "Date",
									"value": "Thu, 24 Feb 2022 08:47:21 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "<?xml version='1.0'?>\n<booking>\n    <firstname>{{firstname}}</firstname>\n    <lastname>{{lastname}}</lastname>\n    <totalprice>{{totalprice}}</totalprice>\n    <depositpaid>{{depositpaid}}</depositpaid>\n    <bookingdates>\n        <checkin>{{checkin}}</checkin>\n        <checkout>{{checkout}}</checkout>\n    </bookingdates>\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\n</booking>"
						},
						{
							"id": "f702492f-d3b2-408d-8ae5-5a6ab122b0e9",
							"name": "Get Booking - XML (Mock)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mock_url}}/mock/xml/booking/:id",
									"host": [
										"{{mock_url}}"
									],
									"path": [
										"mock",
										"xml",
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"description": "Booking ID"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "335"
								},
								{
									"key": "Etag",
									"value": "W/\"14f-4FByqNj9vFuyG2QZ4622Mzwiu9E\""
								},
								{
									"key": "Date",
									"value": "Thu, 24 Feb 2022 08:47:21 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "<?xml version='1.0'?>\n<booking>\n    <firstname>{{firstname}}</firstname>\n    <lastname>{{lastname}}</lastname>\n    <totalprice>{{totalprice}}</totalprice>\n    <depositpaid>{{depositpaid}}</depositpaid>\n    <bookingdates>\n        <checkin>{{checkin}}</checkin>\n        <checkout>{{checkout}}</checkout>\n    </bookingdates>\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\n</booking>"
						}
					]
				},
				{
					"name": "Update Booking - XML",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e5f1e93-0599-4a5f-86f5-2fa7dfef53e5",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - XML: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//let jsonData = '';\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - XML: XML response data validation\", () => {\r",
									"    try {\r",
									"        /*\r",
									"        pm.expect(pm.response.text()).to.not.eql('');\r",
									"        jsonData = pm.response.json();\r",
									"        */\r",
									"        pm.response.to.be.ok;\r",
									"        pm.response.to.be.withBody;\r",
									"        \r",
									"        console.log(pm.response.text());\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"XML response data validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"//const cheerio = require('cheerio');\r",
									"const $ = cheerio.load(pm.response.text(), {\r",
									"    ignoreWhitespace: true,\r",
									"    xmlMode: true\r",
									"    });\r",
									"\r",
									"\r",
									"// Render XML\r",
									"console.log($.xml());\r",
									"\r",
									"// JSON schema validation\r",
									"var jsonData = xml2Json($.xml());\r",
									"\r",
									"console.log(\"xml2JSON: \" + JSON.stringify(jsonData));\r",
									"\r",
									"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKING_XML_SCHEMA\"));\r",
									"\r",
									"// XML -> JSON schema validation. Use this since there is no direct way to validate XML schema in postman\r",
									"pm.test(\"#TEST: Update Booking - XML: XML to JSON response schema validation\", () => {\r",
									"    try {\r",
									"        //tv4.validate(jsonData, schema);\r",
									"        let Ajv = require('ajv');\r",
									"        ajv = new Ajv({logger: console, allErrors: true});\r",
									"        pm.expect(ajv.validate(schema, jsonData), JSON.stringify(ajv.errors)).to.be.true;\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"XML to JSON schema validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - XML: First Name validation\", function () {\r",
									"    try {\r",
									"        let firstname = $(\"firstname\");\r",
									"        console.log(\"firstname: \" + firstname.text());\r",
									"\r",
									"        pm.expect(firstname.text()).to.be.eql(pm.environment.get(\"firstname\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"First Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - XML: Last Name validation\", function () {\r",
									"    try {\r",
									"        let lastname = $(\"lastname\");\r",
									"        console.log(\"lastname: \" + lastname.text());\r",
									"\r",
									"        pm.expect(lastname.text()).to.be.eql(pm.environment.get(\"lastname\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Last Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - XML: Total Price validation\", function () {\r",
									"    try {\r",
									"        let totalprice = $(\"totalprice\");\r",
									"        console.log(\"totalprice: \" + totalprice.text());\r",
									"\r",
									"        pm.expect(totalprice.text()).to.be.eql(pm.environment.get(\"totalprice\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Total Price validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - XML: Deposit Paid validation\", function () {\r",
									"    const depositpaidVal = pm.environment.get(\"depositpaid\");\r",
									"    try {\r",
									"        //var boolVal = JSON.parse(depositpaidVal);\r",
									"        if (typeof(depositpaidVal) === \"boolean\") {\r",
									"            console.log(\"typeof(depositpaidVal) is boolean\")\r",
									"            var boolVal = depositpaidVal;\r",
									"        } else {\r",
									"            var boolVal = depositpaidVal === \"true\";\r",
									"        }\r",
									"        console.log(\"environment depositpaid: \" + depositpaidVal);\r",
									"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
									"  \r",
									"        let depositpaid = $(\"depositpaid\");\r",
									"        console.log(\"depositpaid: \" + depositpaid.text());\r",
									"\r",
									"        pm.expect(depositpaid.text()).to.be.eql(depositpaidVal);\r",
									"        //pm.expect(depositpaid.text()).to.be.eql(boolVal);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Deposit Paid validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - XML: Checkin validation\", function () {\r",
									"    try {\r",
									"        let checkin = $(\"checkin\");\r",
									"        console.log(\"checkin: \" + checkin.text());\r",
									"\r",
									"        pm.expect(checkin.text()).to.be.eql(pm.environment.get(\"checkin\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkin validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - XML: Checkout validation\", function () {\r",
									"    try {\r",
									"        let checkout = $(\"checkout\");\r",
									"        console.log(\"checkout: \" + checkout.text());\r",
									"\r",
									"        pm.expect(checkout.text()).to.be.eql(pm.environment.get(\"checkout\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkout validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - XML: Additional needs validation\", function () {\r",
									"    try {\r",
									"        let additionalneeds = $(\"additionalneeds\");\r",
									"        console.log(\"additionalneeds: \" + additionalneeds.text());\r",
									"\r",
									"        pm.expect(additionalneeds.text()).to.be.eql(pm.environment.get(\"additionalneeds\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Additional needs validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2ba29eb5-80d9-4acf-9802-02d8efe546ad",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Pre-req ===`);\r",
									"\r",
									"pm.environment.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"console.log(\"firstname: \" + pm.environment.get(\"firstname\"));\r",
									"\r",
									"pm.environment.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"console.log(\"lastname: \" + pm.environment.get(\"lastname\"));\r",
									"\r",
									"pm.environment.set(\"totalprice\", pm.variables.replaceIn('{{$randomInt}}'));\r",
									"console.log(\"totalprice: \" + pm.environment.get(\"totalprice\"));\r",
									"\r",
									"var boolVal = pm.variables.replaceIn('{{$randomBoolean}}');\r",
									"console.log(\"boolVal: \" + boolVal);\r",
									"\r",
									"pm.environment.set(\"depositpaid\", boolVal );\r",
									"console.log(\"depositpaid: \" + pm.environment.get(\"depositpaid\"));\r",
									"\r",
									"/*\r",
									"pm.environment.set(\"checkin\", pm.variables.replaceIn('{{$randomDatePast}}'));\r",
									"console.log(\"checkin: \" + pm.environment.get(\"checkin\"));\r",
									"*/\r",
									"/*\r",
									"pm.environment.set(\"checkin\", formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
									"*/\r",
									"pm.environment.set(\"checkin\", util.formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
									"console.log(\"checkin: \" + pm.environment.get(\"checkin\"));\r",
									"\r",
									"\r",
									"pm.environment.set(\"checkout\", util.formatDate(pm.variables.replaceIn('{{$randomDateFuture}}')));\r",
									"console.log(\"checkout: \" + pm.environment.get(\"checkout\"));\r",
									"\r",
									"pm.environment.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomNoun}}'));\r",
									"console.log(\"additionalneeds: \" + pm.environment.get(\"additionalneeds\"));\r",
									"\r",
									"\r",
									"const mock = String(pm.environment.get(\"mock\"));\r",
									"if (mock === \"true\") {\r",
									"/*\r",
									"    // Start persisting variables current values to initial values for mock data\r",
									"    let rawdata = {\r",
									"        environment: {\r",
									"            'values' : []\r",
									"        }\r",
									"    }\r",
									"\r",
									"    // Issue: https://github.com/rproman/Restful-Booker/issues/11#issue-1212135656\r",
									"    // Fix: 2022-04-22: Ensure key-value pair are using String data type\r",
									"    let vars = {key: '', value: ''};\r",
									"    vars.key = 'firstname';\r",
									"    vars.value = String(pm.environment.get(\"firstname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'lastname';\r",
									"    vars.value = String(pm.environment.get(\"lastname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'totalprice';\r",
									"    vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'depositpaid';\r",
									"    vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkin';\r",
									"    vars.value = String(pm.environment.get(\"checkin\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkout';\r",
									"    vars.value = String(pm.environment.get(\"checkout\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'additionalneeds';\r",
									"    vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    const requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'PUT',\r",
									"        header: headers,\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: rawdata\r",
									"        }\r",
									"    }\r",
									"\r",
									"    //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error)\r",
									"        }\r",
									"    })\r",
									"*/\r",
									"\r",
									"// 2022-04-26: Fix for https://github.com/rproman/Restful-Booker/issues/13\r",
									"// New implementation of persisting environment variables\r",
									"// to ensure values of other variables that will not be updated will be preserved\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    let requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'GET',\r",
									"        header: headers\r",
									"    }\r",
									"\r",
									"    // retrieve first the complete set of current environment data\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.error(\"Error retrieving current environment data: \" + error)\r",
									"        } else {\r",
									"            let body = response.json()\r",
									"\r",
									"            console.log(\"Current Environment: \" + JSON.stringify(body))\r",
									"\r",
									"/*\r",
									"            // start updating target environment variables\r",
									"            let index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"firstname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"firstname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'firstname';\r",
									"                vars.value = String(pm.environment.get(\"firstname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"lastname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"lastname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'lastname';\r",
									"                vars.value = String(pm.environment.get(\"lastname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"totalprice\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"totalprice\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'totalprice';\r",
									"                vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"depositpaid\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"depositpaid\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'depositpaid';\r",
									"                vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkin\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkin\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkin';\r",
									"                vars.value = String(pm.environment.get(\"checkin\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkout\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkout\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkout';\r",
									"                vars.value = String(pm.environment.get(\"checkout\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"additionalneeds\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"additionalneeds\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'additionalneeds';\r",
									"                vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"bookingid\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"bookingid\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'bookingid';\r",
									"                vars.value = String(pm.environment.get(\"bookingid\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"*/            \r",
									"// Ehancement fix for https://github.com/rproman/Restful-Booker/issues/15\r",
									"            const env_keys = [\r",
									"                'firstname', \r",
									"                'lastname', \r",
									"                'totalprice', \r",
									"                'depositpaid', \r",
									"                'checkin', \r",
									"                'checkout', \r",
									"                'additionalneeds', \r",
									"                'bookingid'];\r",
									"\r",
									"            // start updating target environment variables\r",
									"            env_keys.forEach((env_val) => {\r",
									"                let index = body.environment.values.findIndex((item) => {\r",
									"                    return (item.key === env_val)\r",
									"                })\r",
									"                if (index != -1) {\r",
									"                    body.environment.values[index].value = String(pm.environment.get(env_val));\r",
									"                } else {\r",
									"                    let vars = {key: '', value: ''};\r",
									"                    vars.key = String(env_val);\r",
									"                    vars.value = String(pm.environment.get(env_val));\r",
									"                    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                    body.environment.values.push(vars);\r",
									"                }\r",
									"            })\r",
									"\r",
									"            console.log(\"New Environment Variables: \" + JSON.stringify(body))\r",
									"\r",
									"            requestOptions = {\r",
									"                url: postman_api_url,\r",
									"                method: 'PUT',\r",
									"                header: headers,\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: body\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"            pm.sendRequest(requestOptions, (error, response) => {\r",
									"                if (error) {\r",
									"                    console.error(\"Error updating current environment: \" + error)\r",
									"                }\r",
									"            })\r",
									"        }\r",
									"    })\r",
									"}\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Pre-req ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "06b26fd0-b88a-4856-8d32-857760238aea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true,
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "{{password}}",
								"username": "{{username}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<booking>\r\n    <firstname>{{firstname}}</firstname>\r\n    <lastname>{{lastname}}</lastname>\r\n    <totalprice>{{totalprice}}</totalprice>\r\n    <depositpaid>{{depositpaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\r\n</booking>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{update_booking_xml_url}}/:id",
							"host": [
								"{{update_booking_xml_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"id": "16b6e13a-2c02-48cb-a9e6-d84f50fa0cdb",
									"key": "id",
									"value": "{{bookingid}}",
									"description": "Booking ID of booking record to update",
									"type": "string"
								}
							]
						},
						"description": "Sends an update booking request using XML format. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-UpdateBooking)."
					},
					"response": [
						{
							"id": "45694822-97a8-4509-aad4-e613f7df8d10",
							"name": "Update Booking - XML",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <firstname>{{firstname}}</firstname>\r\n    <lastname>{{lastname}}</lastname>\r\n    <totalprice>{{totalprice}}</totalprice>\r\n    <depositpaid>{{depositpaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{prod_url}}/booking/:id",
									"host": [
										"{{prod_url}}"
									],
									"path": [
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"description": "Booking ID of booking record to update"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "341"
								},
								{
									"key": "Etag",
									"value": "W/\"155-9qLwOBZl4NP7Tsk7NKpBfbhutlU\""
								},
								{
									"key": "Date",
									"value": "Tue, 01 Mar 2022 15:45:45 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "<?xml version='1.0'?>\n<booking>\n    <firstname>{{firstname}}</firstname>\n    <lastname>{{lastname}}</lastname>\n    <totalprice>{{totalprice}}</totalprice>\n    <depositpaid>{{depositpaid}}</depositpaid>\n    <bookingdates>\n        <checkin>{{checkin}}</checkin>\n        <checkout>{{checkout}}</checkout>\n    </bookingdates>\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\n</booking>"
						},
						{
							"id": "c3bb605f-9218-440d-86fe-28b401479a02",
							"name": "Update Booking - XML (Mock)",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <firstname>{{firstname}}</firstname>\r\n    <lastname>{{lastname}}</lastname>\r\n    <totalprice>{{totalprice}}</totalprice>\r\n    <depositpaid>{{depositpaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{mock_url}}/mock/xml/fullupdate/booking/:id",
									"host": [
										"{{mock_url}}"
									],
									"path": [
										"mock",
										"xml",
										"fullupdate",
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"description": "Booking ID of booking record to update"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "341"
								},
								{
									"key": "Etag",
									"value": "W/\"155-9qLwOBZl4NP7Tsk7NKpBfbhutlU\""
								},
								{
									"key": "Date",
									"value": "Tue, 01 Mar 2022 15:45:45 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "<?xml version='1.0'?>\n<booking>\n    <firstname>{{firstname}}</firstname>\n    <lastname>{{lastname}}</lastname>\n    <totalprice>{{totalprice}}</totalprice>\n    <depositpaid>{{depositpaid}}</depositpaid>\n    <bookingdates>\n        <checkin>{{checkin}}</checkin>\n        <checkout>{{checkout}}</checkout>\n    </bookingdates>\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\n</booking>"
						}
					]
				},
				{
					"name": "Partial Update Booking - XML",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e5f1e93-0599-4a5f-86f5-2fa7dfef53e5",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - XML: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//let jsonData = '';\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - XML: XML response data validation\", () => {\r",
									"    try {\r",
									"        /*\r",
									"        pm.expect(pm.response.text()).to.not.eql('');\r",
									"        jsonData = pm.response.json();\r",
									"        */\r",
									"        pm.response.to.be.ok;\r",
									"        pm.response.to.be.withBody;\r",
									"        \r",
									"        console.log(pm.response.text());\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"XML response data validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"//const cheerio = require('cheerio');\r",
									"const $ = cheerio.load(pm.response.text(), {\r",
									"    ignoreWhitespace: true,\r",
									"    xmlMode: true\r",
									"    });\r",
									"\r",
									"\r",
									"// Render XML\r",
									"console.log($.xml());\r",
									"\r",
									"// JSON schema validation\r",
									"var jsonData = xml2Json($.xml());\r",
									"\r",
									"console.log(\"xml2JSON: \" + JSON.stringify(jsonData));\r",
									"\r",
									"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKING_XML_SCHEMA\"));\r",
									"\r",
									"// XML -> JSON schema validation. Use this since there is no direct way to validate XML schema in postman\r",
									"pm.test(\"#TEST: Partial Update Booking - XML: XML to JSON response schema validation\", () => {\r",
									"    try {\r",
									"        //tv4.validate(jsonData, schema);\r",
									"        let Ajv = require('ajv');\r",
									"        ajv = new Ajv({logger: console, allErrors: true});\r",
									"        pm.expect(ajv.validate(schema, jsonData), JSON.stringify(ajv.errors)).to.be.true;\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"XML to JSON schema validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - XML: First Name validation\", function () {\r",
									"    try {\r",
									"        let firstname = $(\"firstname\");\r",
									"        console.log(\"firstname: \" + firstname.text());\r",
									"\r",
									"        pm.expect(firstname.text()).to.be.eql(pm.environment.get(\"firstname\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"First Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - XML: Last Name validation\", function () {\r",
									"    try {\r",
									"        let lastname = $(\"lastname\");\r",
									"        console.log(\"lastname: \" + lastname.text());\r",
									"\r",
									"        pm.expect(lastname.text()).to.be.eql(pm.environment.get(\"lastname\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Last Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - XML: Total Price validation\", function () {\r",
									"    try {\r",
									"        let totalprice = $(\"totalprice\");\r",
									"        console.log(\"totalprice: \" + totalprice.text());\r",
									"\r",
									"        pm.expect(totalprice.text()).to.be.eql(pm.environment.get(\"totalprice\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Total Price validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - XML: Deposit Paid validation\", function () {\r",
									"    const depositpaidVal = pm.environment.get(\"depositpaid\");\r",
									"    try {\r",
									"        //var boolVal = JSON.parse(depositpaidVal);\r",
									"        if (typeof(depositpaidVal) === \"boolean\") {\r",
									"            console.log(\"typeof(depositpaidVal) is boolean\")\r",
									"            var boolVal = depositpaidVal;\r",
									"        } else {\r",
									"            var boolVal = depositpaidVal === \"true\";\r",
									"        }\r",
									"        console.log(\"environment depositpaid: \" + depositpaidVal);\r",
									"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
									"  \r",
									"        let depositpaid = $(\"depositpaid\");\r",
									"        console.log(\"depositpaid: \" + depositpaid.text());\r",
									"\r",
									"        pm.expect(depositpaid.text()).to.be.eql(depositpaidVal);\r",
									"        //pm.expect(depositpaid.text()).to.be.eql(boolVal);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Deposit Paid validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - XML: Checkin validation\", function () {\r",
									"    try {\r",
									"        let checkin = $(\"checkin\");\r",
									"        console.log(\"checkin: \" + checkin.text());\r",
									"\r",
									"        pm.expect(checkin.text()).to.be.eql(pm.environment.get(\"checkin\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkin validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - XML: Checkout validation\", function () {\r",
									"    try {\r",
									"        let checkout = $(\"checkout\");\r",
									"        console.log(\"checkout: \" + checkout.text());\r",
									"\r",
									"        pm.expect(checkout.text()).to.be.eql(pm.environment.get(\"checkout\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkout validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - XML: Additional needs validation\", function () {\r",
									"    try {\r",
									"        let additionalneeds = $(\"additionalneeds\");\r",
									"        console.log(\"additionalneeds: \" + additionalneeds.text());\r",
									"\r",
									"        pm.expect(additionalneeds.text()).to.be.eql(pm.environment.get(\"additionalneeds\"));\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Additional needs validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"if (pm.iterationData.has(\"data_format\")) {\r",
									"    postman.setNextRequest(\"Get Booking IDs - JSON\");\r",
									"}\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2ba29eb5-80d9-4acf-9802-02d8efe546ad",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Pre-req ===`);\r",
									"\r",
									"// update only subset of variables for partial update\r",
									"pm.environment.set(\"totalprice\", pm.variables.replaceIn('{{$randomInt}}'));\r",
									"console.log(\"totalprice: \" + pm.environment.get(\"totalprice\"));\r",
									"var boolVal = pm.variables.replaceIn('{{$randomBoolean}}');\r",
									"console.log(\"boolVal: \" + boolVal);\r",
									"pm.environment.set(\"depositpaid\", boolVal );\r",
									"console.log(\"depositpaid: \" + pm.environment.get(\"depositpaid\"));\r",
									"pm.environment.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomNoun}}'));\r",
									"console.log(\"additionalneeds: \" + pm.environment.get(\"additionalneeds\"));\r",
									"\r",
									"const mock = String(pm.environment.get(\"mock\"));\r",
									"if (mock === \"true\") {\r",
									"/*\r",
									"    // Start persisting variables current values to initial values for mock data\r",
									"    let rawdata = {\r",
									"        environment: {\r",
									"            'values' : []\r",
									"        }\r",
									"    }\r",
									"\r",
									"    // Issue: https://github.com/rproman/Restful-Booker/issues/11#issue-1212135656\r",
									"    // Fix: 2022-04-22: Ensure key-value pair are using String data type\r",
									"    let vars = {key: '', value: ''};\r",
									"    vars.key = 'firstname';\r",
									"    vars.value = String(pm.environment.get(\"firstname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'lastname';\r",
									"    vars.value = String(pm.environment.get(\"lastname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'totalprice';\r",
									"    vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'depositpaid';\r",
									"    vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkin';\r",
									"    vars.value = String(pm.environment.get(\"checkin\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkout';\r",
									"    vars.value = String(pm.environment.get(\"checkout\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'additionalneeds';\r",
									"    vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    const requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'PUT',\r",
									"        header: headers,\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: rawdata\r",
									"        }\r",
									"    }\r",
									"\r",
									"    //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error)\r",
									"        }\r",
									"    })\r",
									"*/\r",
									"\r",
									"// 2022-04-26: Fix for https://github.com/rproman/Restful-Booker/issues/13\r",
									"// New implementation of persisting environment variables\r",
									"// to ensure values of other variables that will not be updated will be preserved\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    let requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'GET',\r",
									"        header: headers\r",
									"    }\r",
									"\r",
									"    // retrieve first the complete set of current environment data\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.error(\"Error retrieving current environment data: \" + error)\r",
									"        } else {\r",
									"            let body = response.json()\r",
									"\r",
									"            console.log(\"Current Environment: \" + JSON.stringify(body))\r",
									"\r",
									"/*\r",
									"            // start updating target environment variables\r",
									"            let index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"firstname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"firstname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'firstname';\r",
									"                vars.value = String(pm.environment.get(\"firstname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"lastname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"lastname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'lastname';\r",
									"                vars.value = String(pm.environment.get(\"lastname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"totalprice\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"totalprice\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'totalprice';\r",
									"                vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"depositpaid\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"depositpaid\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'depositpaid';\r",
									"                vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkin\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkin\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkin';\r",
									"                vars.value = String(pm.environment.get(\"checkin\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkout\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkout\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkout';\r",
									"                vars.value = String(pm.environment.get(\"checkout\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"additionalneeds\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"additionalneeds\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'additionalneeds';\r",
									"                vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"bookingid\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"bookingid\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'bookingid';\r",
									"                vars.value = String(pm.environment.get(\"bookingid\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"*/            \r",
									"// Ehancement fix for https://github.com/rproman/Restful-Booker/issues/15\r",
									"            const env_keys = [\r",
									"                'firstname', \r",
									"                'lastname', \r",
									"                'totalprice', \r",
									"                'depositpaid', \r",
									"                'checkin', \r",
									"                'checkout', \r",
									"                'additionalneeds', \r",
									"                'bookingid'];\r",
									"\r",
									"            // start updating target environment variables\r",
									"            env_keys.forEach((env_val) => {\r",
									"                let index = body.environment.values.findIndex((item) => {\r",
									"                    return (item.key === env_val)\r",
									"                })\r",
									"                if (index != -1) {\r",
									"                    body.environment.values[index].value = String(pm.environment.get(env_val));\r",
									"                } else {\r",
									"                    let vars = {key: '', value: ''};\r",
									"                    vars.key = String(env_val);\r",
									"                    vars.value = String(pm.environment.get(env_val));\r",
									"                    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                    body.environment.values.push(vars);\r",
									"                }\r",
									"            })\r",
									"\r",
									"            console.log(\"New Environment Variables: \" + JSON.stringify(body))\r",
									"\r",
									"            requestOptions = {\r",
									"                url: postman_api_url,\r",
									"                method: 'PUT',\r",
									"                header: headers,\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: body\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"            pm.sendRequest(requestOptions, (error, response) => {\r",
									"                if (error) {\r",
									"                    console.error(\"Error updating current environment: \" + error)\r",
									"                }\r",
									"            })\r",
									"        }\r",
									"    })\r",
									"}\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Pre-req ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "8033fe57-9222-4ec6-84f1-e36a0c8f0193",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true,
							"content-type": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token_key}}",
								"description": "Auth token returned from Auth request",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<booking>\r\n    <totalprice>{{totalprice}}</totalprice>\r\n    <depositpaid>{{depositpaid}}</depositpaid>\r\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\r\n</booking>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{partialupdate_booking_xml_url}}/:id",
							"host": [
								"{{partialupdate_booking_xml_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"id": "c6e0e9e7-084f-425d-b7a6-83aa6dd023e5",
									"key": "id",
									"value": "{{bookingid}}",
									"description": "Booking ID of booking record to update",
									"type": "string"
								}
							]
						},
						"description": "Sends a partial update booking request using XML format. The API documentation can be found in this [link](https://desktop.postman.com/?desktopVersion=9.14.0&userId=18313954&teamId=2804070)."
					},
					"response": [
						{
							"id": "0e548968-7897-429e-9224-0e8838499ec5",
							"name": "Partial Update Booking - XML",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token=abc123",
										"description": "Auth token returned from Auth request",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <totalprice>{{totalprice}}</totalprice>\r\n    <depositpaid>{{depositpaid}}</depositpaid>\r\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{prod_url}}/booking/:id",
									"host": [
										"{{prod_url}}"
									],
									"path": [
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"description": "Booking ID of booking record to update"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "346"
								},
								{
									"key": "Etag",
									"value": "W/\"15a-A2Jf11kK03yTI70tCnKMwVPiONI\""
								},
								{
									"key": "Date",
									"value": "Wed, 02 Mar 2022 13:38:01 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "<?xml version='1.0'?>\n<booking>\n    <firstname>{{firstname}}</firstname>\n    <lastname>{{lastname}}</lastname>\n    <totalprice>{{totalprice}}</totalprice>\n    <depositpaid>{{depositpaid}}</depositpaid>\n    <bookingdates>\n        <checkin>{{checkin}}</checkin>\n        <checkout>{{checkout}}</checkout>\n    </bookingdates>\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\n</booking>"
						},
						{
							"id": "3932061f-0d35-4dfd-8038-6a4154e29761",
							"name": "Partial Update Booking - XML (Mock)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token=abc123",
										"description": "Auth token returned from Auth request",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<booking>\r\n    <totalprice>{{totalprice}}</totalprice>\r\n    <depositpaid>{{depositpaid}}</depositpaid>\r\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\r\n</booking>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{mock_url}}/mock/xml/partialupdate/booking/:id",
									"host": [
										"{{mock_url}}"
									],
									"path": [
										"mock",
										"xml",
										"partialupdate",
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"description": "Booking ID of booking record to update"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "346"
								},
								{
									"key": "Etag",
									"value": "W/\"15a-A2Jf11kK03yTI70tCnKMwVPiONI\""
								},
								{
									"key": "Date",
									"value": "Wed, 02 Mar 2022 13:38:01 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "<?xml version='1.0'?>\n<booking>\n    <firstname>{{firstname}}</firstname>\n    <lastname>{{lastname}}</lastname>\n    <totalprice>{{totalprice}}</totalprice>\n    <depositpaid>{{depositpaid}}</depositpaid>\n    <bookingdates>\n        <checkin>{{checkin}}</checkin>\n        <checkout>{{checkout}}</checkout>\n    </bookingdates>\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\n</booking>"
						}
					]
				}
			],
			"_postman_id": "3142c975-5fb3-4c19-83e7-c0d450aa0af3"
		},
		{
			"name": "Tests using URL encoded format",
			"item": [
				{
					"name": "Create Booking - URL Encoded",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b7b62c57-0642-43d0-a373-ec714997a1bb",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Pre-req ===`);\r",
									"\r",
									"/*\r",
									"function formatDate(date) {\r",
									"    let yourDate = new Date(date);\r",
									"    yourDate.toISOString().split('T')[0];\r",
									"    const offset = yourDate.getTimezoneOffset();\r",
									"    yourDate = new Date(yourDate.getTime() - (offset*60000));\r",
									"    return yourDate.toISOString().split('T')[0];\r",
									"};\r",
									"*/\r",
									"\r",
									"/*\r",
									"let util = pm.collectionVariables.get(\"utilityclass\");\r",
									"console.log(\"Create Booking: \" + util );\r",
									"console.log(\"utililityclasss name: \" + util.constructor.name);\r",
									"*/\r",
									"\r",
									"// if this data variable exist, then a data file is in use\r",
									"if (pm.iterationData.has(\"data_format\")) {  \r",
									"    console.log(\"Using data file!\");\r",
									"    // New implementation using test data variables\r",
									"    pm.environment.set(\"firstname\", pm.iterationData.get(\"first_name\"));\r",
									"    console.log(\"firstname: \" + pm.environment.get(\"firstname\"));\r",
									"\r",
									"    pm.environment.set(\"lastname\", pm.iterationData.get(\"last_name\"));\r",
									"    console.log(\"lastname: \" + pm.environment.get(\"lastname\"));\r",
									"\r",
									"    pm.environment.set(\"totalprice\", pm.iterationData.get(\"total_price\"));\r",
									"    console.log(\"totalprice: \" + pm.environment.get(\"totalprice\"));\r",
									"\r",
									"    var boolVal = pm.iterationData.get(\"deposit_paid\");\r",
									"    console.log(\"boolVal: \" + boolVal);\r",
									"\r",
									"    pm.environment.set(\"depositpaid\", boolVal );\r",
									"    console.log(\"depositpaid: \" + pm.environment.get(\"depositpaid\"));\r",
									"\r",
									"    pm.environment.set(\"checkin\", pm.iterationData.get(\"check_in\"));\r",
									"    console.log(\"checkin: \" + pm.environment.get(\"checkin\"));\r",
									"\r",
									"    pm.environment.set(\"checkout\", pm.iterationData.get(\"check_out\"));\r",
									"    console.log(\"checkout: \" + pm.environment.get(\"checkout\"));\r",
									"\r",
									"    pm.environment.set(\"additionalneeds\", pm.iterationData.get(\"additional_needs\"));\r",
									"    console.log(\"additionalneeds: \" + pm.environment.get(\"additionalneeds\"));\r",
									"} else {\r",
									"    console.log(\"Using dynamic variables!\");\r",
									"    // Old implementation using Postman Dynamic Variables\r",
									"    pm.environment.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"    console.log(\"firstname: \" + pm.environment.get(\"firstname\"));\r",
									"\r",
									"    pm.environment.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"    console.log(\"lastname: \" + pm.environment.get(\"lastname\"));\r",
									"\r",
									"    pm.environment.set(\"totalprice\", pm.variables.replaceIn('{{$randomInt}}'));\r",
									"    console.log(\"totalprice: \" + pm.environment.get(\"totalprice\"));\r",
									"\r",
									"    var boolVal = pm.variables.replaceIn('{{$randomBoolean}}');\r",
									"    console.log(\"boolVal: \" + boolVal);\r",
									"\r",
									"    pm.environment.set(\"depositpaid\", boolVal );\r",
									"    console.log(\"depositpaid: \" + pm.environment.get(\"depositpaid\"));\r",
									"\r",
									"    pm.environment.set(\"checkin\", util.formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
									"    console.log(\"checkin: \" + pm.environment.get(\"checkin\"));\r",
									"\r",
									"    pm.environment.set(\"checkout\", util.formatDate(pm.variables.replaceIn('{{$randomDateFuture}}')));\r",
									"    console.log(\"checkout: \" + pm.environment.get(\"checkout\"));\r",
									"\r",
									"    pm.environment.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomNoun}}'));\r",
									"    console.log(\"additionalneeds: \" + pm.environment.get(\"additionalneeds\"));\r",
									"}\r",
									"\r",
									"const mock = String(pm.environment.get(\"mock\"));\r",
									"if (mock === \"true\") {\r",
									"/*\r",
									"    // Start persisting variables current values to initial values for mock data\r",
									"    let rawdata = {\r",
									"        environment: {\r",
									"            'values' : []\r",
									"        }\r",
									"    }\r",
									"\r",
									"    // Issue: https://github.com/rproman/Restful-Booker/issues/11#issue-1212135656\r",
									"    // Fix: 2022-04-22: Ensure key-value pair are using String data type\r",
									"    let vars = {key: '', value: ''};\r",
									"    vars.key = 'firstname';\r",
									"    vars.value = String(pm.environment.get(\"firstname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'lastname';\r",
									"    vars.value = String(pm.environment.get(\"lastname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'totalprice';\r",
									"    vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'depositpaid';\r",
									"    vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkin';\r",
									"    vars.value = String(pm.environment.get(\"checkin\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkout';\r",
									"    vars.value = String(pm.environment.get(\"checkout\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'additionalneeds';\r",
									"    vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    const requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'PUT',\r",
									"        header: headers,\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: rawdata\r",
									"        }\r",
									"    }\r",
									"\r",
									"    //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error)\r",
									"        }\r",
									"    })\r",
									"*/\r",
									"\r",
									"// 2022-04-26: Fix for https://github.com/rproman/Restful-Booker/issues/13\r",
									"// New implementation of persisting environment variables\r",
									"// to ensure values of other variables that will not be updated will be preserved\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    let requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'GET',\r",
									"        header: headers\r",
									"    }\r",
									"\r",
									"    // retrieve first the complete set of current environment data\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.error(\"Error retrieving current environment data: \" + error)\r",
									"        } else {\r",
									"            let body = response.json()\r",
									"\r",
									"            console.log(\"Current Environment: \" + JSON.stringify(body))\r",
									"/*\r",
									"            // start updating target environment variables\r",
									"            let index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"firstname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"firstname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'firstname';\r",
									"                vars.value = String(pm.environment.get(\"firstname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"lastname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"lastname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'lastname';\r",
									"                vars.value = String(pm.environment.get(\"lastname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"totalprice\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"totalprice\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'totalprice';\r",
									"                vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"depositpaid\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"depositpaid\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'depositpaid';\r",
									"                vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkin\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkin\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkin';\r",
									"                vars.value = String(pm.environment.get(\"checkin\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkout\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkout\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkout';\r",
									"                vars.value = String(pm.environment.get(\"checkout\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"additionalneeds\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"additionalneeds\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'additionalneeds';\r",
									"                vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"*/\r",
									"// Ehancement fix for https://github.com/rproman/Restful-Booker/issues/15\r",
									"            const env_keys = [\r",
									"                'firstname', \r",
									"                'lastname', \r",
									"                'totalprice', \r",
									"                'depositpaid', \r",
									"                'checkin', \r",
									"                'checkout', \r",
									"                'additionalneeds', \r",
									"                'bookingid'];\r",
									"\r",
									"            // start updating target environment variables\r",
									"            env_keys.forEach((env_val) => {\r",
									"                let index = body.environment.values.findIndex((item) => {\r",
									"                    return (item.key === env_val)\r",
									"                })\r",
									"                if (index != -1) {\r",
									"                    body.environment.values[index].value = String(pm.environment.get(env_val));\r",
									"                } else {\r",
									"                    let vars = {key: '', value: ''};\r",
									"                    vars.key = String(env_val);\r",
									"                    vars.value = String(pm.environment.get(env_val));\r",
									"                    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                    body.environment.values.push(vars);\r",
									"                }\r",
									"            })\r",
									"\r",
									"            console.log(\"New Environment Variables: \" + JSON.stringify(body))\r",
									"\r",
									"            requestOptions = {\r",
									"                url: postman_api_url,\r",
									"                method: 'PUT',\r",
									"                header: headers,\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: body\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"            pm.sendRequest(requestOptions, (error, response) => {\r",
									"                if (error) {\r",
									"                    console.error(\"Error updating current environment: \" + error)\r",
									"                }\r",
									"            })\r",
									"        }\r",
									"    })\r",
									"}\r",
									"\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Pre-req ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "385f4e19-fd9d-4d43-989a-1f29a4f5a5d6",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - URL Encoded: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - URL Encoded: response data validation\", () => {\r",
									"    try {\r",
									"        pm.response.to.be.ok;\r",
									"        pm.response.to.be.withBody;\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"URL Encoded response data validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"console.log(\"Create Booking URL Encoded Response Body: \" + pm.response.text());\r",
									"//console.log(\"Decoded URI Component: \" + decodeURIComponent(pm.response.text()));\r",
									"\r",
									"querystring = require(\"querystring\");\r",
									"let jsonData = querystring.parse(pm.response.text());\r",
									"console.log(jsonData);\r",
									"//console.log(JSON.stringify(params));\r",
									"\r",
									"\r",
									"// JSON schema validation\r",
									"const schema = JSON.parse(pm.collectionVariables.get(\"BOOKING_URLENCODED_SCHEMA\"));\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - URL Encoded: response schema validation\", () => {\r",
									"    try {\r",
									"        //tv4.validate(jsonData, schema);\r",
									"        let Ajv = require('ajv');\r",
									"        ajv = new Ajv({logger: console, allErrors: true});\r",
									"        pm.expect(ajv.validate(schema, jsonData), JSON.stringify(ajv.errors)).to.be.true;\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"URL Encoded to JSON schema validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - URL Encoded: Booking ID validation\", function () {\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"bookingid\");\r",
									"        pm.environment.set(\"bookingid\", jsonData.bookingid);\r",
									"        console.log(\"bookingid: \" + jsonData.bookingid);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Booking ID validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - URL Encoded: First Name validation\", function () {\r",
									"    const firstname = pm.environment.get(\"firstname\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"booking[firstname]\", firstname);\r",
									"        console.log(\"firstname: \" + jsonData[\"booking[firstname]\"]);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"First Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - URL Encoded: Last Name validation\", function () {\r",
									"    const lastname = pm.environment.get(\"lastname\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"booking[lastname]\", lastname);\r",
									"        console.log(\"lastname: \" + jsonData[\"booking[lastname]\"]);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Last Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - URL Encoded: Total Price validation\", function () {\r",
									"    const totalprice = pm.environment.get(\"totalprice\");\r",
									"    if (typeof(totalprice) === \"string\") {\r",
									"        console.log('typeof(totalprice) === \"string\"');\r",
									"    } else if (typeof(totalprice) === \"number\") {\r",
									"        console.log('typeof(totalprice) === \"number\"');\r",
									"\r",
									"    }\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"booking[totalprice]\", \"\" + totalprice);\r",
									"        console.log(\"totalprice: \" + jsonData[\"booking[totalprice]\"]);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Total Price validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - URL Encoded: Deposit Paid validation\", function () {\r",
									"    const depositpaid = pm.environment.get(\"depositpaid\");\r",
									"    try {\r",
									"        //var boolVal = JSON.parse(depositpaid);\r",
									"        if (typeof(depositpaid) === \"boolean\") {\r",
									"            console.log(`${pm.info.requestName}: typeof(depositpaid) is boolean` );\r",
									"            var boolVal = depositpaid;\r",
									"        } else {\r",
									"            var boolVal = depositpaid === \"true\";\r",
									"        }\r",
									"        console.log(\"environment depositpaid: \" + depositpaid)\r",
									"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
									"        pm.expect(jsonData).to.have.property(\"booking[depositpaid]\", \"\" + depositpaid);\r",
									"        console.log(\"depositpaid: \" + jsonData[\"booking[depositpaid]\"]);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Deposit Paid validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - URL Encoded: Additional Needs validation\", function () {\r",
									"    const additionalneeds = pm.environment.get(\"additionalneeds\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"booking[additionalneeds]\", additionalneeds);\r",
									"        console.log(\"additionalneeds: \" + jsonData[\"booking[additionalneeds]\"]);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Additional Needs validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - URL Encoded: Checkin Date validation\", function () {\r",
									"    const checkin = pm.environment.get(\"checkin\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"booking[bookingdates][checkin]\", checkin);\r",
									"        console.log(\"checkin: \" + jsonData[\"booking[bookingdates][checkin]\"]);\r",
									"        console.log(\"environment checkin: \" + checkin);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkin Date validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Create Booking - URL Encoded: Checkout Date validation\", function () {\r",
									"    const checkout = pm.environment.get(\"checkout\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"booking[bookingdates][checkout]\", checkout);\r",
									"        console.log(\"checkout: \" + jsonData[\"booking[bookingdates][checkout]\"]);\r",
									"        console.log(\"environment checkout: \" + checkout);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkout Date validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "67c03d89-48bb-4cb0-9216-264c72075238",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "firstname",
									"value": "{{firstname}}",
									"description": "First name",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "{{lastname}}",
									"description": "Last name",
									"type": "text"
								},
								{
									"key": "totalprice",
									"value": "{{totalprice}}",
									"description": "Total price of booking",
									"type": "text"
								},
								{
									"key": "depositpaid",
									"value": "{{depositpaid}}",
									"description": "Deposit paid (true | false)",
									"type": "text"
								},
								{
									"key": "bookingdates[checkin]",
									"value": "{{checkin}}",
									"description": "Check in date in YYYY-MM-DD string format",
									"type": "text"
								},
								{
									"key": "bookingdates[checkout]",
									"value": "{{checkout}}",
									"description": "Check out date in YYYY-MM-DD string format",
									"type": "text"
								},
								{
									"key": "additionalneeds",
									"value": "{{additionalneeds}}",
									"description": "Additional needs",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": "{{create_booking_urlencoded_url}}",
						"description": "Sends a create booking request using URL encoded format. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-CreateBooking)."
					},
					"response": [
						{
							"id": "8871d9fd-250d-4437-ae93-0a74408aecdd",
							"name": "Create Booking - URL Encoded",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{firstname}}",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "{{lastname}}",
											"type": "text"
										},
										{
											"key": "totalprice",
											"value": "{{totalprice}}",
											"type": "text"
										},
										{
											"key": "depositpaid",
											"value": "{{depositpaid}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkin}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkout}}",
											"type": "text"
										},
										{
											"key": "additionalneeds",
											"value": "{{additionalneeds}}",
											"type": "text"
										}
									]
								},
								"url": "{{prod_url}}/booking"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "268"
								},
								{
									"key": "Etag",
									"value": "W/\"10c-w4quAaVzb99XmfESv+fmP22mLkw\""
								},
								{
									"key": "Date",
									"value": "Tue, 08 Feb 2022 18:27:47 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "bookingid={{$randomInt}}&booking%5Bfirstname%5D={{firstname}}&booking%5Blastname%5D={{lastname}}&booking%5Btotalprice%5D={{totalprice}}&booking%5Bdepositpaid%5D={{depositpaid}}&booking%5Bbookingdates%5D%5Bcheckin%5D={{checkin}}&booking%5Bbookingdates%5D%5Bcheckout%5D={{checkout}}&booking%5Badditionalneeds%5D={{additionalneeds}}"
						},
						{
							"id": "9f961b3f-6235-4ac2-bece-e465abb3d05d",
							"name": "Create Booking - URL Encoded (Mock)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{firstname}}",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "{{lastname}}",
											"type": "text"
										},
										{
											"key": "totalprice",
											"value": "{{totalprice}}",
											"type": "text"
										},
										{
											"key": "depositpaid",
											"value": "{{depositpaid}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkin}}",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkout}}",
											"type": "text"
										},
										{
											"key": "additionalneeds",
											"value": "{{additionalneeds}}",
											"type": "text"
										}
									]
								},
								"url": "{{mock_url}}/mock/urlencoded/booking"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "268"
								},
								{
									"key": "Etag",
									"value": "W/\"10c-w4quAaVzb99XmfESv+fmP22mLkw\""
								},
								{
									"key": "Date",
									"value": "Tue, 08 Feb 2022 18:27:47 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "bookingid={{$randomInt}}&booking%5Bfirstname%5D={{firstname}}&booking%5Blastname%5D={{lastname}}&booking%5Btotalprice%5D={{totalprice}}&booking%5Bdepositpaid%5D={{depositpaid}}&booking%5Bbookingdates%5D%5Bcheckin%5D={{checkin}}&booking%5Bbookingdates%5D%5Bcheckout%5D={{checkout}}&booking%5Badditionalneeds%5D={{additionalneeds}}"
						}
					]
				},
				{
					"name": "Update Booking - URL Encoded",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b7b62c57-0642-43d0-a373-ec714997a1bb",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Pre-req ===`);\r",
									"\r",
									"pm.environment.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"console.log(\"firstname: \" + pm.environment.get(\"firstname\"));\r",
									"\r",
									"pm.environment.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"console.log(\"lastname: \" + pm.environment.get(\"lastname\"));\r",
									"\r",
									"pm.environment.set(\"totalprice\", pm.variables.replaceIn('{{$randomInt}}'));\r",
									"console.log(\"totalprice: \" + pm.environment.get(\"totalprice\"));\r",
									"\r",
									"var boolVal = pm.variables.replaceIn('{{$randomBoolean}}');\r",
									"console.log(\"boolVal: \" + boolVal);\r",
									"\r",
									"pm.environment.set(\"depositpaid\", boolVal );\r",
									"console.log(\"depositpaid: \" + pm.environment.get(\"depositpaid\"));\r",
									"\r",
									"/*\r",
									"pm.environment.set(\"checkin\", pm.variables.replaceIn('{{$randomDatePast}}'));\r",
									"console.log(\"checkin: \" + pm.environment.get(\"checkin\"));\r",
									"*/\r",
									"/*\r",
									"pm.environment.set(\"checkin\", formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
									"*/\r",
									"pm.environment.set(\"checkin\", util.formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
									"console.log(\"checkin: \" + pm.environment.get(\"checkin\"));\r",
									"\r",
									"\r",
									"pm.environment.set(\"checkout\", util.formatDate(pm.variables.replaceIn('{{$randomDateFuture}}')));\r",
									"console.log(\"checkout: \" + pm.environment.get(\"checkout\"));\r",
									"\r",
									"pm.environment.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomNoun}}'));\r",
									"console.log(\"additionalneeds: \" + pm.environment.get(\"additionalneeds\"));\r",
									"\r",
									"const mock = String(pm.environment.get(\"mock\"));\r",
									"if (mock === \"true\") {\r",
									"/*\r",
									"    // Start persisting variables current values to initial values for mock data\r",
									"    let rawdata = {\r",
									"        environment: {\r",
									"            'values' : []\r",
									"        }\r",
									"    }\r",
									"\r",
									"    // Issue: https://github.com/rproman/Restful-Booker/issues/11#issue-1212135656\r",
									"    // Fix: 2022-04-22: Ensure key-value pair are using String data type\r",
									"    let vars = {key: '', value: ''};\r",
									"    vars.key = 'firstname';\r",
									"    vars.value = String(pm.environment.get(\"firstname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'lastname';\r",
									"    vars.value = String(pm.environment.get(\"lastname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'totalprice';\r",
									"    vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'depositpaid';\r",
									"    vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkin';\r",
									"    vars.value = String(pm.environment.get(\"checkin\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkout';\r",
									"    vars.value = String(pm.environment.get(\"checkout\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'additionalneeds';\r",
									"    vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    const requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'PUT',\r",
									"        header: headers,\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: rawdata\r",
									"        }\r",
									"    }\r",
									"\r",
									"    //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error)\r",
									"        }\r",
									"    })\r",
									"*/\r",
									"\r",
									"// 2022-04-26: Fix for https://github.com/rproman/Restful-Booker/issues/13\r",
									"// New implementation of persisting environment variables\r",
									"// to ensure values of other variables that will not be updated will be preserved\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    let requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'GET',\r",
									"        header: headers\r",
									"    }\r",
									"\r",
									"    // retrieve first the complete set of current environment data\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.error(\"Error retrieving current environment data: \" + error)\r",
									"        } else {\r",
									"            let body = response.json()\r",
									"\r",
									"            console.log(\"Current Environment: \" + JSON.stringify(body))\r",
									"/*\r",
									"            // start updating target environment variables\r",
									"            let index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"firstname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"firstname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'firstname';\r",
									"                vars.value = String(pm.environment.get(\"firstname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"lastname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"lastname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'lastname';\r",
									"                vars.value = String(pm.environment.get(\"lastname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"totalprice\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"totalprice\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'totalprice';\r",
									"                vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"depositpaid\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"depositpaid\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'depositpaid';\r",
									"                vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkin\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkin\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkin';\r",
									"                vars.value = String(pm.environment.get(\"checkin\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkout\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkout\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkout';\r",
									"                vars.value = String(pm.environment.get(\"checkout\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"additionalneeds\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"additionalneeds\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'additionalneeds';\r",
									"                vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									" \r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"bookingid\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"bookingid\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'bookingid';\r",
									"                vars.value = String(pm.environment.get(\"bookingid\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"*/            \r",
									"// Ehancement fix for https://github.com/rproman/Restful-Booker/issues/15\r",
									"            const env_keys = [\r",
									"                'firstname', \r",
									"                'lastname', \r",
									"                'totalprice', \r",
									"                'depositpaid', \r",
									"                'checkin', \r",
									"                'checkout', \r",
									"                'additionalneeds', \r",
									"                'bookingid'];\r",
									"\r",
									"            // start updating target environment variables\r",
									"            env_keys.forEach((env_val) => {\r",
									"                let index = body.environment.values.findIndex((item) => {\r",
									"                    return (item.key === env_val)\r",
									"                })\r",
									"                if (index != -1) {\r",
									"                    body.environment.values[index].value = String(pm.environment.get(env_val));\r",
									"                } else {\r",
									"                    let vars = {key: '', value: ''};\r",
									"                    vars.key = String(env_val);\r",
									"                    vars.value = String(pm.environment.get(env_val));\r",
									"                    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                    body.environment.values.push(vars);\r",
									"                }\r",
									"            })\r",
									"\r",
									"           console.log(\"New Environment Variables: \" + JSON.stringify(body))\r",
									"\r",
									"            requestOptions = {\r",
									"                url: postman_api_url,\r",
									"                method: 'PUT',\r",
									"                header: headers,\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: body\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"            pm.sendRequest(requestOptions, (error, response) => {\r",
									"                if (error) {\r",
									"                    console.error(\"Error updating current environment: \" + error)\r",
									"                }\r",
									"            })\r",
									"        }\r",
									"    })\r",
									"}\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Pre-req ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "385f4e19-fd9d-4d43-989a-1f29a4f5a5d6",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - URL Encoded: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - URL Encoded: response data validation\", () => {\r",
									"    try {\r",
									"        pm.response.to.be.ok;\r",
									"        pm.response.to.be.withBody;\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"URL Encoded response data validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"console.log(\"Update Booking URL Encoded Response Body: \" + pm.response.text());\r",
									"//console.log(\"Decoded URI Component: \" + decodeURIComponent(pm.response.text()));\r",
									"\r",
									"querystring = require(\"querystring\");\r",
									"let jsonData = querystring.parse(pm.response.text());\r",
									"console.log(jsonData);\r",
									"//console.log(JSON.stringify(params));\r",
									"\r",
									"\r",
									"// JSON schema validation\r",
									"const schema = JSON.parse(pm.collectionVariables.get(\"UPDATE_BOOKING_URLENCODED_SCHEMA\"));\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - URL Encoded: response schema validation\", () => {\r",
									"    try {\r",
									"        //tv4.validate(jsonData, schema);\r",
									"        let Ajv = require('ajv');\r",
									"        ajv = new Ajv({logger: console, allErrors: true});\r",
									"        pm.expect(ajv.validate(schema, jsonData), JSON.stringify(ajv.errors)).to.be.true;\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"URL Encoded to JSON schema validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - URL Encoded: First Name validation\", function () {\r",
									"    const firstname = pm.environment.get(\"firstname\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"firstname\", firstname);\r",
									"        console.log(\"firstname: \" + jsonData[\"firstname\"]);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"First Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - URL Encoded: Last Name validation\", function () {\r",
									"    const lastname = pm.environment.get(\"lastname\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"lastname\", lastname);\r",
									"        console.log(\"lastname: \" + jsonData[\"lastname\"]);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Last Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - URL Encoded: Total Price validation\", function () {\r",
									"    const totalprice = pm.environment.get(\"totalprice\");\r",
									"    if (typeof(totalprice) === \"string\") {\r",
									"        console.log('typeof(totalprice) === \"string\"');\r",
									"    } else if (typeof(totalprice) === \"number\") {\r",
									"        console.log('typeof(totalprice) === \"number\"');\r",
									"\r",
									"    }\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"totalprice\", totalprice);\r",
									"        console.log(\"totalprice: \" + jsonData[\"totalprice\"]);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Total Price validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - URL Encoded: Deposit Paid validation\", function () {\r",
									"    const depositpaid = pm.environment.get(\"depositpaid\");\r",
									"    try {\r",
									"        //var boolVal = JSON.parse(depositpaid);\r",
									"        if (typeof(depositpaid) === \"boolean\") {\r",
									"            console.log(`${pm.info.requestName}: typeof(depositpaid) is boolean` );\r",
									"            var boolVal = depositpaid;\r",
									"        } else {\r",
									"            var boolVal = depositpaid === \"true\";\r",
									"        }\r",
									"        console.log(\"environment depositpaid: \" + depositpaid)\r",
									"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
									"        pm.expect(jsonData).to.have.property(\"depositpaid\", depositpaid);\r",
									"        console.log(\"depositpaid: \" + jsonData[\"depositpaid\"]);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Deposit Paid validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - URL Encoded: Additional Needs validation\", function () {\r",
									"    const additionalneeds = pm.environment.get(\"additionalneeds\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"additionalneeds\", additionalneeds);\r",
									"        console.log(\"additionalneeds: \" + jsonData[\"additionalneeds\"]);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Additional Needs validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - URL Encoded: Checkin Date validation\", function () {\r",
									"    const checkin = pm.environment.get(\"checkin\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"bookingdates[checkin]\", checkin);\r",
									"        console.log(\"checkin: \" + jsonData[\"bookingdates[checkin]\"]);\r",
									"        console.log(\"environment checkin: \" + checkin);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkin Date validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Update Booking - URL Encoded: Checkout Date validation\", function () {\r",
									"    const checkout = pm.environment.get(\"checkout\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"bookingdates[checkout]\", checkout);\r",
									"        console.log(\"checkout: \" + jsonData[\"bookingdates[checkout]\"]);\r",
									"        console.log(\"environment checkout: \" + checkout);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkout Date validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "9bb8e1aa-ddd3-4794-8652-f70c3f7d06ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token_key}}",
								"description": "Auth token returned from the Auth request",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "firstname",
									"value": "{{firstname}}",
									"description": "First name",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "{{lastname}}",
									"description": "Last name",
									"type": "text"
								},
								{
									"key": "totalprice",
									"value": "{{totalprice}}",
									"description": "Total price of booking",
									"type": "text"
								},
								{
									"key": "depositpaid",
									"value": "{{depositpaid}}",
									"description": "Deposit paid (true | false)",
									"type": "text"
								},
								{
									"key": "bookingdates[checkin]",
									"value": "{{checkin}}",
									"description": "Check in date in YYYY-MM-DD string format",
									"type": "text"
								},
								{
									"key": "bookingdates[checkout]",
									"value": "{{checkout}}",
									"description": "Check out date in YYYY-MM-DD string format",
									"type": "text"
								},
								{
									"key": "additionalneeds",
									"value": "{{additionalneeds}}",
									"description": "Additional needs",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{update_booking_urlencoded_url}}/:id",
							"host": [
								"{{update_booking_urlencoded_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"id": "bf49746e-9780-4bde-bb86-1dc3c89442d5",
									"key": "id",
									"value": "{{bookingid}}",
									"description": "Booking ID of the booking record to update",
									"type": "string"
								}
							]
						},
						"description": "Sends an update booking request using URL encoded format. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-UpdateBooking)."
					},
					"response": [
						{
							"id": "bf494211-a876-41aa-9446-04de5b5a280f",
							"name": "Update Booking - URL Encoded",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token=abc123",
										"description": "Auth token returned from the Auth request",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{firstname}}",
											"description": "First name",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "{{lastname}}",
											"description": "Last name",
											"type": "text"
										},
										{
											"key": "totalprice",
											"value": "{{totalprice}}",
											"description": "Total price of booking",
											"type": "text"
										},
										{
											"key": "depositpaid",
											"value": "{{depositpaid}}",
											"description": "Deposit paid (true | false)",
											"type": "text"
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkin}}",
											"description": "Check in date in YYYY-MM-DD string format",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkout}}",
											"description": "Check out date in YYYY-MM-DD string format",
											"type": "text"
										},
										{
											"key": "additionalneeds",
											"value": "{{additionalneeds}}",
											"description": "Additional needs",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{prod_url}}/booking/:id",
									"host": [
										"{{prod_url}}"
									],
									"path": [
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"description": "Booking ID of the booking record to update"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "164"
								},
								{
									"key": "Etag",
									"value": "W/\"a4-qKIk7Eb2JRUuyZz7bPt/q6OeZJU\""
								},
								{
									"key": "Date",
									"value": "Tue, 01 Mar 2022 16:38:14 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "firstname={{firstname}}&lastname={{lastname}}&totalprice={{totalprice}}&depositpaid={{depositpaid}}&bookingdates%5Bcheckin%5D={{checkin}}&bookingdates%5Bcheckout%5D={{checkout}}&additionalneeds={{additionalneeds}}"
						},
						{
							"id": "c7f574f2-79f8-43a9-94f1-bbd78a09856c",
							"name": "Update Booking - URL Encoded (Mock)",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token=abc123",
										"description": "Auth token returned from the Auth request",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{firstname}}",
											"description": "First name",
											"type": "text"
										},
										{
											"key": "lastname",
											"value": "{{lastname}}",
											"description": "Last name",
											"type": "text"
										},
										{
											"key": "totalprice",
											"value": "{{totalprice}}",
											"description": "Total price of booking",
											"type": "text"
										},
										{
											"key": "depositpaid",
											"value": "{{depositpaid}}",
											"description": "Deposit paid (true | false)",
											"type": "text"
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkin}}",
											"description": "Check in date in YYYY-MM-DD string format",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkout}}",
											"description": "Check out date in YYYY-MM-DD string format",
											"type": "text"
										},
										{
											"key": "additionalneeds",
											"value": "{{additionalneeds}}",
											"description": "Additional needs",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{mock_url}}/mock/urlencoded/fullupdate/booking/:id",
									"host": [
										"{{mock_url}}"
									],
									"path": [
										"mock",
										"urlencoded",
										"fullupdate",
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"description": "Booking ID of the booking record to update"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "164"
								},
								{
									"key": "Etag",
									"value": "W/\"a4-qKIk7Eb2JRUuyZz7bPt/q6OeZJU\""
								},
								{
									"key": "Date",
									"value": "Tue, 01 Mar 2022 16:38:14 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "firstname={{firstname}}&lastname={{lastname}}&totalprice={{totalprice}}&depositpaid={{depositpaid}}&bookingdates%5Bcheckin%5D={{checkin}}&bookingdates%5Bcheckout%5D={{checkout}}&additionalneeds={{additionalneeds}}"
						}
					]
				},
				{
					"name": "Partial Update Booking - URL Encoded",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b7b62c57-0642-43d0-a373-ec714997a1bb",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Pre-req ===`);\r",
									"\r",
									"// update only subset of variables for partial update\r",
									"pm.environment.set(\"checkin\", util.formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
									"console.log(\"checkin: \" + pm.environment.get(\"checkin\"));\r",
									"pm.environment.set(\"checkout\", util.formatDate(pm.variables.replaceIn('{{$randomDateFuture}}')));\r",
									"console.log(\"checkout: \" + pm.environment.get(\"checkout\"));\r",
									"\r",
									"const mock = String(pm.environment.get(\"mock\"));\r",
									"if (mock === \"true\") {\r",
									"/*\r",
									"    // Start persisting variables current values to initial values for mock data\r",
									"    let rawdata = {\r",
									"        environment: {\r",
									"            'values' : []\r",
									"        }\r",
									"    }\r",
									"\r",
									"    // Issue: https://github.com/rproman/Restful-Booker/issues/11#issue-1212135656\r",
									"    // Fix: 2022-04-22: Ensure key-value pair are using String data type\r",
									"    let vars = {key: '', value: ''};\r",
									"    vars.key = 'firstname';\r",
									"    vars.value = String(pm.environment.get(\"firstname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'lastname';\r",
									"    vars.value = String(pm.environment.get(\"lastname\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'totalprice';\r",
									"    vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'depositpaid';\r",
									"    vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkin';\r",
									"    vars.value = String(pm.environment.get(\"checkin\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'checkout';\r",
									"    vars.value = String(pm.environment.get(\"checkout\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    vars = {key: '', value: ''};\r",
									"    vars.key = 'additionalneeds';\r",
									"    vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"    rawdata.environment.values.push(vars);\r",
									"\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    const requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'PUT',\r",
									"        header: headers,\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: rawdata\r",
									"        }\r",
									"    }\r",
									"\r",
									"    //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error)\r",
									"        }\r",
									"    })\r",
									"*/\r",
									"\r",
									"// 2022-04-26: Fix for https://github.com/rproman/Restful-Booker/issues/13\r",
									"// New implementation of persisting environment variables\r",
									"// to ensure values of other variables that will not be updated will be preserved\r",
									"    let headers = {'X-Api-Key' : ''};\r",
									"    headers[`X-Api-Key`] = String(pm.variables.get(\"postman_api_key\"));\r",
									"\r",
									"    // Note: Update the environment UID if no longer sync\r",
									"    const postman_api_url = \"https://api.getpostman.com/environments/\" + pm.environment.get(\"uid\");\r",
									"\r",
									"    let requestOptions = {\r",
									"        url: postman_api_url,\r",
									"        method: 'GET',\r",
									"        header: headers\r",
									"    }\r",
									"\r",
									"    // retrieve first the complete set of current environment data\r",
									"    pm.sendRequest(requestOptions, (error, response) => {\r",
									"        if (error) {\r",
									"            console.error(\"Error retrieving current environment data: \" + error)\r",
									"        } else {\r",
									"            let body = response.json()\r",
									"\r",
									"            console.log(\"Current Environment: \" + JSON.stringify(body))\r",
									"/*\r",
									"            // start updating target environment variables\r",
									"            let index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"firstname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"firstname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'firstname';\r",
									"                vars.value = String(pm.environment.get(\"firstname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"lastname\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"lastname\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'lastname';\r",
									"                vars.value = String(pm.environment.get(\"lastname\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"totalprice\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"totalprice\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'totalprice';\r",
									"                vars.value = String(pm.environment.get(\"totalprice\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"depositpaid\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"depositpaid\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'depositpaid';\r",
									"                vars.value = String(pm.environment.get(\"depositpaid\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkin\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkin\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkin';\r",
									"                vars.value = String(pm.environment.get(\"checkin\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"checkout\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"checkout\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'checkout';\r",
									"                vars.value = String(pm.environment.get(\"checkout\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"additionalneeds\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"additionalneeds\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'additionalneeds';\r",
									"                vars.value = String(pm.environment.get(\"additionalneeds\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"\r",
									" \r",
									"            index = body.environment.values.findIndex((item) => {\r",
									"                return (item.key === \"bookingid\")\r",
									"            })\r",
									"            if (index != -1) {\r",
									"                body.environment.values[index].value = String(pm.environment.get(\"bookingid\"));\r",
									"            } else {\r",
									"                let vars = {key: '', value: ''};\r",
									"                vars.key = 'bookingid';\r",
									"                vars.value = String(pm.environment.get(\"bookingid\"));\r",
									"                console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                body.environment.values.push(vars);\r",
									"            }\r",
									"*/            \r",
									"// Ehancement fix for https://github.com/rproman/Restful-Booker/issues/15\r",
									"            const env_keys = [\r",
									"                'firstname', \r",
									"                'lastname', \r",
									"                'totalprice', \r",
									"                'depositpaid', \r",
									"                'checkin', \r",
									"                'checkout', \r",
									"                'additionalneeds', \r",
									"                'bookingid'];\r",
									"\r",
									"            // start updating target environment variables\r",
									"            env_keys.forEach((env_val) => {\r",
									"                let index = body.environment.values.findIndex((item) => {\r",
									"                    return (item.key === env_val)\r",
									"                })\r",
									"                if (index != -1) {\r",
									"                    body.environment.values[index].value = String(pm.environment.get(env_val));\r",
									"                } else {\r",
									"                    let vars = {key: '', value: ''};\r",
									"                    vars.key = String(env_val);\r",
									"                    vars.value = String(pm.environment.get(env_val));\r",
									"                    console.log(\"vars: \" + JSON.stringify(vars));\r",
									"                    body.environment.values.push(vars);\r",
									"                }\r",
									"            })\r",
									"\r",
									"           console.log(\"New Environment Variables: \" + JSON.stringify(body))\r",
									"\r",
									"            requestOptions = {\r",
									"                url: postman_api_url,\r",
									"                method: 'PUT',\r",
									"                header: headers,\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: body\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //console.log(\"JSON.stringify(): \" + JSON.stringify(requestOptions));\r",
									"            pm.sendRequest(requestOptions, (error, response) => {\r",
									"                if (error) {\r",
									"                    console.error(\"Error updating current environment: \" + error)\r",
									"                }\r",
									"            })\r",
									"        }\r",
									"    })\r",
									"}\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Pre-req ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "385f4e19-fd9d-4d43-989a-1f29a4f5a5d6",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - URL Encoded: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - URL Encoded: response data validation\", () => {\r",
									"    try {\r",
									"        pm.response.to.be.ok;\r",
									"        pm.response.to.be.withBody;\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"URL Encoded response data validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"console.log(\"Partial Update Booking URL Encoded Response Body: \" + pm.response.text());\r",
									"//console.log(\"Decoded URI Component: \" + decodeURIComponent(pm.response.text()));\r",
									"\r",
									"querystring = require(\"querystring\");\r",
									"let jsonData = querystring.parse(pm.response.text());\r",
									"console.log(jsonData);\r",
									"//console.log(JSON.stringify(params));\r",
									"\r",
									"\r",
									"// JSON schema validation\r",
									"const schema = JSON.parse(pm.collectionVariables.get(\"UPDATE_BOOKING_URLENCODED_SCHEMA\"));\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - URL Encoded: response schema validation\", () => {\r",
									"    try {\r",
									"        //tv4.validate(jsonData, schema);\r",
									"        let Ajv = require('ajv');\r",
									"        ajv = new Ajv({logger: console, allErrors: true});\r",
									"        pm.expect(ajv.validate(schema, jsonData), JSON.stringify(ajv.errors)).to.be.true;\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"URL Encoded to JSON schema validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - URL Encoded: First Name validation\", function () {\r",
									"    const firstname = pm.environment.get(\"firstname\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"firstname\", firstname);\r",
									"        console.log(\"firstname: \" + jsonData[\"firstname\"]);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"First Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - URL Encoded: Last Name validation\", function () {\r",
									"    const lastname = pm.environment.get(\"lastname\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"lastname\", lastname);\r",
									"        console.log(\"lastname: \" + jsonData[\"lastname\"]);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Last Name validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - URL Encoded: Total Price validation\", function () {\r",
									"    const totalprice = pm.environment.get(\"totalprice\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"totalprice\", totalprice);\r",
									"        console.log(\"totalprice: \" + jsonData[\"totalprice\"]);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Total Price validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - URL Encoded: Deposit Paid validation\", function () {\r",
									"    const depositpaid = pm.environment.get(\"depositpaid\");\r",
									"    try {\r",
									"        //var boolVal = JSON.parse(depositpaid);\r",
									"        if (typeof(depositpaid) === \"boolean\") {\r",
									"            console.log(`${pm.info.requestName}: typeof(depositpaid) is boolean` );\r",
									"            var boolVal = depositpaid;\r",
									"        } else {\r",
									"            var boolVal = depositpaid === \"true\";\r",
									"        }\r",
									"        console.log(\"environment depositpaid: \" + depositpaid)\r",
									"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
									"        pm.expect(jsonData).to.have.property(\"depositpaid\", depositpaid);\r",
									"        console.log(\"depositpaid: \" + jsonData[\"depositpaid\"]);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Deposit Paid validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - URL Encoded: Additional Needs validation\", function () {\r",
									"    const additionalneeds = pm.environment.get(\"additionalneeds\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"additionalneeds\", additionalneeds);\r",
									"        console.log(\"additionalneeds: \" + jsonData[\"additionalneeds\"]);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Additional Needs validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - URL Encoded: Checkin Date validation\", function () {\r",
									"    const checkin = pm.environment.get(\"checkin\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"bookingdates[checkin]\", checkin);\r",
									"        console.log(\"checkin: \" + jsonData[\"bookingdates[checkin]\"]);\r",
									"        console.log(\"environment checkin: \" + checkin);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkin Date validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Partial Update Booking - URL Encoded: Checkout Date validation\", function () {\r",
									"    const checkout = pm.environment.get(\"checkout\");\r",
									"    try {\r",
									"        pm.expect(jsonData).to.have.property(\"bookingdates[checkout]\", checkout);\r",
									"        console.log(\"checkout: \" + jsonData[\"bookingdates[checkout]\"]);\r",
									"        console.log(\"environment checkout: \" + checkout);\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"Checkout Date validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"if (pm.iterationData.has(\"data_format\")) {\r",
									"    postman.setNextRequest(\"Get Booking IDs - JSON\");\r",
									"}\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "bd6f7208-483f-4cdc-a564-7bf292a06cb1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "{{password}}",
								"username": "{{username}}"
							}
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "firstname",
									"value": "{{firstname}}",
									"description": "First name",
									"type": "text",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "{{lastname}}",
									"description": "Last name",
									"type": "text",
									"disabled": true
								},
								{
									"key": "totalprice",
									"value": "{{totalprice}}",
									"description": "Total price of booking",
									"type": "text",
									"disabled": true
								},
								{
									"key": "depositpaid",
									"value": "{{depositpaid}}",
									"description": "Deposit paid (true | false)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "bookingdates[checkin]",
									"value": "{{checkin}}",
									"description": "Check in date in YYYY-MM-DD string format",
									"type": "text"
								},
								{
									"key": "bookingdates[checkout]",
									"value": "{{checkout}}",
									"description": "Check out date in YYYY-MM-DD string format",
									"type": "text"
								},
								{
									"key": "additionalneeds",
									"value": "{{additionalneeds}}",
									"description": "Additional needs",
									"type": "text",
									"disabled": true
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{partialupdate_booking_urlencoded_url}}/:id",
							"host": [
								"{{partialupdate_booking_urlencoded_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"id": "14382d8e-78df-4776-85b9-30f208dddae8",
									"key": "id",
									"value": "{{bookingid}}",
									"description": "Booking ID of the booking record to update",
									"type": "string"
								}
							]
						},
						"description": "Sends a partial update booking request using URL-encoded format. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-PartialUpdateBooking)."
					},
					"response": [
						{
							"id": "88f59b3a-4338-452f-93f4-dd1489b7af62",
							"name": "Partial Update Booking - URL Encoded",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{firstname}}",
											"description": "First name",
											"type": "text",
											"disabled": true
										},
										{
											"key": "lastname",
											"value": "{{lastname}}",
											"description": "Last name",
											"type": "text",
											"disabled": true
										},
										{
											"key": "totalprice",
											"value": "{{totalprice}}",
											"description": "Total price of booking",
											"type": "text",
											"disabled": true
										},
										{
											"key": "depositpaid",
											"value": "{{depositpaid}}",
											"description": "Deposit paid (true | false)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkin}}",
											"description": "Check in date in YYYY-MM-DD string format",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkout}}",
											"description": "Check out date in YYYY-MM-DD string format",
											"type": "text"
										},
										{
											"key": "additionalneeds",
											"value": "{{additionalneeds}}",
											"description": "Additional needs",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{prod_url}}/booking/:id",
									"host": [
										"{{prod_url}}"
									],
									"path": [
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"description": "Booking ID of the booking record to update"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "165"
								},
								{
									"key": "Etag",
									"value": "W/\"a5-fFRumevE4PtRZcLNLRQ0PnRzW6w\""
								},
								{
									"key": "Date",
									"value": "Wed, 02 Mar 2022 13:58:21 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "firstname={{firstname}}&lastname={{lastname}}&totalprice={{totalprice}}&depositpaid={{depositpaid}}&bookingdates%5Bcheckin%5D={{checkin}}&bookingdates%5Bcheckout%5D={{checkout}}&additionalneeds={{additionalneeds}}"
						},
						{
							"id": "b20372e9-4a68-4f37-ad81-28388269407a",
							"name": "Partial Update Booking - URL Encoded (Mock)",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "firstname",
											"value": "{{firstname}}",
											"description": "First name",
											"type": "text",
											"disabled": true
										},
										{
											"key": "lastname",
											"value": "{{lastname}}",
											"description": "Last name",
											"type": "text",
											"disabled": true
										},
										{
											"key": "totalprice",
											"value": "{{totalprice}}",
											"description": "Total price of booking",
											"type": "text",
											"disabled": true
										},
										{
											"key": "depositpaid",
											"value": "{{depositpaid}}",
											"description": "Deposit paid (true | false)",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bookingdates[checkin]",
											"value": "{{checkin}}",
											"description": "Check in date in YYYY-MM-DD string format",
											"type": "text"
										},
										{
											"key": "bookingdates[checkout]",
											"value": "{{checkout}}",
											"description": "Check out date in YYYY-MM-DD string format",
											"type": "text"
										},
										{
											"key": "additionalneeds",
											"value": "{{additionalneeds}}",
											"description": "Additional needs",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{mock_url}}/mock/urlencoded/partialupdate/booking/:id",
									"host": [
										"{{mock_url}}"
									],
									"path": [
										"mock",
										"urlencoded",
										"partialupdate",
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"description": "Booking ID of the booking record to update"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "165"
								},
								{
									"key": "Etag",
									"value": "W/\"a5-fFRumevE4PtRZcLNLRQ0PnRzW6w\""
								},
								{
									"key": "Date",
									"value": "Wed, 02 Mar 2022 13:58:21 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date"
								}
							],
							"responseTime": null,
							"body": "firstname={{firstname}}&lastname={{lastname}}&totalprice={{totalprice}}&depositpaid={{depositpaid}}&bookingdates%5Bcheckin%5D={{checkin}}&bookingdates%5Bcheckout%5D={{checkout}}&additionalneeds={{additionalneeds}}"
						}
					]
				}
			],
			"_postman_id": "0b1e051b-707a-45ba-b96f-b409f435b3a1"
		},
		{
			"name": "Other Common Tests",
			"item": [
				{
					"name": "Get Booking IDs - JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af0c7399-0eb2-4f9e-82f2-ab71cf2e9187",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(\"#TEST: Get Booking IDs Request: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsondata = {};\r",
									"\r",
									"pm.test(\"#TEST: Get Booking IDs - JSON: JSON response data validation\", () => {\r",
									"    try {\r",
									"        /*\r",
									"        pm.response.to.be.ok;\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"        */\r",
									"\r",
									"        pm.response.to.be.ok.\r",
									"            and.to.be.withBody.\r",
									"            and.to.be.json;\r",
									"\r",
									"\r",
									"        jsonData = pm.response.json();\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"JSON response data validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"// JSON schema validation\r",
									"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKINGIDS_JSON_SCHEMA\"));\r",
									"\r",
									"pm.test(\"#TEST: Get Booking IDs - JSON: JSON response schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// validate if last booking ID created is present in list.\r",
									"pm.test(\"#TEST: Get Booking IDs - JSON: JSON Booking ID validation\", () => {\r",
									"    const bookingid = Number.parseInt(pm.environment.get(\"bookingid\"));\r",
									"    let found = false;\r",
									"\r",
									"    // alternative validation checking each property, instead of performing schema validation\r",
									"    jsonData.forEach(booking => {\r",
									"        pm.expect(booking).to.have.key(\"bookingid\");\r",
									"        if (booking.bookingid === bookingid) {\r",
									"            found = true;\r",
									"        }\r",
									"    });\r",
									"\r",
									"    /*\r",
									"    // alternative way to iterate array of bookindid until one is found to exist in the returned list\r",
									"    for(let i=0; i<jsonData.length && !found; i++) {\r",
									"        if (jsonData[i].bookingid === bookingid) {\r",
									"            found = true;\r",
									"        } \r",
									"        console.log(\"Booking ID index = \" + i);\r",
									"    }\r",
									"    */\r",
									"\r",
									"    console.log(\"Booking ID [\" + bookingid +\"] found = \" + found);\r",
									"\r",
									"    pm.expect(found, \"Booking ID \" + bookingid + \" not found in returned list!\").to.be.true;\r",
									"\r",
									"});\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "2b47ea90-e59c-4d56-9aea-80e69cd5643a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{get_booking_ids_url}}",
						"description": "Sends a request to the Restfulbooker API to retrieve the list of all available booking IDs without any search filter. The response is expected to have an array of JSON object with a bookingid property. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-GetBookings)."
					},
					"response": [
						{
							"id": "610797b4-8bbb-4ef0-9dab-831b18bc2ea6",
							"name": "Get Booking IDs - JSON",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{prod_url}}/booking"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "757"
								},
								{
									"key": "Etag",
									"value": "W/\"2f5-iGVwSYDvvlDJ5a87FSlF9mGGChE\""
								},
								{
									"key": "Date",
									"value": "Thu, 10 Feb 2022 16:03:57 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"bookingid\": {{$randomInt}}\n    },\n    {\n        \"bookingid\": {{$randomInt}}\n    },\n    {\n        \"bookingid\": {{bookingid}}\n    }\n]"
						},
						{
							"id": "893a3d07-cafd-4d96-9b87-327163573f06",
							"name": "Get Booking IDs - JSON (Mock)",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{mock_url}}/mock/json/booking"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "757"
								},
								{
									"key": "Etag",
									"value": "W/\"2f5-iGVwSYDvvlDJ5a87FSlF9mGGChE\""
								},
								{
									"key": "Date",
									"value": "Thu, 10 Feb 2022 16:03:57 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"bookingid\": {{$randomInt}}\n    },\n    {\n        \"bookingid\": {{$randomInt}}\n    },\n    {\n        \"bookingid\": {{bookingid}}\n    }\n]"
						}
					]
				},
				{
					"name": "Get Booking IDs with Filter by Name  - JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b3bcd11-6579-4d3d-8288-7f6fad1febb6",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(\"#TEST: Get Booking IDs Filter by Name Request: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsondata = {};\r",
									"\r",
									"pm.test(\"#TEST: Get Booking IDs Filter by Name - JSON: JSON response data validation\", () => {\r",
									"    try {\r",
									"        /*\r",
									"        pm.response.to.be.ok;\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"        */\r",
									"\r",
									"        pm.response.to.be.ok.\r",
									"            and.to.be.withBody.\r",
									"            and.to.be.json;\r",
									"\r",
									"\r",
									"        jsonData = pm.response.json();\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"JSON response data validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"// JSON schema validation\r",
									"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKINGIDS_JSON_SCHEMA\"));\r",
									"\r",
									"pm.test(\"#TEST: Get Booking IDs Filter by Name - JSON: JSON response schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// validate if last booking ID created is present in list.\r",
									"pm.test(\"#TEST: Get Booking IDs Filter by Name - JSON: Booking ID validation\", () => {\r",
									"    if (jsonData.length === 0) {\r",
									"        console.log(\"#TEST: Get Booking IDs Filter by Name - List of Booking empty\");\r",
									"    }\r",
									"\r",
									"    jsonData.forEach(booking => {\r",
									"        pm.expect(booking).to.have.key(\"bookingid\");\r",
									"\r",
									"        console.log(\"get_booking_json_url: \" + pm.variables.replaceIn('{{get_booking_json_url}}'));\r",
									"\r",
									"        // send a request to get booking details\r",
									"        const getBookingReq = {\r",
									"            url: pm.variables.replaceIn('{{get_booking_json_url}}') + \"/\" + booking.bookingid,\r",
									"            //\"url\": \"https://restful-booker.herokuapp.com/booking/\" + booking.bookingid,\r",
									"            method: \"GET\",\r",
									"            header: {\r",
									"                Accept: \"application/json\"\r",
									"            }\r",
									"        };\r",
									"\r",
									"        console.log(\"getBookingReq: \" + JSON.stringify(getBookingReq));\r",
									"\r",
									"        pm.sendRequest(\r",
									"            getBookingReq,\r",
									"            (error, response) => {\r",
									"                pm.test(\"#TEST: Get Booking IDs Filter by Name - JSON: First and Last Name validation\", () => {\r",
									"                    if (error) {\r",
									"                        console.error(error);\r",
									"                    }\r",
									"\r",
									"                    //pm.response.to.have.status(200);\r",
									"                    pm.expect(error).to.equal(null);\r",
									"                    pm.expect(response).to.have.property('code', 200);\r",
									"                    pm.expect(response).to.have.property('status', 'OK');\r",
									"\r",
									"                    //validate first name and last name of each booking id\r",
									"                    let jsonData2 = response.json();\r",
									"                    const firstname = pm.environment.get(\"firstname\");\r",
									"                    try {\r",
									"                        pm.expect(jsonData2).to.have.property(\"firstname\", firstname);\r",
									"                        console.log(\"firstname: \" + jsonData2.firstname);\r",
									"                    }\r",
									"                    catch (e) {\r",
									"                        console.error(\"First Name validation failed! \" + e);\r",
									"                        throw e;\r",
									"                    }\r",
									"\r",
									"                    const lastname = pm.environment.get(\"lastname\");\r",
									"                    try {\r",
									"                        pm.expect(jsonData2).to.have.property(\"lastname\", lastname);\r",
									"                        console.log(\"lastname: \" + jsonData2.lastname);\r",
									"                    }\r",
									"                    catch (e) {\r",
									"                        console.error(\"Last Name validation failed! \" + e);\r",
									"                        throw e;\r",
									"                    }\r",
									"                })\r",
									"            } // callback function\r",
									"        );       \r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"/*\r",
									"pm.test(\"#TEST: Get Booking IDs Filter by Name - JSON: First and Last Name validation\", () => {\r",
									"    if (jsonData.length === 0) {\r",
									"        console.log(\"#TEST: Get Booking IDs Filter by Name - List of Booking empty\");\r",
									"    }\r",
									"\r",
									"    jsonData.forEach(booking => {\r",
									"        pm.expect(booking).to.have.key(\"bookingid\");\r",
									"\r",
									"        console.log(\"get_booking_json_url: \" + pm.variables.replaceIn('{{get_booking_json_url}}'));\r",
									"\r",
									"        // send a request to get booking details\r",
									"        const getBookingReq = {\r",
									"            url: pm.variables.replaceIn('{{get_booking_json_url}}') + \"/\" + booking.bookingid,\r",
									"            //\"url\": \"https://restful-booker.herokuapp.com/booking/\" + booking.bookingid,\r",
									"            method: \"GET\",\r",
									"            header: {\r",
									"                Accept: \"application/json\"\r",
									"            }\r",
									"        };\r",
									"\r",
									"        console.log(\"getBookingReq: \" + JSON.stringify(getBookingReq));\r",
									"\r",
									"        pm.sendRequest(getBookingReq, (error, response) => {\r",
									"            if (error) {\r",
									"                console.error(error);\r",
									"            }\r",
									"\r",
									"            //pm.response.to.have.status(200);\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"\r",
									"            //validate first name and last name of each booking id\r",
									"            let jsonData2 = response.json();\r",
									"            const firstname = pm.environment.get(\"firstname\");\r",
									"            try {\r",
									"                pm.expect(jsonData2).to.have.property(\"firstname\", firstname);\r",
									"                console.log(\"firstname: \" + jsonData2.firstname);\r",
									"            }\r",
									"            catch (e) {\r",
									"                console.error(\"First Name validation failed! \" + e);\r",
									"                throw e;\r",
									"            }\r",
									"\r",
									"            const lastname = pm.environment.get(\"lastname\");\r",
									"            try {\r",
									"                pm.expect(jsonData2).to.have.property(\"lastname\", lastname);\r",
									"                console.log(\"lastname: \" + jsonData2.lastname);\r",
									"            }\r",
									"            catch (e) {\r",
									"                console.error(\"Last Name validation failed! \" + e);\r",
									"                throw e;\r",
									"            }\r",
									"        }) // callback function\r",
									"    })\r",
									"})\r",
									"*/\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "bfaed88e-9f2e-4198-a4aa-b1935d252908",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{get_booking_ids_url}}?firstname={{firstname}}&lastname={{lastname}}",
							"host": [
								"{{get_booking_ids_url}}"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{firstname}}",
									"description": "First name search filter"
								},
								{
									"key": "lastname",
									"value": "{{lastname}}",
									"description": "Last name search filter"
								}
							]
						},
						"description": "Sends a request to the Restfulbooker API to retrieve the list of all available booking IDs with search filter for first and last name. The response is expected to have an array of JSON object with a bookingid property if the first name and last name match the search filters. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-GetBookings)."
					},
					"response": [
						{
							"id": "34c1f77c-50a8-449c-8957-315a91d14283",
							"name": "Get Booking IDs with Filter by Name- JSON",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{prod_url}}/booking?firstname={{firstname}}&lastname={{lastname}}",
									"host": [
										"{{prod_url}}"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "{{firstname}}",
											"description": "First name search filter"
										},
										{
											"key": "lastname",
											"value": "{{lastname}}",
											"description": "Last name search filter"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "757"
								},
								{
									"key": "Etag",
									"value": "W/\"2f5-iGVwSYDvvlDJ5a87FSlF9mGGChE\""
								},
								{
									"key": "Date",
									"value": "Thu, 10 Feb 2022 16:03:57 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"bookingid\": {{bookingid}}\n    }\n]"
						},
						{
							"id": "101c4c96-0a35-43f0-af5e-35df55e8fa48",
							"name": "Get Booking IDs with Filter by Name- JSON (Mock)",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mock_url}}/mock/json/booking?firstname={{firstname}}&lastname={{lastname}}",
									"host": [
										"{{mock_url}}"
									],
									"path": [
										"mock",
										"json",
										"booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "{{firstname}}",
											"description": "First name search filter"
										},
										{
											"key": "lastname",
											"value": "{{lastname}}",
											"description": "Last name search filter"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "757"
								},
								{
									"key": "Etag",
									"value": "W/\"2f5-iGVwSYDvvlDJ5a87FSlF9mGGChE\""
								},
								{
									"key": "Date",
									"value": "Thu, 10 Feb 2022 16:03:57 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"bookingid\": {{bookingid}}\n    }\n]"
						}
					]
				},
				{
					"name": "Get Booking IDs with Filter by Date  - JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ec6c146-382d-4d8e-abe0-f3cd0fd2e131",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(\"#TEST: Get Booking IDs Filter by Date Request: Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsondata = {};\r",
									"\r",
									"pm.test(\"#TEST: Get Booking IDs Filter by Date - JSON: JSON response data validation\", () => {\r",
									"    try {\r",
									"        /*\r",
									"        pm.response.to.be.ok;\r",
									"        pm.response.to.be.withBody;\r",
									"        pm.response.to.be.json;\r",
									"        */\r",
									"\r",
									"        pm.response.to.be.ok.\r",
									"            and.to.be.withBody.\r",
									"            and.to.be.json;\r",
									"\r",
									"\r",
									"        jsonData = pm.response.json();\r",
									"    }\r",
									"    catch (e) {\r",
									"        console.error(\"JSON response data validation failed! \" + e);\r",
									"        throw e;\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"// JSON schema validation\r",
									"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKINGIDS_JSON_SCHEMA\"));\r",
									"\r",
									"pm.test(\"#TEST: Get Booking IDs Filter by Date - JSON: JSON response schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"#TEST: Get Booking IDs Filter by Date - JSON: Booking ID validation\", () => {\r",
									"    if (jsonData.length === 0) {\r",
									"        console.log(\"#TEST: Get Booking IDs Filter by Date - List of Booking empty\");\r",
									"    }\r",
									"\r",
									"    jsonData.forEach(booking => {\r",
									"        pm.expect(booking).to.have.key(\"bookingid\");\r",
									"\r",
									"        //console.log(\"get_booking_json_url: \" + pm.variables.replaceIn('{{get_booking_json_url}}'));\r",
									"\r",
									"        // send a request to get booking details for each booking ID returned\r",
									"        const getBookingReq = {\r",
									"            url: pm.variables.replaceIn('{{get_booking_json_url}}') + \"/\" + booking.bookingid,\r",
									"            //\"url\": \"https://restful-booker.herokuapp.com/booking/\" + booking.bookingid,\r",
									"            method: \"GET\",\r",
									"            header: {\r",
									"                Accept: \"application/json\"\r",
									"            }\r",
									"        };\r",
									"\r",
									"        console.log(\"getBookingReq: \" + JSON.stringify(getBookingReq));\r",
									"\r",
									"        pm.sendRequest(\r",
									"            getBookingReq,\r",
									"            (error, response) => {\r",
									"                pm.test(\"#TEST: Get Booking IDs Filter by Date - JSON: Checkin and Checkout Date validation\", () => {\r",
									"                    if (error) {\r",
									"                        console.error(error);\r",
									"                    }\r",
									"\r",
									"                    //pm.response.to.have.status(200);\r",
									"                    pm.expect(error).to.equal(null);\r",
									"                    pm.expect(response).to.have.property('code', 200);\r",
									"                    pm.expect(response).to.have.property('status', 'OK');\r",
									"\r",
									"                    //let _ = require(\"lodash\");\r",
									"                    let moment = require(\"moment\");\r",
									"\r",
									"                    //validate checkin and checkout date of each booking id\r",
									"                    let jsonData2 = response.json();\r",
									"                    const checkin = pm.environment.get(\"checkin\");\r",
									"                    const checkout = pm.environment.get(\"checkout\");\r",
									"                    console.log(\"Filter by checkin=\" + checkin + \" and checkout=\" + checkout);\r",
									"\r",
									"                    pm.expect(jsonData2).haveOwnProperty(\"bookingdates\");\r",
									"                    try {\r",
									"                        pm.expect(jsonData2.bookingdates).to.have.property(\"checkin\");\r",
									"                        console.log(\"Returned checkin: \" + jsonData2.bookingdates.checkin);\r",
									"\r",
									"                        //pm.expect(_.gte(jsonData2.bookingdates.checkin, checkin), \"Returned checkin date \" + jsonData2.bookingdates.checkin + \" should be >= \" + checkin);\r",
									"\r",
									"                        pm.expect(moment(jsonData2.bookingdates.checkin, \"YYYY-MM-DD\").isSameOrAfter(moment(checkin, \"YYYY-MM-DD\")), \r",
									"                            \"Returned checkin date \" + jsonData2.bookingdates.checkin + \" should be >= \" + checkin).to.be.true;\r",
									"                    }\r",
									"                    catch (e) {\r",
									"                        console.error(\"Checkin Date validation failed! \" + e);\r",
									"                        throw e;\r",
									"                    }\r",
									"\r",
									"                    try {\r",
									"                        pm.expect(jsonData2.bookingdates).to.have.property(\"checkout\");\r",
									"                        console.log(\"Returned checkout: \" + jsonData2.bookingdates.checkout);\r",
									"                        //pm.expect(_.lte(jsonData2.bookingdates.checkout, checkout), \"Returned checkout date \" + jsonData2.bookingdates.checkout + \" should be <= \" + checkout);\r",
									"                        pm.expect(moment(jsonData2.bookingdates.checkout, \"YYYY-MM-DD\").isSameOrBefore(moment(checkout, \"YYYY-MM-DD\")), \r",
									"                            \"Returned checkout date \" + jsonData2.bookingdates.checkout + \" should be <= \" + checkout).to.be.true;\r",
									"                    }\r",
									"                    catch (e) {\r",
									"                        console.error(\"Checkout Date validation failed! \" + e);\r",
									"                        throw e;\r",
									"                    }\r",
									"                })\r",
									"            } // callback function\r",
									"        );\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "60bd54d2-253d-43c9-a89c-6ed7d8672d16",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{get_booking_ids_url}}?checkin={{checkin}}&checkout={{checkout}}",
							"host": [
								"{{get_booking_ids_url}}"
							],
							"query": [
								{
									"key": "checkin",
									"value": "{{checkin}}",
									"description": "Check-in date filter in YYYY-MM-DD format."
								},
								{
									"key": "checkout",
									"value": "{{checkout}}",
									"description": "Check-out date filter in YYYY-MM-DD format."
								}
							]
						},
						"description": "Sends a request to the Restfulbooker API to retrieve the list of all available booking IDs with search filter for check in and check out dates. The response is expected to have an array of JSON object with a bookingid property if the booking dates fall between the search filter dates (inclusive). The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-GetBookings)."
					},
					"response": [
						{
							"id": "db5deae7-57d9-46e9-9f12-7afbf1819e36",
							"name": "Get Booking IDs with Filter by Date- JSON",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{prod_url}}/booking?checkin={{checkin}}&checkout={{checkout}}",
									"host": [
										"{{prod_url}}"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "{{checkin}}",
											"description": "Check-in date filter in YYYY-MM-DD format."
										},
										{
											"key": "checkout",
											"value": "{{checkout}}",
											"description": "Check-out date filter in YYYY-MM-DD format."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "757"
								},
								{
									"key": "Etag",
									"value": "W/\"2f5-iGVwSYDvvlDJ5a87FSlF9mGGChE\""
								},
								{
									"key": "Date",
									"value": "Thu, 10 Feb 2022 16:03:57 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"bookingid\": {{bookingid}}\n    }\n]"
						},
						{
							"id": "e65d03bc-3477-4286-bba9-d10e0b497437",
							"name": "Get Booking IDs with Filter by Date- JSON (Mock)",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mock_url}}/mock/json/booking?checkin={{checkin}}&checkout={{checkout}}",
									"host": [
										"{{mock_url}}"
									],
									"path": [
										"mock",
										"json",
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "{{checkin}}",
											"description": "Check-in date filter in YYYY-MM-DD format."
										},
										{
											"key": "checkout",
											"value": "{{checkout}}",
											"description": "Check-out date filter in YYYY-MM-DD format."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "757"
								},
								{
									"key": "Etag",
									"value": "W/\"2f5-iGVwSYDvvlDJ5a87FSlF9mGGChE\""
								},
								{
									"key": "Date",
									"value": "Thu, 10 Feb 2022 16:03:57 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"bookingid\": {{bookingid}}\n    }\n]"
						}
					]
				},
				{
					"name": "Get Booking - Non Existent - JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39af6bc2-18bc-4298-a162-cf4e03cae6b2",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(\"#TEST: Get Booking Request: Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"TEST: Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
									"});\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "35497b22-8775-4b9e-a735-ea276a9dc1ec",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "1a92523d-0a67-451e-bb61-23db431453a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{get_booking_json_url}}/:id",
							"host": [
								"{{get_booking_json_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"id": "4ec37569-0c26-4cde-849e-f396e758ba24",
									"key": "id",
									"value": "123456789",
									"description": "Dummy booking id",
									"type": "string"
								}
							]
						},
						"description": "Sends a get booking request to the Restfulbooker API to retrieve a booking record based on the booking ID. This test is specific for a non-existent booking record to test the response status. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-GetBooking)."
					},
					"response": [
						{
							"id": "b25699b4-f370-40c2-b0cd-748fe091a3d8",
							"name": "Get Booking - Non Existent - JSON",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{prod_url}}/booking/:id",
									"host": [
										"{{prod_url}}"
									],
									"path": [
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "123456789",
											"description": "Dummy booking id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "9"
								},
								{
									"key": "Etag",
									"value": "W/\"9-0gXL1ngzMqISxa6S1zx3F4wtLyg\""
								},
								{
									"key": "Date",
									"value": "Fri, 18 Feb 2022 18:07:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "Not Found"
						},
						{
							"id": "3af81c24-8f53-4ad1-8ab7-552074f8c576",
							"name": "Get Booking - Non Existent - JSON (Mock)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mock_url}}/mock/json/booking/:id",
									"host": [
										"{{mock_url}}"
									],
									"path": [
										"mock",
										"json",
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "123456789",
											"description": "Dummy booking id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "9"
								},
								{
									"key": "Etag",
									"value": "W/\"9-0gXL1ngzMqISxa6S1zx3F4wtLyg\""
								},
								{
									"key": "Date",
									"value": "Fri, 18 Feb 2022 18:07:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "Not Found"
						}
					]
				},
				{
					"name": "Delete Booking - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4811dd6-2983-4b84-8076-7512130c7d38",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(\"#TEST: Delete Booking - Success - Request: Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"#TEST: Delete Booking - Success - Request: Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
									"});\r",
									"\r",
									"// send a request to confirm that the booking record was successfully deleted.\r",
									"const getBookingReq = {\r",
									"    url: pm.variables.replaceIn('{{get_booking_json_url}}') + \"/\" + pm.environment.get(\"bookingid\"),\r",
									"    //\"url\": \"https://restful-booker.herokuapp.com/booking/\" + booking.bookingid,\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        Accept: \"application/json\"\r",
									"    }\r",
									"};\r",
									"\r",
									"console.log(\"getBookingReq: \" + JSON.stringify(getBookingReq));\r",
									"\r",
									"\r",
									"pm.sendRequest(getBookingReq, (error, response) => { \r",
									"        if (error) {\r",
									"            console.error(error);\r",
									"        }\r",
									"\r",
									"        //console.log(\"response: \" + response);\r",
									"\r",
									"\r",
									"        pm.test(\"#TEST: Delete Booking - Success - Request: Confirm Booking record has been deleted\", function () {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 404);\r",
									"            pm.expect(response).to.have.property('status', 'Not Found');\r",
									"        });\r",
									"});\r",
									"\r",
									"\r",
									"/*\r",
									"pm.test(\"#TEST: Delete Booking - Success - Request: Confirm Booking record has been deleted\", function () {\r",
									"    pm.sendRequest(getBookingReq, (error, response) => { \r",
									"            if (error) {\r",
									"                console.error(error);\r",
									"            }\r",
									"\r",
									"            console.log(\"response: \" + response);\r",
									"\r",
									"\r",
									"                pm.expect(error).to.equal(null);\r",
									"                pm.expect(response).to.have.property('code', 404);\r",
									"                pm.expect(response).to.have.property('status', 'Not Found');\r",
									"    });\r",
									"});\r",
									"*/\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e704629f-58de-4b90-b7ca-5ed396091cb9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "2900f218-4792-45fa-916b-b1dae42f40f3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"password": "{{password}}",
								"username": "{{username}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{delete_booking_success_url}}/:id",
							"host": [
								"{{delete_booking_success_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"id": "99e32c22-fc93-4212-86ef-ceff8b072494",
									"key": "id",
									"value": "{{bookingid}}",
									"description": "Booking ID",
									"type": "string"
								}
							]
						},
						"description": "Sends a delete booking request to the Restfulbooker API to delete a booking record based on the booking ID. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-DeleteBooking)."
					},
					"response": [
						{
							"id": "2362b3bf-f84a-4e86-99e5-8df6b4d71c88",
							"name": "Delete Booking - Success (Mock)",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{mock_url}}/mock/del/success/booking/:id",
									"host": [
										"{{mock_url}}"
									],
									"path": [
										"mock",
										"del",
										"success",
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"description": "Booking ID"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "7"
								},
								{
									"key": "Etag",
									"value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
								},
								{
									"key": "Date",
									"value": "Sun, 27 Feb 2022 16:07:57 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "Created"
						},
						{
							"id": "9c45a1a4-4fc9-458f-ac59-c0ccd9097c0f",
							"name": "Delete Booking - Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{prod_url}}/booking/:id",
									"host": [
										"{{prod_url}}"
									],
									"path": [
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{bookingid}}",
											"description": "Booking ID"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "7"
								},
								{
									"key": "Etag",
									"value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
								},
								{
									"key": "Date",
									"value": "Sun, 27 Feb 2022 16:07:57 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "Created"
						}
					]
				},
				{
					"name": "Delete Booking - Non Existent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4811dd6-2983-4b84-8076-7512130c7d38",
								"exec": [
									"console.log(`=== ${pm.info.requestName}: START Tests ===`);\r",
									"\r",
									"pm.test(\"#TEST: Delete Booking - Non Existent - Request: Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"/*\r",
									"pm.test(\"#TEST: Delete Booking - Non Existent - Request\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
									"});\r",
									"*/\r",
									"\r",
									"console.log(`=== ${pm.info.requestName}: END Tests ===`);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e704629f-58de-4b90-b7ca-5ed396091cb9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "84486e42-eb88-48d4-a1b1-25688d0364fa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token_key}}",
								"description": "Auth token as a cookie",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{delete_booking_fail_url}}/:id",
							"host": [
								"{{delete_booking_fail_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"id": "0921fbe6-46ac-448f-bcbc-c69815e1414f",
									"key": "id",
									"value": "123456789",
									"description": "Dummy Booking ID",
									"type": "string"
								}
							]
						},
						"description": "Sends a delete booking request to the Restfulbooker API to delete a booking record based on the booking ID. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-DeleteBooking)."
					},
					"response": [
						{
							"id": "1fe5972b-6044-4480-9663-3e6dd77374bd",
							"name": "Delete Booking - Non Existent",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "token=abc123",
										"description": "Auth token as a cookie",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{prod_url}}/booking/:id",
									"host": [
										"{{prod_url}}"
									],
									"path": [
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "123456789"
										}
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "7"
								},
								{
									"key": "Etag",
									"value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
								},
								{
									"key": "Date",
									"value": "Sun, 27 Feb 2022 16:07:57 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "Method Not Allowed"
						},
						{
							"id": "672700f1-c9dc-49e2-b551-edbd933e89c9",
							"name": "Delete Booking - Non Existent (Mock)",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "token=abc123",
										"description": "Auth token as a cookie",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{mock_url}}/mock/del/fail/booking/:id",
									"host": [
										"{{mock_url}}"
									],
									"path": [
										"mock",
										"del",
										"fail",
										"booking",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "123456789"
										}
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "7"
								},
								{
									"key": "Etag",
									"value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
								},
								{
									"key": "Date",
									"value": "Sun, 27 Feb 2022 16:07:57 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "Method Not Allowed"
						}
					]
				}
			],
			"_postman_id": "c4c6bd28-1948-498f-bf2a-ef96f017f28e"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cb3400a9-864a-4886-909b-e0b561d5b377",
				"type": "text/javascript",
				"exec": [
					"/**",
					" * Utility class that contain resuable functions.",
					" */",
					"class TestUtil {",
					"    constructor () {};",
					"",
					"    /**",
					"     * Utility function to convert a date to ISO string yyyy-mm-dd format.",
					"     */",
					"    formatDate(date) {",
					"        let yourDate = new Date(date);",
					"        yourDate.toISOString().split('T')[0];",
					"        const offset = yourDate.getTimezoneOffset();",
					"        yourDate = new Date(yourDate.getTime() - (offset*60000));",
					"        return yourDate.toISOString().split('T')[0];",
					"    };",
					"};",
					"",
					"util = new TestUtil();",
					"//console.log(\"Restful Booker Test Collection Pre-req: \" + util.formatDate(\"Sat Jan 19 2021 01:58:04 GMT+0800 (Philippine Standard Time)\"))",
					"//console.log(\"Collection Pre-request Script - Set collectionVariable: \" + util);",
					"pm.collectionVariables.set(\"utilityclass\", util);",
					"",
					"//util2 = pm.collectionVariables.get(\"utilityclass\");",
					"//console.debug(\"Collection Pre-requesite Script - Get collectionVariable: \" + util2.name);",
					"//console.log(\"Restful Booker Test Collection Pre-req: \" + util2.formatDate(\"Sat Jan 20 2021 01:58:04 GMT+0800 (Philippine Standard Time)\"))",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "65576208-85a2-4442-ac9b-3cde1cff9c82",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "521875da-16b5-4faa-b07f-85aae8b0aaf5",
			"key": "base_url",
			"value": "https://restful-booker.herokuapp.com",
			"type": "string",
			"disabled": true
		},
		{
			"id": "80b884f4-f82f-4964-9e66-1027023e9bda",
			"key": "token_key",
			"value": "abc123",
			"type": "string",
			"disabled": true
		},
		{
			"id": "b672e9f3-cf5d-4101-bd36-4cd16202eb3e",
			"key": "firstname",
			"value": "FirstName",
			"type": "string",
			"disabled": true
		},
		{
			"id": "de6504de-506b-43a2-820a-5293193a4a95",
			"key": "lastname",
			"value": "LastName",
			"type": "string",
			"disabled": true
		},
		{
			"id": "fe23989c-6607-418a-81b1-946599908e23",
			"key": "totalprice",
			"value": "1",
			"type": "string",
			"disabled": true
		},
		{
			"id": "589ea0d9-7bb5-420b-a0d7-f2f65e5c16d1",
			"key": "depositpaid",
			"value": "false",
			"type": "string",
			"disabled": true
		},
		{
			"id": "089fc086-8f42-47dd-b50b-1a1ce28cb55e",
			"key": "checkin",
			"value": "2022-01-01",
			"type": "string",
			"disabled": true
		},
		{
			"id": "0f64b8c8-4b5e-4b84-a15a-fa492f27960e",
			"key": "checkout",
			"value": "2022-12-31",
			"type": "string",
			"disabled": true
		},
		{
			"id": "014cb27b-d0cc-430f-a64c-65d58d1a386b",
			"key": "additionalneeds",
			"value": "AdditionalNeeds",
			"type": "string",
			"disabled": true
		},
		{
			"id": "a1318f6d-2d34-4f42-ac76-55cbed0e65f0",
			"key": "bookingid",
			"value": "1",
			"type": "string",
			"disabled": true
		},
		{
			"id": "e6c8c69d-1fc2-4348-87d7-57142276689b",
			"key": "BOOKING_JSON_SCHEMA",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"bookingid\": {\n      \"type\": \"integer\"\n    },\n    \"booking\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"firstname\": {\n          \"type\": \"string\"\n        },\n        \"lastname\": {\n          \"type\": \"string\"\n        },\n        \"totalprice\": {\n          \"type\": \"integer\"\n        },\n        \"depositpaid\": {\n          \"type\": \"boolean\"\n        },\n        \"bookingdates\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"checkin\": {\n              \"type\": \"string\"\n            },\n            \"checkout\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"checkin\",\n            \"checkout\"\n          ]\n        },\n        \"additionalneeds\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"firstname\",\n        \"lastname\",\n        \"totalprice\",\n        \"depositpaid\",\n        \"bookingdates\",\n        \"additionalneeds\"\n      ]\n    }\n  },\n  \"required\": [\n    \"bookingid\",\n    \"booking\"\n  ]\n}",
			"type": "string"
		},
		{
			"id": "2c68dc8c-d2cd-43bf-812e-8af16c0bd30e",
			"key": "BOOKING_XML2JSON_SCHEMA",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"created-booking\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"bookingid\": {\n          \"type\": \"string\"\n        },\n        \"booking\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"firstname\": {\n              \"type\": \"string\"\n            },\n            \"lastname\": {\n              \"type\": \"string\"\n            },\n            \"totalprice\": {\n              \"type\": \"string\"\n            },\n            \"depositpaid\": {\n              \"type\": \"string\"\n            },\n            \"bookingdates\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"checkin\": {\n                  \"type\": \"string\"\n                },\n                \"checkout\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"checkin\",\n                \"checkout\"\n              ]\n            },\n            \"additionalneeds\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"firstname\",\n            \"lastname\",\n            \"totalprice\",\n            \"depositpaid\",\n            \"bookingdates\",\n            \"additionalneeds\"\n          ]\n        }\n      },\n      \"required\": [\n        \"bookingid\",\n        \"booking\"\n      ]\n    }\n  },\n  \"required\": [\n    \"created-booking\"\n  ]\n}",
			"type": "string"
		},
		{
			"id": "0b74b0db-06cb-47d2-af68-ca37074bb32c",
			"key": "BOOKING_URLENCODED_SCHEMA",
			"value": "{\n   \"type\": \"object\",\n  \"properties\": {\n    \"bookingid\": {\n      \"type\": \"string\"\n    },\n    \"booking[firstname]\": {\n      \"type\": \"string\"\n    },\n    \"booking[lastname]\": {\n      \"type\": \"string\"\n    },\n    \"booking[totalprice]\": {\n      \"type\": \"string\"\n    },\n    \"booking[depositpaid]\": {\n      \"type\": \"string\"\n    },\n    \"booking[bookingdates][checkin]\": {\n      \"type\": \"string\"\n    },\n    \"booking[bookingdates][checkout]\": {\n      \"type\": \"string\"\n    },\n    \"booking[additionalneeds]\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"bookingid\",\n    \"booking[firstname]\",\n    \"booking[lastname]\",\n    \"booking[totalprice]\",\n    \"booking[depositpaid]\",\n    \"booking[bookingdates][checkin]\",\n    \"booking[bookingdates][checkout]\",\n    \"booking[additionalneeds]\"\n  ]\n}",
			"type": "string"
		},
		{
			"id": "e4efcfa9-9e73-4588-be2e-6e0f8e2b12b2",
			"key": "GET_BOOKING_JSON_SCHEMA",
			"value": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"http://example.com/example.json\",\n    \"type\": \"object\",\n    \"title\": \"The root schema\",\n    \"description\": \"The root schema comprises the entire JSON document.\",\n    \"examples\": [\n        {\n            \"firstname\": \"Miguel\",\n            \"lastname\": \"Rohan\",\n            \"totalprice\": 206,\n            \"depositpaid\": true,\n            \"bookingdates\": {\n                \"checkin\": \"2021-04-17\",\n                \"checkout\": \"2022-10-15\"\n            },\n            \"additionalneeds\": \"hard drive\"\n        }\n    ],\n    \"required\": [\n        \"firstname\",\n        \"lastname\",\n        \"totalprice\",\n        \"depositpaid\",\n        \"bookingdates\"\n    ],\n    \"properties\": {\n        \"firstname\": {\n            \"$id\": \"#/properties/firstname\",\n            \"type\": \"string\",\n            \"title\": \"The firstname schema\",\n            \"description\": \"The first name used when booking was created.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"Miguel\"\n            ]\n        },\n        \"lastname\": {\n            \"$id\": \"#/properties/lastname\",\n            \"type\": \"string\",\n            \"title\": \"The lastname schema\",\n            \"description\": \"The last name used when booking was created.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"Rohan\"\n            ]\n        },\n        \"totalprice\": {\n            \"$id\": \"#/properties/totalprice\",\n            \"type\": \"integer\",\n            \"title\": \"The totalprice schema\",\n            \"description\": \"The total price used when booking was created.\",\n            \"default\": 0,\n            \"examples\": [\n                206\n            ]\n        },\n        \"depositpaid\": {\n            \"$id\": \"#/properties/depositpaid\",\n            \"type\": \"boolean\",\n            \"title\": \"The depositpaid schema\",\n            \"description\": \"The deposit paid indicator used when booking was created.\",\n            \"default\": false,\n            \"examples\": [\n                true\n            ]\n        },\n        \"bookingdates\": {\n            \"$id\": \"#/properties/bookingdates\",\n            \"type\": \"object\",\n            \"title\": \"The bookingdates schema\",\n            \"description\": \"Check in and check out dates used when booking was created.\",\n            \"default\": {},\n            \"examples\": [\n                {\n                    \"checkin\": \"2021-04-17\",\n                    \"checkout\": \"2022-10-15\"\n                }\n            ],\n            \"required\": [\n                \"checkin\",\n                \"checkout\"\n            ],\n            \"properties\": {\n                \"checkin\": {\n                    \"$id\": \"#/properties/bookingdates/properties/checkin\",\n                    \"type\": \"string\",\n                    \"title\": \"The checkin schema\",\n                    \"description\": \"Check in date in YYYY-MM-DD format when booking was created.\",\n                    \"default\": \"\",\n                    \"examples\": [\n                        \"2021-04-17\"\n                    ]\n                },\n                \"checkout\": {\n                    \"$id\": \"#/properties/bookingdates/properties/checkout\",\n                    \"type\": \"string\",\n                    \"title\": \"The checkout schema\",\n                    \"description\": \"Check out date in YYYY-MM-DD format when booking was created.\",\n                    \"default\": \"\",\n                    \"examples\": [\n                        \"2022-10-15\"\n                    ]\n                }\n            },\n            \"additionalProperties\": false\n        },\n        \"additionalneeds\": {\n            \"$id\": \"#/properties/additionalneeds\",\n            \"type\": \"string\",\n            \"title\": \"The additionalneeds schema\",\n            \"description\": \"An optional property to indicate additional needs when booking was created.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"hard drive\"\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}",
			"type": "string"
		},
		{
			"id": "0976e9bd-6b6b-424e-81a6-5505acc614ea",
			"key": "GET_BOOKINGIDS_JSON_SCHEMA",
			"value": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"http://example.com/example.json\",\n    \"type\": \"array\",\n    \"uniqueItems\": true,\n    \"title\": \"The root schema\",\n    \"description\": \"The root schema comprises the entire JSON document.\",\n    \"default\": [],\n    \"examples\": [\n        [\n            {\n                \"bookingid\": 12\n            },\n            {\n                \"bookingid\": 23\n            }\n        ]\n    ],\n    \"additionalItems\": false,\n    \"items\": {\n        \"$id\": \"#/items\",\n        \"anyOf\": [\n            {\n                \"$id\": \"#/items/anyOf/0\",\n                \"type\": \"object\",\n                \"title\": \"The first anyOf schema\",\n                \"description\": \"A list of zero or more objects containing a single property of bookingid.\",\n                \"examples\": [\n                    {\n                        \"bookingid\": 12\n                    }\n                ],\n                \"required\": [\n                    \"bookingid\"\n                ],\n                \"properties\": {\n                    \"bookingid\": {\n                        \"$id\": \"#/items/anyOf/0/properties/bookingid\",\n                        \"type\": \"integer\",\n                        \"title\": \"The bookingid schema\",\n                        \"description\": \"bookingid property of type integer.\",\n                        \"examples\": [\n                            12\n                        ]\n                    }\n                },\n                \"additionalProperties\": false\n            }\n        ]\n    }\n}",
			"type": "string"
		},
		{
			"id": "34d71b4f-5735-4bb5-b5de-a85583aaad61",
			"key": "GET_BOOKING_XML_SCHEMA",
			"value": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"http://example.com/example.json\",\n    \"type\": \"object\",\n    \"title\": \"The root schema\",\n    \"description\": \"The root schema comprises the entire JSON document which was transformed from an XML document.\",\n    \"default\": {},\n    \"examples\": [\n        {\n            \"booking\": {\n                \"firstname\": \"Junior\",\n                \"lastname\": \"Collier\",\n                \"totalprice\": \"74\",\n                \"depositpaid\": \"true\",\n                \"bookingdates\": {\n                    \"checkin\": \"2021-08-15\",\n                    \"checkout\": \"2022-10-16\"\n                },\n                \"additionalneeds\": \"panel\"\n            }\n        }\n    ],\n    \"required\": [\n        \"booking\"\n    ],\n    \"properties\": {\n        \"booking\": {\n            \"$id\": \"#/properties/booking\",\n            \"default\": {},\n            \"description\": \"This object contains the properties of a booking record.\",\n            \"examples\": [\n                {\n                    \"firstname\": \"Junior\",\n                    \"lastname\": \"Collier\",\n                    \"totalprice\": \"74\",\n                    \"depositpaid\": \"true\",\n                    \"bookingdates\": {\n                        \"checkin\": \"2021-08-15\",\n                        \"checkout\": \"2022-10-16\"\n                    },\n                    \"additionalneeds\": \"panel\"\n                }\n            ],\n            \"required\": [\n                \"firstname\",\n                \"lastname\",\n                \"totalprice\",\n                \"depositpaid\",\n                \"bookingdates\",\n                \"additionalneeds\"\n            ],\n            \"title\": \"The booking schema\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"firstname\": {\n                    \"$id\": \"#/properties/booking/properties/firstname\",\n                    \"default\": \"\",\n                    \"description\": \"First name of the booking record.\",\n                    \"examples\": [\n                        \"Junior\"\n                    ],\n                    \"title\": \"The firstname schema\",\n                    \"type\": \"string\"\n                },\n                \"lastname\": {\n                    \"$id\": \"#/properties/booking/properties/lastname\",\n                    \"default\": \"\",\n                    \"description\": \"The last name of the booking record.\",\n                    \"examples\": [\n                        \"Collier\"\n                    ],\n                    \"title\": \"The lastname schema\",\n                    \"type\": \"string\"\n                },\n                \"totalprice\": {\n                    \"$id\": \"#/properties/booking/properties/totalprice\",\n                    \"default\": \"\",\n                    \"description\": \"The total price paid for the booking.\",\n                    \"examples\": [\n                        \"74\"\n                    ],\n                    \"title\": \"The totalprice schema\",\n                    \"type\": \"string\"\n                },\n                \"depositpaid\": {\n                    \"$id\": \"#/properties/booking/properties/depositpaid\",\n                    \"default\": \"\",\n                    \"description\": \"true if a deposit was paid, othewise false.\",\n                    \"examples\": [\n                        \"true\"\n                    ],\n                    \"title\": \"The depositpaid schema\",\n                    \"type\": \"string\"\n                },\n                \"bookingdates\": {\n                    \"$id\": \"#/properties/booking/properties/bookingdates\",\n                    \"default\": {},\n                    \"description\": \"An object containing the checkin and checkout date properties.\",\n                    \"examples\": [\n                        {\n                            \"checkin\": \"2021-08-15\",\n                            \"checkout\": \"2022-10-16\"\n                        }\n                    ],\n                    \"required\": [\n                        \"checkin\",\n                        \"checkout\"\n                    ],\n                    \"title\": \"The bookingdates schema\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"checkin\": {\n                            \"$id\": \"#/properties/booking/properties/bookingdates/properties/checkin\",\n                            \"default\": \"\",\n                            \"description\": \"Indicates the check-in date in YYYY-MM-DD string format.\",\n                            \"examples\": [\n                                \"2021-08-15\"\n                            ],\n                            \"title\": \"The checkin schema\",\n                            \"type\": \"string\"\n                        },\n                        \"checkout\": {\n                            \"$id\": \"#/properties/booking/properties/bookingdates/properties/checkout\",\n                            \"default\": \"\",\n                            \"description\": \"Indicates the check-out date in YYYY-MM-DD string format.\",\n                            \"examples\": [\n                                \"2022-10-16\"\n                            ],\n                            \"title\": \"The checkout schema\",\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"additionalProperties\": false\n                },\n                \"additionalneeds\": {\n                    \"$id\": \"#/properties/booking/properties/additionalneeds\",\n                    \"default\": \"\",\n                    \"description\": \"Indicates if there are any additional needs per the booking record.\",\n                    \"examples\": [\n                        \"panel\"\n                    ],\n                    \"title\": \"The additionalneeds schema\",\n                    \"type\": \"string\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    },\n    \"additionalProperties\": false\n}",
			"type": "string"
		},
		{
			"id": "eadd2185-d587-47a8-bef1-c386170fd5cc",
			"key": "utilityclass",
			"value": "",
			"type": "string"
		},
		{
			"id": "ba54bf81-2151-49f9-bfb1-f8d671b2568e",
			"key": "UPDATE_BOOKING_URLENCODED_SCHEMA",
			"value": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"http://example.com/example.json\",\n    \"type\": \"object\",\n    \"title\": \"The root schema\",\n    \"description\": \"The root schema comprises the entire JSON document.\",\n    \"default\": {},\n    \"examples\": [\n        {\n            \"firstname\": \"Francis\",\n            \"lastname\": \"Kutch\",\n            \"totalprice\": \"790\",\n            \"depositpaid\": \"true\",\n            \"bookingdates[checkin]\": \"2021-08-10\",\n            \"bookingdates[checkout]\": \"2023-01-02\",\n            \"additionalneeds\": \"circuit\"\n        }\n    ],\n    \"required\": [\n        \"firstname\",\n        \"lastname\",\n        \"totalprice\",\n        \"depositpaid\",\n        \"bookingdates[checkin]\",\n        \"bookingdates[checkout]\",\n        \"additionalneeds\"\n    ],\n    \"properties\": {\n        \"firstname\": {\n            \"$id\": \"#/properties/firstname\",\n            \"type\": \"string\",\n            \"title\": \"The firstname schema\",\n            \"description\": \"An explanation about the purpose of this instance.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"Francis\"\n            ]\n        },\n        \"lastname\": {\n            \"$id\": \"#/properties/lastname\",\n            \"type\": \"string\",\n            \"title\": \"The lastname schema\",\n            \"description\": \"An explanation about the purpose of this instance.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"Kutch\"\n            ]\n        },\n        \"totalprice\": {\n            \"$id\": \"#/properties/totalprice\",\n            \"type\": \"string\",\n            \"title\": \"The totalprice schema\",\n            \"description\": \"An explanation about the purpose of this instance.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"790\"\n            ]\n        },\n        \"depositpaid\": {\n            \"$id\": \"#/properties/depositpaid\",\n            \"type\": \"string\",\n            \"title\": \"The depositpaid schema\",\n            \"description\": \"An explanation about the purpose of this instance.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"true\"\n            ]\n        },\n        \"bookingdates[checkin]\": {\n            \"$id\": \"#/properties/bookingdates%5Bcheckin%5D\",\n            \"type\": \"string\",\n            \"title\": \"The bookingdates[checkin] schema\",\n            \"description\": \"An explanation about the purpose of this instance.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"2021-08-10\"\n            ]\n        },\n        \"bookingdates[checkout]\": {\n            \"$id\": \"#/properties/bookingdates%5Bcheckout%5D\",\n            \"type\": \"string\",\n            \"title\": \"The bookingdates[checkout] schema\",\n            \"description\": \"An explanation about the purpose of this instance.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"2023-01-02\"\n            ]\n        },\n        \"additionalneeds\": {\n            \"$id\": \"#/properties/additionalneeds\",\n            \"default\": \"\",\n            \"description\": \"An explanation about the purpose of this instance.\",\n            \"examples\": [\n                \"circuit\"\n            ],\n            \"title\": \"The additionalneeds schema\",\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}",
			"type": "string"
		},
		{
			"id": "8cb9b98f-5b7f-4c87-a7f0-17d7af18110a",
			"key": "use_datafile",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"id": "aabd7af7-2183-43c0-895b-4a7c2ff6ff86",
			"key": "postman_api_key",
			"value": "",
			"type": "string"
		}
	]
}