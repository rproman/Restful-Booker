{
	"info": {
		"_postman_id": "00307028-1e99-4b2b-b10d-432d1559d9ec",
		"name": "Restful Booker Test",
		"description": "This collection demonstrates different ways to perform CRUD web API testing. It uses different test validations with different request and response formats (i.e., JSON, XML, and form URL encoded data).\n\nThe web service API used is Restfulbooker API which can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Ping Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`#TEST: ${pm.info.requestName}: Status code is 201`, function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(`#TEST: ${pm.info.requestName}: Body is correct`, function () {\r",
							"    pm.response.to.have.body(\"Created\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/ping",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"ping"
					]
				},
				"description": "Sends a ping request to the Restfulbooker API to determine if the service is up. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Ping-Ping)."
			},
			"response": [
				{
					"name": "Ping Request",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ping",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/plain; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "7"
						},
						{
							"key": "Etag",
							"value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
						},
						{
							"key": "Date",
							"value": "Tue, 18 Jan 2022 16:22:31 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Auth Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`#TEST: ${pm.info.requestName}: Status code is 200`, function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(`#TEST: ${pm.info.requestName}: Body is correct`, function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (pm.expect(jsonData.token).exist) {\r",
							"        pm.collectionVariables.set(\"token_key\", jsonData.token);\r",
							"        console.log(`${pm.info.requestName}: Token Value: ` + pm.collectionVariables.get(\"token_key\"));\r",
							"    } else {\r",
							"        console.log(`${pm.info.requestName}: token property does not exist!`);\r",
							"    }\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				},
				"description": "Sends an authentication request to create a new auth token. The token can be saved and later used for the PUT and DELETE /booking requests.\n\nThe API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Auth-CreateToken)."
			},
			"response": [
				{
					"name": "Auth Request",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "27"
						},
						{
							"key": "Etag",
							"value": "W/\"1b-pS/qtEh6/2yBZQjdBbT0fzsO3QY\""
						},
						{
							"key": "Date",
							"value": "Tue, 18 Jan 2022 16:27:03 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"token\": \"7d7de4d5449d888\"\n}"
				}
			]
		},
		{
			"name": "Create Booking - JSON",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(`=== ${pm.info.requestName}: START Pre-req ===`)\r",
							"\r",
							"/*\r",
							"function formatDate(date) {\r",
							"    let yourDate = new Date(date);\r",
							"    yourDate.toISOString().split('T')[0];\r",
							"    const offset = yourDate.getTimezoneOffset();\r",
							"    yourDate = new Date(yourDate.getTime() - (offset*60000));\r",
							"    return yourDate.toISOString().split('T')[0];\r",
							"};\r",
							"*/\r",
							"\r",
							"/*\r",
							"let util = pm.collectionVariables.get(\"utilityclass\");\r",
							"console.log(\"Create Booking: \" + util );\r",
							"console.log(\"utililityclasss name: \" + util.constructor.name);\r",
							"*/\r",
							"\r",
							"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"console.log(\"firstname: \" + pm.collectionVariables.get(\"firstname\"));\r",
							"\r",
							"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
							"console.log(\"lastname: \" + pm.collectionVariables.get(\"lastname\"));\r",
							"\r",
							"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomInt}}'));\r",
							"console.log(\"totalprice: \" + pm.collectionVariables.get(\"totalprice\"));\r",
							"\r",
							"var boolVal = pm.variables.replaceIn('{{$randomBoolean}}');\r",
							"console.log(\"boolVal: \" + boolVal);\r",
							"\r",
							"pm.collectionVariables.set(\"depositpaid\", boolVal );\r",
							"console.log(\"depositpaid: \" + pm.collectionVariables.get(\"depositpaid\"));\r",
							"\r",
							"/*\r",
							"pm.collectionVariables.set(\"checkin\", pm.variables.replaceIn('{{$randomDatePast}}'));\r",
							"console.log(\"checkin: \" + pm.collectionVariables.get(\"checkin\"));\r",
							"*/\r",
							"/*\r",
							"pm.collectionVariables.set(\"checkin\", formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
							"*/\r",
							"pm.collectionVariables.set(\"checkin\", util.formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
							"console.log(\"checkin: \" + pm.collectionVariables.get(\"checkin\"));\r",
							"\r",
							"\r",
							"pm.collectionVariables.set(\"checkout\", util.formatDate(pm.variables.replaceIn('{{$randomDateFuture}}')));\r",
							"console.log(\"checkout: \" + pm.collectionVariables.get(\"checkout\"));\r",
							"\r",
							"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomNoun}}'));\r",
							"console.log(\"additionalneeds: \" + pm.collectionVariables.get(\"additionalneeds\"));\r",
							"\r",
							"console.log(`=== ${pm.info.requestName}: END Pre-req ===`)\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(`=== ${pm.info.requestName}: START Tests ===`)\r",
							"\r",
							"pm.test(`#TEST: ${pm.info.requestName}: Status code is 200`, function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = {};\r",
							"\r",
							"pm.test(`#TEST: ${pm.info.requestName}: JSON response data validation`, () => {\r",
							"    try {\r",
							"        /*\r",
							"        pm.expect(pm.response.text()).to.not.eql('');\r",
							"        jsonData = pm.response.json();\r",
							"        */\r",
							"        pm.response.to.be.ok;\r",
							"        pm.response.to.be.withBody;\r",
							"        pm.response.to.be.json;\r",
							"        jsonData = pm.response.json();\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(`${pm.info.requestName}: JSON response data validation failed! ` + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"// JSON schema validation\r",
							"const schema = JSON.parse(pm.collectionVariables.get(\"BOOKING_JSON_SCHEMA\"));\r",
							"\r",
							"/*\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"bookingid\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"booking\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"firstname\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"lastname\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"totalprice\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"depositpaid\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"bookingdates\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"checkin\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"checkout\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"checkin\",\r",
							"            \"checkout\"\r",
							"          ]\r",
							"        },\r",
							"        \"additionalneeds\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"firstname\",\r",
							"        \"lastname\",\r",
							"        \"totalprice\",\r",
							"        \"depositpaid\",\r",
							"        \"bookingdates\",\r",
							"        \"additionalneeds\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"bookingid\",\r",
							"    \"booking\"\r",
							"  ]\r",
							"}\r",
							"*/\r",
							"pm.test(`#TEST: ${pm.info.requestName}: JSON response schema validation`, () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(`#TEST: ${pm.info.requestName}: Booking ID validation`, function () {\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"bookingid\");\r",
							"        pm.collectionVariables.set(\"bookingid\", jsonData.bookingid);\r",
							"        console.log(`${pm.info.requestName}: bookingid: ` + jsonData.bookingid);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(`${pm.info.requestName}: Booking ID validation failed! ` + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(`#TEST: ${pm.info.requestName}: First Name validation`, function () {\r",
							"    const firstname = pm.collectionVariables.get(\"firstname\");\r",
							"    try {\r",
							"        pm.expect(jsonData.booking).to.have.property(\"firstname\", firstname);\r",
							"        console.log(`${pm.info.requestName}: firstname: ` + jsonData.booking.firstname);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(`${pm.info.requestName}: First Name validation failed! ` + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(`#TEST: ${pm.info.requestName}: Last Name validation`, function () {\r",
							"    const lastname = pm.collectionVariables.get(\"lastname\");\r",
							"    try {\r",
							"        pm.expect(jsonData.booking).to.have.property(\"lastname\", lastname);\r",
							"        console.log(`${pm.info.requestName}: lastname: ` + jsonData.booking.lastname);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(`${pm.info.requestName}: Last Name validation failed! ` + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(`#TEST: ${pm.info.requestName}: Total Price validation`, function () {\r",
							"    const totalprice = Number.parseInt(pm.collectionVariables.get(\"totalprice\"));\r",
							"    try {\r",
							"        pm.expect(jsonData.booking).to.have.property(\"totalprice\", totalprice);\r",
							"        console.log(`${pm.info.requestName}: totalprice: ` + jsonData.booking.totalprice);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(`${pm.info.requestName}: Total Price validation failed! ` + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(`#TEST: ${pm.info.requestName}: Deposit Paid validation`, function () {\r",
							"    const depositpaid = pm.collectionVariables.get(\"depositpaid\");\r",
							"    try {\r",
							"        //var boolVal = JSON.parse(depositpaid);\r",
							"        var boolVal = depositpaid === \"true\";\r",
							"        console.log(`${pm.info.requestName}: collectionVariables depositpaid: ` + depositpaid)\r",
							"        console.log(`${pm.info.requestName}: depositpaid boolVal: ` + boolVal)\r",
							"        pm.expect(jsonData.booking).to.have.property(\"depositpaid\", boolVal);\r",
							"  \r",
							"/*\r",
							"        // alternative way to validate\r",
							"        pm.expect(jsonData.booking).has.ownProperty(\"depositpaid\");\r",
							"        pm.expect(jsonData.booking.depositpaid.toString()).eql(depositpaid)\r",
							"*/\r",
							"        console.log(`${pm.info.requestName}: depositpaid: ` + jsonData.booking.depositpaid);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(`${pm.info.requestName}: Deposit Paid validation failed! ` + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(`#TEST: ${pm.info.requestName}: Additional Needs validation`, function () {\r",
							"    const additionalneeds = pm.collectionVariables.get(\"additionalneeds\");\r",
							"    try {\r",
							"        pm.expect(jsonData.booking).to.have.property(\"additionalneeds\", additionalneeds);\r",
							"        console.log(`${pm.info.requestName}: additionalneeds: ` + jsonData.booking.additionalneeds);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(`${pm.info.requestName}: Additional Needs validation failed! ` + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(`#TEST: ${pm.info.requestName}: Checkin Date validation`, function () {\r",
							"    const checkin = pm.collectionVariables.get(\"checkin\");\r",
							"    try {\r",
							"        pm.expect(jsonData.booking.bookingdates).to.have.property(\"checkin\", checkin);\r",
							"        console.log(`${pm.info.requestName}: checkin: ` + jsonData.booking.bookingdates.checkin);\r",
							"        console.log(`${pm.info.requestName}: collectionVariables checkin: ` + checkin);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(`${pm.info.requestName}: Checkin Date validation failed! ` + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(`#TEST: ${pm.info.requestName}: Checkout Date validation`, function () {\r",
							"    const checkout = pm.collectionVariables.get(\"checkout\");\r",
							"    try {\r",
							"        pm.expect(jsonData.booking.bookingdates).to.have.property(\"checkout\", checkout);\r",
							"        console.log(`${pm.info.requestName}: checkout: ` + jsonData.booking.bookingdates.checkout);\r",
							"        console.log(`${pm.info.requestName}: collectionVariables checkout: ` + checkout);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(`${pm.info.requestName}: Checkout Date validation failed! ` + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"console.log(`=== ${pm.info.requestName}: END Tests ===`)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : {{depositpaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{create_booking_json_url}}",
					"host": [
						"{{create_booking_json_url}}"
					]
				},
				"description": "Sends a create booking request using JSON format. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-CreateBooking)."
			},
			"response": [
				{
					"name": "Create Booking - JSON",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Lula\",\r\n    \"lastname\" : \"Morissette\",\r\n    \"totalprice\" : 308,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2021-04-19\",\r\n        \"checkout\" : \"2022-09-26\"\r\n    },\r\n    \"additionalneeds\" : \"sensor\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "199"
						},
						{
							"key": "Etag",
							"value": "W/\"c7-NWl+1z3CXaSjSq/e8mwSBcPzEX4\""
						},
						{
							"key": "Date",
							"value": "Thu, 24 Feb 2022 08:28:22 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\n    \"bookingid\": 25,\n    \"booking\": {\n        \"firstname\": \"Lula\",\n        \"lastname\": \"Morissette\",\n        \"totalprice\": 308,\n        \"depositpaid\": false,\n        \"bookingdates\": {\n            \"checkin\": \"2021-04-19\",\n            \"checkout\": \"2022-09-26\"\n        },\n        \"additionalneeds\": \"sensor\"\n    }\n}"
				},
				{
					"name": "Create Booking (Mock) - JSON",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Eric\",\r\n    \"lastname\" : \"Walsh\",\r\n    \"totalprice\" : 551,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2021-07-06\",\r\n        \"checkout\" : \"2022-07-12\"\r\n    },\r\n    \"additionalneeds\" : \"circuit\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/mock/json/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"json",
								"booking"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "194"
						},
						{
							"key": "Etag",
							"value": "W/\"c2-xAofGaLoTm6ReXI8SVntrHcN7QA\""
						},
						{
							"key": "Date",
							"value": "Wed, 19 Jan 2022 09:51:55 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"bookingid\": 34,\n    \"booking\": {\n        \"firstname\": \"Eric\",\n        \"lastname\": \"Walsh\",\n        \"totalprice\": 551,\n        \"depositpaid\": true,\n        \"bookingdates\": {\n            \"checkin\": \"2021-07-06\",\n            \"checkout\": \"2022-07-12\"\n        },\n        \"additionalneeds\": \"circuit\"\n    }\n}"
				}
			]
		},
		{
			"name": "Update Booking - JSON",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/*\r",
							"function formatDate(date) {\r",
							"    let yourDate = new Date(date);\r",
							"    yourDate.toISOString().split('T')[0];\r",
							"    const offset = yourDate.getTimezoneOffset();\r",
							"    yourDate = new Date(yourDate.getTime() - (offset*60000));\r",
							"    return yourDate.toISOString().split('T')[0];\r",
							"};\r",
							"*/\r",
							"\r",
							"/*\r",
							"let util = pm.collectionVariables.get(\"utilityclass\");\r",
							"console.log(\"Create Booking: \" + util );\r",
							"console.log(\"utililityclasss name: \" + util.constructor.name);\r",
							"*/\r",
							"\r",
							"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"console.log(\"firstname: \" + pm.collectionVariables.get(\"firstname\"));\r",
							"\r",
							"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
							"console.log(\"lastname: \" + pm.collectionVariables.get(\"lastname\"));\r",
							"\r",
							"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomInt}}'));\r",
							"console.log(\"totalprice: \" + pm.collectionVariables.get(\"totalprice\"));\r",
							"\r",
							"var boolVal = pm.variables.replaceIn('{{$randomBoolean}}');\r",
							"console.log(\"boolVal: \" + boolVal);\r",
							"\r",
							"pm.collectionVariables.set(\"depositpaid\", boolVal );\r",
							"console.log(\"depositpaid: \" + pm.collectionVariables.get(\"depositpaid\"));\r",
							"\r",
							"/*\r",
							"pm.collectionVariables.set(\"checkin\", pm.variables.replaceIn('{{$randomDatePast}}'));\r",
							"console.log(\"checkin: \" + pm.collectionVariables.get(\"checkin\"));\r",
							"*/\r",
							"/*\r",
							"pm.collectionVariables.set(\"checkin\", formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
							"*/\r",
							"pm.collectionVariables.set(\"checkin\", util.formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
							"console.log(\"checkin: \" + pm.collectionVariables.get(\"checkin\"));\r",
							"\r",
							"\r",
							"pm.collectionVariables.set(\"checkout\", util.formatDate(pm.variables.replaceIn('{{$randomDateFuture}}')));\r",
							"console.log(\"checkout: \" + pm.collectionVariables.get(\"checkout\"));\r",
							"\r",
							"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomNoun}}'));\r",
							"console.log(\"additionalneeds: \" + pm.collectionVariables.get(\"additionalneeds\"));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"#TEST: Update Booking - JSON: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = {};\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - JSON: JSON response data validation\", () => {\r",
							"    try {\r",
							"        /*\r",
							"        pm.expect(pm.response.text()).to.not.eql('');\r",
							"        jsonData = pm.response.json();\r",
							"        */\r",
							"        pm.response.to.be.ok;\r",
							"        pm.response.to.be.withBody;\r",
							"        pm.response.to.be.json;\r",
							"        jsonData = pm.response.json();\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"JSON response data validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"// JSON schema validation\r",
							"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKING_JSON_SCHEMA\"));\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - JSON: JSON response schema validation\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - JSON: First Name validation\", function () {\r",
							"    const firstname = pm.collectionVariables.get(\"firstname\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"firstname\", firstname);\r",
							"        console.log(\"firstname: \" + jsonData.firstname);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"First Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - JSON: Last Name validation\", function () {\r",
							"    const lastname = pm.collectionVariables.get(\"lastname\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"lastname\", lastname);\r",
							"        console.log(\"lastname: \" + jsonData.lastname);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Last Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - JSON: Total Price validation\", function () {\r",
							"    const totalprice = Number.parseInt(pm.collectionVariables.get(\"totalprice\"));\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"totalprice\", totalprice);\r",
							"        console.log(\"totalprice: \" + jsonData.totalprice);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Total Price validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - JSON: Deposit Paid validation\", function () {\r",
							"    const depositpaid = pm.collectionVariables.get(\"depositpaid\");\r",
							"    try {\r",
							"        //var boolVal = JSON.parse(depositpaid);\r",
							"        var boolVal = depositpaid === \"true\";\r",
							"        console.log(\"collectionVariables depositpaid: \" + depositpaid)\r",
							"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
							"        pm.expect(jsonData).to.have.property(\"depositpaid\", boolVal);\r",
							"  \r",
							"/*\r",
							"        // alternative way to validate\r",
							"        pm.expect(jsonData.booking).has.ownProperty(\"depositpaid\");\r",
							"        pm.expect(jsonData.booking.depositpaid.toString()).eql(depositpaid)\r",
							"*/\r",
							"        console.log(\"depositpaid: \" + jsonData.depositpaid);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Deposit Paid validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - JSON: Additional Needs validation\", function () {\r",
							"    const additionalneeds = pm.collectionVariables.get(\"additionalneeds\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"additionalneeds\", additionalneeds);\r",
							"        console.log(\"additionalneeds: \" + jsonData.additionalneeds);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Additional Needs validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - JSON: Checkin Date validation\", function () {\r",
							"    const checkin = pm.collectionVariables.get(\"checkin\");\r",
							"    try {\r",
							"        pm.expect(jsonData.bookingdates).to.have.property(\"checkin\", checkin);\r",
							"        console.log(\"checkin: \" + jsonData.bookingdates.checkin);\r",
							"        console.log(\"collectionVariables checkin: \" + checkin);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkin Date validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - JSON: Checkout Date validation\", function () {\r",
							"    const checkout = pm.collectionVariables.get(\"checkout\");\r",
							"    try {\r",
							"        pm.expect(jsonData.bookingdates).to.have.property(\"checkout\", checkout);\r",
							"        console.log(\"checkout: \" + jsonData.bookingdates.checkout);\r",
							"        console.log(\"collectionVariables checkout: \" + checkout);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkout Date validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token_key}}",
						"description": "Authorization token returned by Auth request",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : {{depositpaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{update_booking_json_url}}/:id",
					"host": [
						"{{update_booking_json_url}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookingid}}",
							"description": "Booking ID of booking record to update"
						}
					]
				},
				"description": "Sends an update booking request using JSON format. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-UpdateBooking)."
			},
			"response": [
				{
					"name": "Update Booking - JSON",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token=abc123",
								"description": "Authorization token returned by Auth request",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : {{depositpaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Booking ID of booking record to update"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "175"
						},
						{
							"key": "Etag",
							"value": "W/\"af-rp4q6tHcg705fHS9dbh3joiQJCo\""
						},
						{
							"key": "Date",
							"value": "Tue, 01 Mar 2022 12:40:45 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\n    \"firstname\": \"Frederick\",\n    \"lastname\": \"Dietrich\",\n    \"totalprice\": 653,\n    \"depositpaid\": false,\n    \"bookingdates\": {\n        \"checkin\": \"2021-04-23\",\n        \"checkout\": \"2022-06-02\"\n    },\n    \"additionalneeds\": \"matrix\"\n}"
				},
				{
					"name": "Update Booking (Mock) - JSON",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token=abc123",
								"description": "Authorization token returned by Auth request",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Frederick\",\r\n    \"lastname\" : \"Dietrich\",\r\n    \"totalprice\" : 653,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2021-04-23\",\r\n        \"checkout\" : \"2022-06-02\"\r\n    },\r\n    \"additionalneeds\" : \"matrix\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/mock/json/fullupdate/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"json",
								"fullupdate",
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Booking ID of booking record to update"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "175"
						},
						{
							"key": "Etag",
							"value": "W/\"af-rp4q6tHcg705fHS9dbh3joiQJCo\""
						},
						{
							"key": "Date",
							"value": "Tue, 01 Mar 2022 12:40:45 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\n    \"firstname\": \"Frederick\",\n    \"lastname\": \"Dietrich\",\n    \"totalprice\": 653,\n    \"depositpaid\": false,\n    \"bookingdates\": {\n        \"checkin\": \"2021-04-23\",\n        \"checkout\": \"2022-06-02\"\n    },\n    \"additionalneeds\": \"matrix\"\n}"
				}
			]
		},
		{
			"name": "Partial Update Booking - JSON",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/*\r",
							"function formatDate(date) {\r",
							"    let yourDate = new Date(date);\r",
							"    yourDate.toISOString().split('T')[0];\r",
							"    const offset = yourDate.getTimezoneOffset();\r",
							"    yourDate = new Date(yourDate.getTime() - (offset*60000));\r",
							"    return yourDate.toISOString().split('T')[0];\r",
							"};\r",
							"*/\r",
							"\r",
							"/*\r",
							"let util = pm.collectionVariables.get(\"utilityclass\");\r",
							"console.log(\"Create Booking: \" + util );\r",
							"console.log(\"utililityclasss name: \" + util.constructor.name);\r",
							"*/\r",
							"\r",
							"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"console.log(\"firstname: \" + pm.collectionVariables.get(\"firstname\"));\r",
							"\r",
							"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
							"console.log(\"lastname: \" + pm.collectionVariables.get(\"lastname\"));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"#TEST: Partial Update Booking - JSON: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = {};\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - JSON: JSON response data validation\", () => {\r",
							"    try {\r",
							"        /*\r",
							"        pm.expect(pm.response.text()).to.not.eql('');\r",
							"        jsonData = pm.response.json();\r",
							"        */\r",
							"        pm.response.to.be.ok;\r",
							"        pm.response.to.be.withBody;\r",
							"        pm.response.to.be.json;\r",
							"        jsonData = pm.response.json();\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"JSON response data validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"// JSON schema validation\r",
							"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKING_JSON_SCHEMA\"));\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - JSON: JSON response schema validation\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - JSON: First Name validation\", function () {\r",
							"    const firstname = pm.collectionVariables.get(\"firstname\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"firstname\", firstname);\r",
							"        console.log(\"firstname: \" + jsonData.firstname);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"First Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - JSON: Last Name validation\", function () {\r",
							"    const lastname = pm.collectionVariables.get(\"lastname\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"lastname\", lastname);\r",
							"        console.log(\"lastname: \" + jsonData.lastname);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Last Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - JSON: Total Price validation\", function () {\r",
							"    const totalprice = Number.parseInt(pm.collectionVariables.get(\"totalprice\"));\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"totalprice\", totalprice);\r",
							"        console.log(\"totalprice: \" + jsonData.totalprice);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Total Price validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - JSON: Deposit Paid validation\", function () {\r",
							"    const depositpaid = pm.collectionVariables.get(\"depositpaid\");\r",
							"    try {\r",
							"        //var boolVal = JSON.parse(depositpaid);\r",
							"        var boolVal = depositpaid === \"true\";\r",
							"        console.log(\"collectionVariables depositpaid: \" + depositpaid)\r",
							"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
							"        pm.expect(jsonData).to.have.property(\"depositpaid\", boolVal);\r",
							"  \r",
							"/*\r",
							"        // alternative way to validate\r",
							"        pm.expect(jsonData.booking).has.ownProperty(\"depositpaid\");\r",
							"        pm.expect(jsonData.booking.depositpaid.toString()).eql(depositpaid)\r",
							"*/\r",
							"        console.log(\"depositpaid: \" + jsonData.depositpaid);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Deposit Paid validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - JSON: Additional Needs validation\", function () {\r",
							"    const additionalneeds = pm.collectionVariables.get(\"additionalneeds\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"additionalneeds\", additionalneeds);\r",
							"        console.log(\"additionalneeds: \" + jsonData.additionalneeds);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Additional Needs validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - JSON: Checkin Date validation\", function () {\r",
							"    const checkin = pm.collectionVariables.get(\"checkin\");\r",
							"    try {\r",
							"        pm.expect(jsonData.bookingdates).to.have.property(\"checkin\", checkin);\r",
							"        console.log(\"checkin: \" + jsonData.bookingdates.checkin);\r",
							"        console.log(\"collectionVariables checkin: \" + checkin);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkin Date validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - JSON: Checkout Date validation\", function () {\r",
							"    const checkout = pm.collectionVariables.get(\"checkout\");\r",
							"    try {\r",
							"        pm.expect(jsonData.bookingdates).to.have.property(\"checkout\", checkout);\r",
							"        console.log(\"checkout: \" + jsonData.bookingdates.checkout);\r",
							"        console.log(\"collectionVariables checkout: \" + checkout);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkout Date validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{update_booking_json_url}}/:id",
					"host": [
						"{{update_booking_json_url}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookingid}}",
							"description": "Booking ID of booking record to update"
						}
					]
				},
				"description": "Sends a partial update booking request using JSON format. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-PartialUpdateBooking)."
			},
			"response": [
				{
					"name": "Partial Update Booking - JSON",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"FirstName\",\r\n    \"lastname\" : \"LastName\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/:id",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Booking ID of booking record to update"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "174"
						},
						{
							"key": "Etag",
							"value": "W/\"ae-PNzOs1BICgzekEvBeCbJ87lHLmg\""
						},
						{
							"key": "Date",
							"value": "Wed, 02 Mar 2022 13:23:59 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\n    \"firstname\": \"Jeromy\",\n    \"lastname\": \"Powlowski\",\n    \"totalprice\": 621,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"2022-01-11\",\n        \"checkout\": \"2022-07-16\"\n    },\n    \"additionalneeds\": \"protocol\"\n}"
				},
				{
					"name": "Partial Update Booking (Mock) - JSON",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/mock/json/partialupdate/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"json",
								"partialupdate",
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingid}}",
									"description": "Booking ID of booking record to update"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "174"
						},
						{
							"key": "Etag",
							"value": "W/\"ae-PNzOs1BICgzekEvBeCbJ87lHLmg\""
						},
						{
							"key": "Date",
							"value": "Wed, 02 Mar 2022 13:23:59 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"firstname\": \"Jeromy\",\n    \"lastname\": \"Powlowski\",\n    \"totalprice\": 621,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"2022-01-11\",\n        \"checkout\": \"2022-07-16\"\n    },\n    \"additionalneeds\": \"protocol\"\n}"
				}
			]
		},
		{
			"name": "Get Booking - JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"#TEST: Get Booking Request: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsondata = {};\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - JSON: JSON response data validation\", () => {\r",
							"    try {\r",
							"        pm.response.to.be.ok.\r",
							"            and.to.be.withBody.\r",
							"            and.to.be.json;\r",
							"\r",
							"\r",
							"        jsonData = pm.response.json();\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"JSON response data validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"// JSON schema validation\r",
							"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKING_JSON_SCHEMA\"));\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - JSON: JSON response schema validation\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - JSON: First Name validation\", function () {\r",
							"    const firstname = pm.collectionVariables.get(\"firstname\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"firstname\", firstname);\r",
							"        console.log(\"firstname: \" + jsonData.firstname);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"First Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - JSON: Last Name validation\", function () {\r",
							"    const lastname = pm.collectionVariables.get(\"lastname\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"lastname\", lastname);\r",
							"        console.log(\"lastname: \" + jsonData.lastname);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Last Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - JSON: Total Price validation\", function () {\r",
							"    const totalprice = Number.parseInt(pm.collectionVariables.get(\"totalprice\"));\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"totalprice\", totalprice);\r",
							"        console.log(\"totalprice: \" + jsonData.totalprice);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Total Price validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - JSON: Deposit Paid validation\", function () {\r",
							"    const depositpaid = pm.collectionVariables.get(\"depositpaid\");\r",
							"    try {\r",
							"        //var boolVal = JSON.parse(depositpaid);\r",
							"        var boolVal = depositpaid == \"true\";\r",
							"        console.log(\"collectionVariables depositpaid: \" + depositpaid)\r",
							"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
							"        pm.expect(jsonData).to.have.property(\"depositpaid\", boolVal);\r",
							"  \r",
							"/*\r",
							"        // alternative way to validate\r",
							"        pm.expect(jsonData).has.ownProperty(\"depositpaid\");\r",
							"        pm.expect(jsonData.depositpaid.toString()).eql(depositpaid)\r",
							"*/\r",
							"        console.log(\"depositpaid: \" + jsonData.depositpaid);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Deposit Paid validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - JSON: Additional Needs validation\", function () {\r",
							"    const additionalneeds = pm.collectionVariables.get(\"additionalneeds\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"additionalneeds\", additionalneeds);\r",
							"        console.log(\"additionalneeds: \" + jsonData.additionalneeds);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Additional Needs validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - JSON: Checkin Date validation\", function () {\r",
							"    const checkin = pm.collectionVariables.get(\"checkin\");\r",
							"    try {\r",
							"        pm.expect(jsonData.bookingdates).to.have.property(\"checkin\", checkin);\r",
							"        console.log(\"checkin: \" + jsonData.bookingdates.checkin);\r",
							"        console.log(\"collectionVariables checkin: \" + checkin);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkin Date validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - JSON: Checkout Date validation\", function () {\r",
							"    const checkout = pm.collectionVariables.get(\"checkout\");\r",
							"    try {\r",
							"        pm.expect(jsonData.bookingdates).to.have.property(\"checkout\", checkout);\r",
							"        console.log(\"checkout: \" + jsonData.bookingdates.checkout);\r",
							"        console.log(\"collectionVariables checkout: \" + checkout);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkout Date validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{get_booking_json_url}}/:id",
					"host": [
						"{{get_booking_json_url}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookingid}}",
							"description": "Booking ID"
						}
					]
				},
				"description": "Sends a get booking request to the Restfulbooker API to retrieve a booking record based on the booking ID. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-GetBooking)."
			},
			"response": [
				{
					"name": "Get Booking - JSON",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingid}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "172"
						},
						{
							"key": "Etag",
							"value": "W/\"ac-cADWL4ZnGnhGBYUUO2+atwmrptA\""
						},
						{
							"key": "Date",
							"value": "Thu, 10 Feb 2022 20:16:18 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"firstname\": \"Miguel\",\n    \"lastname\": \"Rohan\",\n    \"totalprice\": 206,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"2021-04-17\",\n        \"checkout\": \"2022-10-15\"\n    },\n    \"additionalneeds\": \"hard drive\"\n}"
				},
				{
					"name": "Get Booking (Mock) - JSON",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/mock/json/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"json",
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingid}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "173"
						},
						{
							"key": "Etag",
							"value": "W/\"ad-ntXtI/QtZ2GCckcWHlHWLXBfv90\""
						},
						{
							"key": "Date",
							"value": "Thu, 10 Feb 2022 19:59:55 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"firstname\": \"Christob\",\n    \"lastname\": \"Brown\",\n    \"totalprice\": 111,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"2018-01-01\",\n        \"checkout\": \"2019-01-01\"\n    },\n    \"additionalneeds\": \"Breakfast\"\n}"
				}
			]
		},
		{
			"name": "Delete Booking - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"#TEST: Delete Booking - Success - Request: Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Delete Booking - Success - Request: Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
							"});\r",
							"\r",
							"// send a request to confirm that the booking record was successfully deleted.\r",
							"const getBookingReq = {\r",
							"    url: pm.variables.replaceIn('{{get_booking_json_url}}') + \"/\" + pm.collectionVariables.get(\"bookingid\"),\r",
							"    //\"url\": \"https://restful-booker.herokuapp.com/booking/\" + booking.bookingid,\r",
							"    method: \"GET\",\r",
							"    header: {\r",
							"        Accept: \"application/json\"\r",
							"    }\r",
							"};\r",
							"\r",
							"console.log(\"getBookingReq: \" + JSON.stringify(getBookingReq));\r",
							"\r",
							"\r",
							"pm.sendRequest(getBookingReq, (error, response) => { \r",
							"        if (error) {\r",
							"            console.error(error);\r",
							"        }\r",
							"\r",
							"        //console.log(\"response: \" + response);\r",
							"\r",
							"\r",
							"        pm.test(\"#TEST: Delete Booking - Success - Request: Confirm Booking record has been deleted\", function () {\r",
							"            pm.expect(error).to.equal(null);\r",
							"            pm.expect(response).to.have.property('code', 404);\r",
							"            pm.expect(response).to.have.property('status', 'Not Found');\r",
							"        });\r",
							"});\r",
							"\r",
							"\r",
							"/*\r",
							"pm.test(\"#TEST: Delete Booking - Success - Request: Confirm Booking record has been deleted\", function () {\r",
							"    pm.sendRequest(getBookingReq, (error, response) => { \r",
							"            if (error) {\r",
							"                console.error(error);\r",
							"            }\r",
							"\r",
							"            console.log(\"response: \" + response);\r",
							"\r",
							"\r",
							"                pm.expect(error).to.equal(null);\r",
							"                pm.expect(response).to.have.property('code', 404);\r",
							"                pm.expect(response).to.have.property('status', 'Not Found');\r",
							"    });\r",
							"});\r",
							"*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{delete_booking_success_url}}/:id",
					"host": [
						"{{delete_booking_success_url}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookingid}}",
							"description": "Booking ID"
						}
					]
				},
				"description": "Sends a delete booking request to the Restfulbooker API to delete a booking record based on the booking ID. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-DeleteBooking)."
			},
			"response": [
				{
					"name": "Delete Booking - Success",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/mock/del/success/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"del",
								"success",
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingid}}",
									"description": "Booking ID"
								}
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/plain; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "7"
						},
						{
							"key": "Etag",
							"value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
						},
						{
							"key": "Date",
							"value": "Sun, 27 Feb 2022 16:07:57 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "Created"
				}
			]
		},
		{
			"name": "Delete Booking - Non Existent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"#TEST: Delete Booking - Non Existent - Request: Status code is 405\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"});\r",
							"\r",
							"/*\r",
							"pm.test(\"#TEST: Delete Booking - Non Existent - Request\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
							"});\r",
							"*/\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token_key}}",
						"description": "Auth token as a cookie",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{delete_booking_fail_url}}/:id",
					"host": [
						"{{delete_booking_fail_url}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "123456789",
							"description": "Dummy Booking ID"
						}
					]
				},
				"description": "Sends a delete booking request to the Restfulbooker API to delete a booking record based on the booking ID. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-DeleteBooking)."
			},
			"response": [
				{
					"name": "Delete Booking - Non Existent",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token=abc123",
								"description": "Auth token as a cookie",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/mock/del/fail/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"del",
								"fail",
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "123456789",
									"description": "Dummy Booking ID"
								}
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/plain; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "7"
						},
						{
							"key": "Etag",
							"value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
						},
						{
							"key": "Date",
							"value": "Sun, 27 Feb 2022 16:07:57 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "Created"
				}
			]
		},
		{
			"name": "Create Booking - XML",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"#TEST: Create Booking - XML: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//let jsonData = '';\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - XML: XML response data validation\", () => {\r",
							"    try {\r",
							"        /*\r",
							"        pm.expect(pm.response.text()).to.not.eql('');\r",
							"        jsonData = pm.response.json();\r",
							"        */\r",
							"        pm.response.to.be.ok;\r",
							"        pm.response.to.be.withBody;\r",
							"        \r",
							"        console.log(pm.response.text());\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"XML response data validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"//const cheerio = require('cheerio');\r",
							"const $ = cheerio.load(pm.response.text(), {\r",
							"    ignoreWhitespace: true,\r",
							"    xmlMode: true\r",
							"    });\r",
							"\r",
							"\r",
							"// Render XML\r",
							"console.log($.xml());\r",
							"\r",
							"// JSON schema validation\r",
							"var jsonData = xml2Json($.xml());\r",
							"\r",
							"console.log(\"xml2JSON: \" + JSON.stringify(jsonData));\r",
							"\r",
							"const schema = JSON.parse(pm.collectionVariables.get(\"BOOKING_XML2JSON_SCHEMA\"));\r",
							"\r",
							"// XML -> JSON schema validation. Use this since there is no direct way to validate XML schema in postman\r",
							"pm.test(\"#TEST: Create Booking - XML: XML to JSON response schema validation\", () => {\r",
							"    try {\r",
							"        //tv4.validate(jsonData, schema);\r",
							"        let Ajv = require('ajv');\r",
							"        ajv = new Ajv({logger: console, allErrors: true});\r",
							"        pm.expect(ajv.validate(schema, jsonData), JSON.stringify(ajv.errors)).to.be.true;\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"XML to JSON schema validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - XML: Booking ID validation\", function () {\r",
							"    try {\r",
							"\r",
							"        // Get <created-booking> node\r",
							"        //let booking = $('created-booking');\r",
							"        let bookingid = $(\"bookingid\");\r",
							"\r",
							"        pm.expect(bookingid.text()).to.be.not.empty;\r",
							"\r",
							"        pm.collectionVariables.set(\"bookingid\", bookingid.text());\r",
							"        console.log(\"bookingid: \" + bookingid.text());\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Booking ID validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - XML: First Name validation\", function () {\r",
							"    try {\r",
							"        let firstname = $(\"firstname\");\r",
							"        console.log(\"firstname: \" + firstname.text());\r",
							"\r",
							"        pm.expect(firstname.text()).to.be.eql(pm.collectionVariables.get(\"firstname\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"First Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - XML: Last Name validation\", function () {\r",
							"    try {\r",
							"        let lastname = $(\"lastname\");\r",
							"        console.log(\"lastname: \" + lastname.text());\r",
							"\r",
							"        pm.expect(lastname.text()).to.be.eql(pm.collectionVariables.get(\"lastname\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Last Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - XML: Total Price validation\", function () {\r",
							"    try {\r",
							"        let totalprice = $(\"totalprice\");\r",
							"        console.log(\"totalprice: \" + totalprice.text());\r",
							"\r",
							"        pm.expect(totalprice.text()).to.be.eql(pm.collectionVariables.get(\"totalprice\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Total Price validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - XML: Deposit Paid validation\", function () {\r",
							"    const depositpaidVal = pm.collectionVariables.get(\"depositpaid\");\r",
							"    try {\r",
							"        //var boolVal = JSON.parse(depositpaid);\r",
							"        var boolVal = depositpaidVal === \"true\";\r",
							"        console.log(\"collectionVariables depositpaid: \" + depositpaidVal);\r",
							"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
							"  \r",
							"        let depositpaid = $(\"depositpaid\");\r",
							"        console.log(\"depositpaid: \" + depositpaid.text());\r",
							"\r",
							"        pm.expect(depositpaid.text()).to.be.eql(pm.collectionVariables.get(\"depositpaid\"));\r",
							"        //pm.expect(depositpaid.text()).to.be.eql(boolVal);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Deposit Paid validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - XML: Checkin validation\", function () {\r",
							"    try {\r",
							"        let checkin = $(\"checkin\");\r",
							"        console.log(\"checkin: \" + checkin.text());\r",
							"\r",
							"        pm.expect(checkin.text()).to.be.eql(pm.collectionVariables.get(\"checkin\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkin validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - XML: Checkout validation\", function () {\r",
							"    try {\r",
							"        let checkout = $(\"checkout\");\r",
							"        console.log(\"checkout: \" + checkout.text());\r",
							"\r",
							"        pm.expect(checkout.text()).to.be.eql(pm.collectionVariables.get(\"checkout\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkout validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - XML: Additional needs validation\", function () {\r",
							"    try {\r",
							"        let additionalneeds = $(\"additionalneeds\");\r",
							"        console.log(\"additionalneeds: \" + additionalneeds.text());\r",
							"\r",
							"        pm.expect(additionalneeds.text()).to.be.eql(pm.collectionVariables.get(\"additionalneeds\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Additional needs validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"console.log(\"firstname: \" + pm.collectionVariables.get(\"firstname\"));\r",
							"\r",
							"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
							"console.log(\"lastname: \" + pm.collectionVariables.get(\"lastname\"));\r",
							"\r",
							"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomInt}}'));\r",
							"console.log(\"totalprice: \" + pm.collectionVariables.get(\"totalprice\"));\r",
							"\r",
							"var boolVal = pm.variables.replaceIn('{{$randomBoolean}}');\r",
							"console.log(\"boolVal: \" + boolVal);\r",
							"\r",
							"pm.collectionVariables.set(\"depositpaid\", boolVal );\r",
							"console.log(\"depositpaid: \" + pm.collectionVariables.get(\"depositpaid\"));\r",
							"\r",
							"/*\r",
							"pm.collectionVariables.set(\"checkin\", pm.variables.replaceIn('{{$randomDatePast}}'));\r",
							"console.log(\"checkin: \" + pm.collectionVariables.get(\"checkin\"));\r",
							"*/\r",
							"/*\r",
							"pm.collectionVariables.set(\"checkin\", formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
							"*/\r",
							"pm.collectionVariables.set(\"checkin\", util.formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
							"console.log(\"checkin: \" + pm.collectionVariables.get(\"checkin\"));\r",
							"\r",
							"\r",
							"pm.collectionVariables.set(\"checkout\", util.formatDate(pm.variables.replaceIn('{{$randomDateFuture}}')));\r",
							"console.log(\"checkout: \" + pm.collectionVariables.get(\"checkout\"));\r",
							"\r",
							"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomNoun}}'));\r",
							"console.log(\"additionalneeds: \" + pm.collectionVariables.get(\"additionalneeds\"));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "text/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<booking>\r\n    <firstname>{{firstname}}</firstname>\r\n    <lastname>{{lastname}}</lastname>\r\n    <totalprice>{{totalprice}}</totalprice>\r\n    <depositpaid>{{depositpaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\r\n</booking>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{create_booking_xml_url}}",
					"host": [
						"{{create_booking_xml_url}}"
					]
				},
				"description": "Sends a create booking request using XML format. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-CreateBooking)."
			},
			"response": [
				{
					"name": "Create Booking - XML",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<booking>\r\n    <firstname>Kim</firstname>\r\n    <lastname>Parker/lastname>\r\n    <totalprice>68</totalprice>\r\n    <depositpaid>true</depositpaid>\r\n    <bookingdates>\r\n        <checkin>2021-11-01</checkin>\r\n        <checkout>2022-11-13</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>firewall</additionalneeds>\r\n</booking>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "449"
						},
						{
							"key": "Etag",
							"value": "W/\"1c1-0rwkvO98FqdAmIc2ZAer2gWnFQY\""
						},
						{
							"key": "Date",
							"value": "Thu, 24 Feb 2022 08:37:59 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "<?xml version='1.0'?>\n<created-booking>\n    <bookingid>60</bookingid>\n    <booking>\n        <firstname>Kim</firstname>\n        <lastname>Parker</lastname>\n        <totalprice>68</totalprice>\n        <depositpaid>true</depositpaid>\n        <bookingdates>\n            <checkin>2021-11-01</checkin>\n            <checkout>2022-11-13</checkout>\n        </bookingdates>\n        <additionalneeds>firewall</additionalneeds>\n    </booking>\n</created-booking>"
				},
				{
					"name": "Create Booking (Mock) - XML",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<booking>\r\n    <firstname>Branson</firstname>\r\n    <lastname>Bauch</lastname>\r\n    <totalprice>888</totalprice>\r\n    <depositpaid>false</depositpaid>\r\n    <bookingdates>\r\n        <checkin>2021-04-02</checkin>\r\n        <checkout>2022-02-22</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>minibar,pool</additionalneeds>\r\n</booking>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/mock/xml/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"xml",
								"booking"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "456"
						},
						{
							"key": "Etag",
							"value": "W/\"1c8-aqPe7NmxJDHrQ1bots77HVQBgnk\""
						},
						{
							"key": "Date",
							"value": "Wed, 26 Jan 2022 14:17:12 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "<?xml version='1.0'?>\n<created-booking>\n    <bookingid>28</bookingid>\n    <booking>\n        <firstname>Branson</firstname>\n        <lastname>Bauch</lastname>\n        <totalprice>888</totalprice>\n        <depositpaid>false</depositpaid>\n        <bookingdates>\n            <checkin>2021-04-02</checkin>\n            <checkout>2022-02-22</checkout>\n        </bookingdates>\n        <additionalneeds>minibar,pool</additionalneeds>\n    </booking>\n</created-booking>"
				}
			]
		},
		{
			"name": "Update Booking - XML",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"#TEST: Update Booking - XML: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//let jsonData = '';\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - XML: XML response data validation\", () => {\r",
							"    try {\r",
							"        /*\r",
							"        pm.expect(pm.response.text()).to.not.eql('');\r",
							"        jsonData = pm.response.json();\r",
							"        */\r",
							"        pm.response.to.be.ok;\r",
							"        pm.response.to.be.withBody;\r",
							"        \r",
							"        console.log(pm.response.text());\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"XML response data validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"//const cheerio = require('cheerio');\r",
							"const $ = cheerio.load(pm.response.text(), {\r",
							"    ignoreWhitespace: true,\r",
							"    xmlMode: true\r",
							"    });\r",
							"\r",
							"\r",
							"// Render XML\r",
							"console.log($.xml());\r",
							"\r",
							"// JSON schema validation\r",
							"var jsonData = xml2Json($.xml());\r",
							"\r",
							"console.log(\"xml2JSON: \" + JSON.stringify(jsonData));\r",
							"\r",
							"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKING_XML_SCHEMA\"));\r",
							"\r",
							"// XML -> JSON schema validation. Use this since there is no direct way to validate XML schema in postman\r",
							"pm.test(\"#TEST: Update Booking - XML: XML to JSON response schema validation\", () => {\r",
							"    try {\r",
							"        //tv4.validate(jsonData, schema);\r",
							"        let Ajv = require('ajv');\r",
							"        ajv = new Ajv({logger: console, allErrors: true});\r",
							"        pm.expect(ajv.validate(schema, jsonData), JSON.stringify(ajv.errors)).to.be.true;\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"XML to JSON schema validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - XML: First Name validation\", function () {\r",
							"    try {\r",
							"        let firstname = $(\"firstname\");\r",
							"        console.log(\"firstname: \" + firstname.text());\r",
							"\r",
							"        pm.expect(firstname.text()).to.be.eql(pm.collectionVariables.get(\"firstname\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"First Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - XML: Last Name validation\", function () {\r",
							"    try {\r",
							"        let lastname = $(\"lastname\");\r",
							"        console.log(\"lastname: \" + lastname.text());\r",
							"\r",
							"        pm.expect(lastname.text()).to.be.eql(pm.collectionVariables.get(\"lastname\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Last Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - XML: Total Price validation\", function () {\r",
							"    try {\r",
							"        let totalprice = $(\"totalprice\");\r",
							"        console.log(\"totalprice: \" + totalprice.text());\r",
							"\r",
							"        pm.expect(totalprice.text()).to.be.eql(pm.collectionVariables.get(\"totalprice\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Total Price validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - XML: Deposit Paid validation\", function () {\r",
							"    const depositpaidVal = pm.collectionVariables.get(\"depositpaid\");\r",
							"    try {\r",
							"        //var boolVal = JSON.parse(depositpaid);\r",
							"        var boolVal = depositpaidVal === \"true\";\r",
							"        console.log(\"collectionVariables depositpaid: \" + depositpaidVal);\r",
							"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
							"  \r",
							"        let depositpaid = $(\"depositpaid\");\r",
							"        console.log(\"depositpaid: \" + depositpaid.text());\r",
							"\r",
							"        pm.expect(depositpaid.text()).to.be.eql(pm.collectionVariables.get(\"depositpaid\"));\r",
							"        //pm.expect(depositpaid.text()).to.be.eql(boolVal);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Deposit Paid validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - XML: Checkin validation\", function () {\r",
							"    try {\r",
							"        let checkin = $(\"checkin\");\r",
							"        console.log(\"checkin: \" + checkin.text());\r",
							"\r",
							"        pm.expect(checkin.text()).to.be.eql(pm.collectionVariables.get(\"checkin\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkin validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - XML: Checkout validation\", function () {\r",
							"    try {\r",
							"        let checkout = $(\"checkout\");\r",
							"        console.log(\"checkout: \" + checkout.text());\r",
							"\r",
							"        pm.expect(checkout.text()).to.be.eql(pm.collectionVariables.get(\"checkout\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkout validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - XML: Additional needs validation\", function () {\r",
							"    try {\r",
							"        let additionalneeds = $(\"additionalneeds\");\r",
							"        console.log(\"additionalneeds: \" + additionalneeds.text());\r",
							"\r",
							"        pm.expect(additionalneeds.text()).to.be.eql(pm.collectionVariables.get(\"additionalneeds\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Additional needs validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"console.log(\"firstname: \" + pm.collectionVariables.get(\"firstname\"));\r",
							"\r",
							"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
							"console.log(\"lastname: \" + pm.collectionVariables.get(\"lastname\"));\r",
							"\r",
							"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomInt}}'));\r",
							"console.log(\"totalprice: \" + pm.collectionVariables.get(\"totalprice\"));\r",
							"\r",
							"var boolVal = pm.variables.replaceIn('{{$randomBoolean}}');\r",
							"console.log(\"boolVal: \" + boolVal);\r",
							"\r",
							"pm.collectionVariables.set(\"depositpaid\", boolVal );\r",
							"console.log(\"depositpaid: \" + pm.collectionVariables.get(\"depositpaid\"));\r",
							"\r",
							"/*\r",
							"pm.collectionVariables.set(\"checkin\", pm.variables.replaceIn('{{$randomDatePast}}'));\r",
							"console.log(\"checkin: \" + pm.collectionVariables.get(\"checkin\"));\r",
							"*/\r",
							"/*\r",
							"pm.collectionVariables.set(\"checkin\", formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
							"*/\r",
							"pm.collectionVariables.set(\"checkin\", util.formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
							"console.log(\"checkin: \" + pm.collectionVariables.get(\"checkin\"));\r",
							"\r",
							"\r",
							"pm.collectionVariables.set(\"checkout\", util.formatDate(pm.variables.replaceIn('{{$randomDateFuture}}')));\r",
							"console.log(\"checkout: \" + pm.collectionVariables.get(\"checkout\"));\r",
							"\r",
							"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomNoun}}'));\r",
							"console.log(\"additionalneeds: \" + pm.collectionVariables.get(\"additionalneeds\"));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "text/xml",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<booking>\r\n    <firstname>{{firstname}}</firstname>\r\n    <lastname>{{lastname}}</lastname>\r\n    <totalprice>{{totalprice}}</totalprice>\r\n    <depositpaid>{{depositpaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\r\n</booking>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{update_booking_xml_url}}/:id",
					"host": [
						"{{update_booking_xml_url}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookingid}}",
							"description": "Booking ID of booking record to update"
						}
					]
				},
				"description": "Sends an update booking request using JSON format. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-UpdateBooking)."
			},
			"response": [
				{
					"name": "Update Booking - XML",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<booking>\r\n    <firstname>{{firstname}}</firstname>\r\n    <lastname>{{lastname}}</lastname>\r\n    <totalprice>{{totalprice}}</totalprice>\r\n    <depositpaid>{{depositpaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\r\n</booking>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Booking ID of booking record to update"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "341"
						},
						{
							"key": "Etag",
							"value": "W/\"155-9qLwOBZl4NP7Tsk7NKpBfbhutlU\""
						},
						{
							"key": "Date",
							"value": "Tue, 01 Mar 2022 15:45:45 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "<?xml version='1.0'?>\n<booking>\n    <firstname>Rashad</firstname>\n    <lastname>Reinger</lastname>\n    <totalprice>958</totalprice>\n    <depositpaid>true</depositpaid>\n    <bookingdates>\n        <checkin>2021-03-10</checkin>\n        <checkout>2022-12-30</checkout>\n    </bookingdates>\n    <additionalneeds>driver</additionalneeds>\n</booking>"
				},
				{
					"name": "Update Booking (Mock) - XML",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<booking>\r\n    <firstname>{{firstname}}</firstname>\r\n    <lastname>{{lastname}}</lastname>\r\n    <totalprice>{{totalprice}}</totalprice>\r\n    <depositpaid>{{depositpaid}}</depositpaid>\r\n    <bookingdates>\r\n        <checkin>{{checkin}}</checkin>\r\n        <checkout>{{checkout}}</checkout>\r\n    </bookingdates>\r\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\r\n</booking>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/mock/xml/fullupdate/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"xml",
								"fullupdate",
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Booking ID of booking record to update"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "341"
						},
						{
							"key": "Etag",
							"value": "W/\"155-9qLwOBZl4NP7Tsk7NKpBfbhutlU\""
						},
						{
							"key": "Date",
							"value": "Tue, 01 Mar 2022 15:45:45 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "<?xml version='1.0'?>\n<booking>\n    <firstname>Rashad</firstname>\n    <lastname>Reinger</lastname>\n    <totalprice>958</totalprice>\n    <depositpaid>true</depositpaid>\n    <bookingdates>\n        <checkin>2021-03-10</checkin>\n        <checkout>2022-12-30</checkout>\n    </bookingdates>\n    <additionalneeds>driver</additionalneeds>\n</booking>"
				}
			]
		},
		{
			"name": "Partial Update Booking - XML",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"#TEST: Partial Update Booking - XML: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//let jsonData = '';\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - XML: XML response data validation\", () => {\r",
							"    try {\r",
							"        /*\r",
							"        pm.expect(pm.response.text()).to.not.eql('');\r",
							"        jsonData = pm.response.json();\r",
							"        */\r",
							"        pm.response.to.be.ok;\r",
							"        pm.response.to.be.withBody;\r",
							"        \r",
							"        console.log(pm.response.text());\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"XML response data validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"//const cheerio = require('cheerio');\r",
							"const $ = cheerio.load(pm.response.text(), {\r",
							"    ignoreWhitespace: true,\r",
							"    xmlMode: true\r",
							"    });\r",
							"\r",
							"\r",
							"// Render XML\r",
							"console.log($.xml());\r",
							"\r",
							"// JSON schema validation\r",
							"var jsonData = xml2Json($.xml());\r",
							"\r",
							"console.log(\"xml2JSON: \" + JSON.stringify(jsonData));\r",
							"\r",
							"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKING_XML_SCHEMA\"));\r",
							"\r",
							"// XML -> JSON schema validation. Use this since there is no direct way to validate XML schema in postman\r",
							"pm.test(\"#TEST: Partial Update Booking - XML: XML to JSON response schema validation\", () => {\r",
							"    try {\r",
							"        //tv4.validate(jsonData, schema);\r",
							"        let Ajv = require('ajv');\r",
							"        ajv = new Ajv({logger: console, allErrors: true});\r",
							"        pm.expect(ajv.validate(schema, jsonData), JSON.stringify(ajv.errors)).to.be.true;\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"XML to JSON schema validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - XML: First Name validation\", function () {\r",
							"    try {\r",
							"        let firstname = $(\"firstname\");\r",
							"        console.log(\"firstname: \" + firstname.text());\r",
							"\r",
							"        pm.expect(firstname.text()).to.be.eql(pm.collectionVariables.get(\"firstname\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"First Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - XML: Last Name validation\", function () {\r",
							"    try {\r",
							"        let lastname = $(\"lastname\");\r",
							"        console.log(\"lastname: \" + lastname.text());\r",
							"\r",
							"        pm.expect(lastname.text()).to.be.eql(pm.collectionVariables.get(\"lastname\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Last Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - XML: Total Price validation\", function () {\r",
							"    try {\r",
							"        let totalprice = $(\"totalprice\");\r",
							"        console.log(\"totalprice: \" + totalprice.text());\r",
							"\r",
							"        pm.expect(totalprice.text()).to.be.eql(pm.collectionVariables.get(\"totalprice\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Total Price validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - XML: Deposit Paid validation\", function () {\r",
							"    const depositpaidVal = pm.collectionVariables.get(\"depositpaid\");\r",
							"    try {\r",
							"        //var boolVal = JSON.parse(depositpaid);\r",
							"        var boolVal = depositpaidVal === \"true\";\r",
							"        console.log(\"collectionVariables depositpaid: \" + depositpaidVal);\r",
							"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
							"  \r",
							"        let depositpaid = $(\"depositpaid\");\r",
							"        console.log(\"depositpaid: \" + depositpaid.text());\r",
							"\r",
							"        pm.expect(depositpaid.text()).to.be.eql(pm.collectionVariables.get(\"depositpaid\"));\r",
							"        //pm.expect(depositpaid.text()).to.be.eql(boolVal);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Deposit Paid validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - XML: Checkin validation\", function () {\r",
							"    try {\r",
							"        let checkin = $(\"checkin\");\r",
							"        console.log(\"checkin: \" + checkin.text());\r",
							"\r",
							"        pm.expect(checkin.text()).to.be.eql(pm.collectionVariables.get(\"checkin\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkin validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - XML: Checkout validation\", function () {\r",
							"    try {\r",
							"        let checkout = $(\"checkout\");\r",
							"        console.log(\"checkout: \" + checkout.text());\r",
							"\r",
							"        pm.expect(checkout.text()).to.be.eql(pm.collectionVariables.get(\"checkout\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkout validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - XML: Additional needs validation\", function () {\r",
							"    try {\r",
							"        let additionalneeds = $(\"additionalneeds\");\r",
							"        console.log(\"additionalneeds: \" + additionalneeds.text());\r",
							"\r",
							"        pm.expect(additionalneeds.text()).to.be.eql(pm.collectionVariables.get(\"additionalneeds\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Additional needs validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomInt}}'));\r",
							"console.log(\"totalprice: \" + pm.collectionVariables.get(\"totalprice\"));\r",
							"\r",
							"var boolVal = pm.variables.replaceIn('{{$randomBoolean}}');\r",
							"console.log(\"boolVal: \" + boolVal);\r",
							"\r",
							"pm.collectionVariables.set(\"depositpaid\", boolVal );\r",
							"console.log(\"depositpaid: \" + pm.collectionVariables.get(\"depositpaid\"));\r",
							"\r",
							"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomNoun}}'));\r",
							"console.log(\"additionalneeds: \" + pm.collectionVariables.get(\"additionalneeds\"));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"content-type": true
				}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "text/xml",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token_key}}",
						"description": "Auth token returned from Auth request",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<booking>\r\n    <totalprice>{{totalprice}}</totalprice>\r\n    <depositpaid>{{depositpaid}}</depositpaid>\r\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\r\n</booking>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{partialupdate_booking_xml_url}}/:id",
					"host": [
						"{{partialupdate_booking_xml_url}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookingid}}",
							"description": "Booking ID of booking record to update"
						}
					]
				},
				"description": "Sends a partial update booking request using JSON format. The API documentation can be found in this [link](https://desktop.postman.com/?desktopVersion=9.14.0&userId=18313954&teamId=2804070)."
			},
			"response": [
				{
					"name": "Partial Update Booking - XML",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token_key}}",
								"description": "Auth token returned from Auth request",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<booking>\r\n    <totalprice>{{totalprice}}</totalprice>\r\n    <depositpaid>{{depositpaid}}</depositpaid>\r\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\r\n</booking>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Booking ID of booking record to update"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "346"
						},
						{
							"key": "Etag",
							"value": "W/\"15a-A2Jf11kK03yTI70tCnKMwVPiONI\""
						},
						{
							"key": "Date",
							"value": "Wed, 02 Mar 2022 13:38:01 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "<?xml version='1.0'?>\n<booking>\n    <firstname>Maryse</firstname>\n    <lastname>Reinger</lastname>\n    <totalprice>148</totalprice>\n    <depositpaid>true</depositpaid>\n    <bookingdates>\n        <checkin>2022-02-23</checkin>\n        <checkout>2022-11-02</checkout>\n    </bookingdates>\n    <additionalneeds>application</additionalneeds>\n</booking>"
				},
				{
					"name": "Partial Update Booking (Mock) - XML",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "text/xml",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token_key}}",
								"description": "Auth token returned from Auth request",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<booking>\r\n    <totalprice>{{totalprice}}</totalprice>\r\n    <depositpaid>{{depositpaid}}</depositpaid>\r\n    <additionalneeds>{{additionalneeds}}</additionalneeds>\r\n</booking>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/mock/xml/partialupdate/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"xml",
								"partialupdate",
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Booking ID of booking record to update"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "346"
						},
						{
							"key": "Etag",
							"value": "W/\"15a-A2Jf11kK03yTI70tCnKMwVPiONI\""
						},
						{
							"key": "Date",
							"value": "Wed, 02 Mar 2022 13:38:01 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "<?xml version='1.0'?>\n<booking>\n    <firstname>Maryse</firstname>\n    <lastname>Reinger</lastname>\n    <totalprice>148</totalprice>\n    <depositpaid>true</depositpaid>\n    <bookingdates>\n        <checkin>2022-02-23</checkin>\n        <checkout>2022-11-02</checkout>\n    </bookingdates>\n    <additionalneeds>application</additionalneeds>\n</booking>"
				}
			]
		},
		{
			"name": "Get Booking - XML",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"#TEST: Get Booking Request: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsondata = {};\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - XML: XML response data validation\", () => {\r",
							"    try {\r",
							"        pm.response.to.be.ok;\r",
							"        pm.response.to.be.withBody;\r",
							"        \r",
							"        console.log(pm.response.text());\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"XML response data validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"//const cheerio = require('cheerio');\r",
							"const $ = cheerio.load(pm.response.text(), {\r",
							"    ignoreWhitespace: true,\r",
							"    xmlMode: true\r",
							"    });\r",
							"\r",
							"\r",
							"// Render XML\r",
							"console.log($.xml());\r",
							"\r",
							"// JSON schema validation\r",
							"jsonData = xml2Json($.xml());\r",
							"\r",
							"console.log(\"xml2JSON: \" + JSON.stringify(jsonData));\r",
							"\r",
							"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKING_XML_SCHEMA\"));\r",
							"\r",
							"console.log(\"schema \" + JSON.stringify(schema));\r",
							"\r",
							"// XML -> JSON schema validation. Use this since there is no direct way to validate XML schema in postman\r",
							"pm.test(\"#TEST: Get Booking - XML: XML to JSON response schema validation\", () => {\r",
							"    try {\r",
							"        \r",
							"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"\r",
							"        /*\r",
							"        let Ajv = require('ajv');\r",
							"        ajv = new Ajv({logger: console, allErrors: true});\r",
							"        pm.expect(ajv.validate(schema, jsonData), JSON.stringify(ajv.errors)).to.be.true;\r",
							"        */\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"XML to JSON schema validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - XML: First Name validation\", function () {\r",
							"    try {\r",
							"        let firstname = $(\"firstname\");\r",
							"        console.log(\"firstname: \" + firstname.text());\r",
							"\r",
							"        pm.expect(firstname.text()).to.be.eql(pm.collectionVariables.get(\"firstname\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"First Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - XML: Last Name validation\", function () {\r",
							"    try {\r",
							"        let lastname = $(\"lastname\");\r",
							"        console.log(\"lastname: \" + lastname.text());\r",
							"\r",
							"        pm.expect(lastname.text()).to.be.eql(pm.collectionVariables.get(\"lastname\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Last Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - XML: Total Price validation\", function () {\r",
							"    try {\r",
							"        let totalprice = $(\"totalprice\");\r",
							"        console.log(\"totalprice: \" + totalprice.text());\r",
							"\r",
							"        pm.expect(totalprice.text()).to.be.eql(pm.collectionVariables.get(\"totalprice\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Total Price validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - XML: Deposit Paid validation\", function () {\r",
							"    const depositpaidVal = pm.collectionVariables.get(\"depositpaid\");\r",
							"    try {\r",
							"        //var boolVal = JSON.parse(depositpaid);\r",
							"        var boolVal = depositpaidVal === \"true\";\r",
							"        console.log(\"collectionVariables depositpaid: \" + depositpaidVal);\r",
							"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
							"  \r",
							"        let depositpaid = $(\"depositpaid\");\r",
							"        console.log(\"depositpaid: \" + depositpaid.text());\r",
							"\r",
							"        pm.expect(depositpaid.text()).to.be.eql(pm.collectionVariables.get(\"depositpaid\"));\r",
							"        //pm.expect(depositpaid.text()).to.be.eql(boolVal);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Deposit Paid validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - XML: Checkin validation\", function () {\r",
							"    try {\r",
							"        let checkin = $(\"checkin\");\r",
							"        console.log(\"checkin: \" + checkin.text());\r",
							"\r",
							"        pm.expect(checkin.text()).to.be.eql(pm.collectionVariables.get(\"checkin\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkin validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - XML: Checkout validation\", function () {\r",
							"    try {\r",
							"        let checkout = $(\"checkout\");\r",
							"        console.log(\"checkout: \" + checkout.text());\r",
							"\r",
							"        pm.expect(checkout.text()).to.be.eql(pm.collectionVariables.get(\"checkout\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkout validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Get Booking - XML: Additional needs validation\", function () {\r",
							"    try {\r",
							"        let additionalneeds = $(\"additionalneeds\");\r",
							"        console.log(\"additionalneeds: \" + additionalneeds.text());\r",
							"\r",
							"        pm.expect(additionalneeds.text()).to.be.eql(pm.collectionVariables.get(\"additionalneeds\"));\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Additional needs validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{get_booking_xml_url}}/:id",
					"host": [
						"{{get_booking_xml_url}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookingid}}",
							"description": "Booking ID"
						}
					]
				},
				"description": "Sends a get booking request to the Restfulbooker API to retrieve a booking record based on the booking ID. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-GetBooking)."
			},
			"response": [
				{
					"name": "Get Booking - XML",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/:id",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Booking ID"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "335"
						},
						{
							"key": "Etag",
							"value": "W/\"14f-4FByqNj9vFuyG2QZ4622Mzwiu9E\""
						},
						{
							"key": "Date",
							"value": "Thu, 24 Feb 2022 08:47:21 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "<?xml version='1.0'?>\n<booking>\n    <firstname>Maye</firstname>\n    <lastname>Volkman</lastname>\n    <totalprice>48</totalprice>\n    <depositpaid>true</depositpaid>\n    <bookingdates>\n        <checkin>2021-03-18</checkin>\n        <checkout>2022-03-27</checkout>\n    </bookingdates>\n    <additionalneeds>bus</additionalneeds>\n</booking>"
				},
				{
					"name": "Get Booking (Mock) - XML",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/mock/xml/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"xml",
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Booking ID"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "340"
						},
						{
							"key": "Etag",
							"value": "W/\"154-Pe1mnN749LdnztrLCzx78dTnxfg\""
						},
						{
							"key": "Date",
							"value": "Fri, 18 Feb 2022 19:34:56 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "<?xml version='1.0'?>\n<booking>\n    <firstname>Dena</firstname>\n    <lastname>Schinner</lastname>\n    <totalprice>243</totalprice>\n    <depositpaid>true</depositpaid>\n    <bookingdates>\n        <checkin>2021-10-06</checkin>\n        <checkout>2022-10-25</checkout>\n    </bookingdates>\n    <additionalneeds>sensor</additionalneeds>\n</booking>"
				}
			]
		},
		{
			"name": "Create Booking - URL Encoded",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"console.log(\"firstname: \" + pm.collectionVariables.get(\"firstname\"));\r",
							"\r",
							"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
							"console.log(\"lastname: \" + pm.collectionVariables.get(\"lastname\"));\r",
							"\r",
							"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomInt}}'));\r",
							"console.log(\"totalprice: \" + pm.collectionVariables.get(\"totalprice\"));\r",
							"\r",
							"var boolVal = pm.variables.replaceIn('{{$randomBoolean}}');\r",
							"console.log(\"boolVal: \" + boolVal);\r",
							"\r",
							"pm.collectionVariables.set(\"depositpaid\", boolVal );\r",
							"console.log(\"depositpaid: \" + pm.collectionVariables.get(\"depositpaid\"));\r",
							"\r",
							"/*\r",
							"pm.collectionVariables.set(\"checkin\", pm.variables.replaceIn('{{$randomDatePast}}'));\r",
							"console.log(\"checkin: \" + pm.collectionVariables.get(\"checkin\"));\r",
							"*/\r",
							"/*\r",
							"pm.collectionVariables.set(\"checkin\", formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
							"*/\r",
							"pm.collectionVariables.set(\"checkin\", util.formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
							"console.log(\"checkin: \" + pm.collectionVariables.get(\"checkin\"));\r",
							"\r",
							"\r",
							"pm.collectionVariables.set(\"checkout\", util.formatDate(pm.variables.replaceIn('{{$randomDateFuture}}')));\r",
							"console.log(\"checkout: \" + pm.collectionVariables.get(\"checkout\"));\r",
							"\r",
							"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomNoun}}'));\r",
							"console.log(\"additionalneeds: \" + pm.collectionVariables.get(\"additionalneeds\"));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"#TEST: Create Booking - URL Encoded: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - URL Encoded: response data validation\", () => {\r",
							"    try {\r",
							"        pm.response.to.be.ok;\r",
							"        pm.response.to.be.withBody;\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"URL Encoded response data validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"console.log(\"Create Booking URL Encoded Response Body: \" + pm.response.text());\r",
							"//console.log(\"Decoded URI Component: \" + decodeURIComponent(pm.response.text()));\r",
							"\r",
							"querystring = require(\"querystring\");\r",
							"let jsonData = querystring.parse(pm.response.text());\r",
							"console.log(jsonData);\r",
							"//console.log(JSON.stringify(params));\r",
							"\r",
							"\r",
							"// JSON schema validation\r",
							"const schema = JSON.parse(pm.collectionVariables.get(\"BOOKING_URLENCODED_SCHEMA\"));\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - URL Encoded: response schema validation\", () => {\r",
							"    try {\r",
							"        //tv4.validate(jsonData, schema);\r",
							"        let Ajv = require('ajv');\r",
							"        ajv = new Ajv({logger: console, allErrors: true});\r",
							"        pm.expect(ajv.validate(schema, jsonData), JSON.stringify(ajv.errors)).to.be.true;\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"URL Encoded to JSON schema validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - URL Encoded: Booking ID validation\", function () {\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"bookingid\");\r",
							"        pm.collectionVariables.set(\"bookingid\", jsonData.bookingid);\r",
							"        console.log(\"bookingid: \" + jsonData.bookingid);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Booking ID validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - URL Encoded: First Name validation\", function () {\r",
							"    const firstname = pm.collectionVariables.get(\"firstname\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"booking[firstname]\", firstname);\r",
							"        console.log(\"firstname: \" + jsonData[\"booking[firstname]\"]);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"First Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - URL Encoded: Last Name validation\", function () {\r",
							"    const lastname = pm.collectionVariables.get(\"lastname\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"booking[lastname]\", lastname);\r",
							"        console.log(\"lastname: \" + jsonData[\"booking[lastname]\"]);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Last Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - URL Encoded: Total Price validation\", function () {\r",
							"    const totalprice = pm.collectionVariables.get(\"totalprice\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"booking[totalprice]\", totalprice);\r",
							"        console.log(\"totalprice: \" + jsonData[\"booking[totalprice]\"]);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Total Price validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - URL Encoded: Deposit Paid validation\", function () {\r",
							"    const depositpaid = pm.collectionVariables.get(\"depositpaid\");\r",
							"    try {\r",
							"        //var boolVal = JSON.parse(depositpaid);\r",
							"        var boolVal = depositpaid === \"true\";\r",
							"        console.log(\"collectionVariables depositpaid: \" + depositpaid)\r",
							"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
							"        pm.expect(jsonData).to.have.property(\"booking[depositpaid]\", depositpaid);\r",
							"        console.log(\"depositpaid: \" + jsonData[\"booking[depositpaid]\"]);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Deposit Paid validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - URL Encoded: Additional Needs validation\", function () {\r",
							"    const additionalneeds = pm.collectionVariables.get(\"additionalneeds\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"booking[additionalneeds]\", additionalneeds);\r",
							"        console.log(\"additionalneeds: \" + jsonData[\"booking[additionalneeds]\"]);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Additional Needs validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - URL Encoded: Checkin Date validation\", function () {\r",
							"    const checkin = pm.collectionVariables.get(\"checkin\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"booking[bookingdates][checkin]\", checkin);\r",
							"        console.log(\"checkin: \" + jsonData[\"booking[bookingdates][checkin]\"]);\r",
							"        console.log(\"collectionVariables checkin: \" + checkin);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkin Date validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Create Booking - URL Encoded: Checkout Date validation\", function () {\r",
							"    const checkout = pm.collectionVariables.get(\"checkout\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"booking[bookingdates][checkout]\", checkout);\r",
							"        console.log(\"checkout: \" + jsonData[\"booking[bookingdates][checkout]\"]);\r",
							"        console.log(\"collectionVariables checkout: \" + checkout);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkout Date validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "firstname",
							"value": "{{firstname}}",
							"description": "First name",
							"type": "text"
						},
						{
							"key": "lastname",
							"value": "{{lastname}}",
							"description": "Last name",
							"type": "text"
						},
						{
							"key": "totalprice",
							"value": "{{totalprice}}",
							"description": "Total price of booking",
							"type": "text"
						},
						{
							"key": "depositpaid",
							"value": "{{depositpaid}}",
							"description": "Deposit paid (true | false)",
							"type": "text"
						},
						{
							"key": "bookingdates[checkin]",
							"value": "{{checkin}}",
							"description": "Check in date in YYYY-MM-DD string format",
							"type": "text"
						},
						{
							"key": "bookingdates[checkout]",
							"value": "{{checkout}}",
							"description": "Check out date in YYYY-MM-DD string format",
							"type": "text"
						},
						{
							"key": "additionalneeds",
							"value": "{{additionalneeds}}",
							"description": "Additional needs",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{create_booking_urlencoded_url}}",
					"host": [
						"{{create_booking_urlencoded_url}}"
					]
				},
				"description": "Sends a create booking request using URL encoded format. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-CreateBooking)."
			},
			"response": [
				{
					"name": "Create Booking - URL Encoded",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "firstname",
									"value": "Brayan",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Klein",
									"type": "text"
								},
								{
									"key": "totalprice",
									"value": "511",
									"type": "text"
								},
								{
									"key": "depositpaid",
									"value": "true",
									"type": "text"
								},
								{
									"key": "bookingdates[checkin]",
									"value": "2021-08-29",
									"type": "text"
								},
								{
									"key": "bookingdates[checkout]",
									"value": "2022-09-25",
									"type": "text"
								},
								{
									"key": "additionalneeds",
									"value": "microchip",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "268"
						},
						{
							"key": "Etag",
							"value": "W/\"10c-w4quAaVzb99XmfESv+fmP22mLkw\""
						},
						{
							"key": "Date",
							"value": "Tue, 08 Feb 2022 18:27:47 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "bookingid=24&booking%5Bfirstname%5D=Brayan&booking%5Blastname%5D=Klein&booking%5Btotalprice%5D=511&booking%5Bdepositpaid%5D=true&booking%5Bbookingdates%5D%5Bcheckin%5D=2021-08-29&booking%5Bbookingdates%5D%5Bcheckout%5D=2022-09-25&booking%5Badditionalneeds%5D=microchip"
				},
				{
					"name": "Create Booking (Mock) - URL Encoded Copy",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "firstname",
									"value": "Brayan",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "Klein",
									"type": "text"
								},
								{
									"key": "totalprice",
									"value": "511",
									"type": "text"
								},
								{
									"key": "depositpaid",
									"value": "true",
									"type": "text"
								},
								{
									"key": "bookingdates[checkin]",
									"value": "2021-08-29",
									"type": "text"
								},
								{
									"key": "bookingdates[checkout]",
									"value": "2022-09-25",
									"type": "text"
								},
								{
									"key": "additionalneeds",
									"value": "microchip",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/mock/urlencoded/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"urlencoded",
								"booking"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "268"
						},
						{
							"key": "Etag",
							"value": "W/\"10c-w4quAaVzb99XmfESv+fmP22mLkw\""
						},
						{
							"key": "Date",
							"value": "Tue, 08 Feb 2022 18:27:47 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "bookingid=24&booking%5Bfirstname%5D=Brayan&booking%5Blastname%5D=Klein&booking%5Btotalprice%5D=511&booking%5Bdepositpaid%5D=true&booking%5Bbookingdates%5D%5Bcheckin%5D=2021-08-29&booking%5Bbookingdates%5D%5Bcheckout%5D=2022-09-25&booking%5Badditionalneeds%5D=microchip"
				}
			]
		},
		{
			"name": "Update Booking - URL Encoded",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"console.log(\"firstname: \" + pm.collectionVariables.get(\"firstname\"));\r",
							"\r",
							"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}'));\r",
							"console.log(\"lastname: \" + pm.collectionVariables.get(\"lastname\"));\r",
							"\r",
							"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomInt}}'));\r",
							"console.log(\"totalprice: \" + pm.collectionVariables.get(\"totalprice\"));\r",
							"\r",
							"var boolVal = pm.variables.replaceIn('{{$randomBoolean}}');\r",
							"console.log(\"boolVal: \" + boolVal);\r",
							"\r",
							"pm.collectionVariables.set(\"depositpaid\", boolVal );\r",
							"console.log(\"depositpaid: \" + pm.collectionVariables.get(\"depositpaid\"));\r",
							"\r",
							"/*\r",
							"pm.collectionVariables.set(\"checkin\", pm.variables.replaceIn('{{$randomDatePast}}'));\r",
							"console.log(\"checkin: \" + pm.collectionVariables.get(\"checkin\"));\r",
							"*/\r",
							"/*\r",
							"pm.collectionVariables.set(\"checkin\", formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
							"*/\r",
							"pm.collectionVariables.set(\"checkin\", util.formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
							"console.log(\"checkin: \" + pm.collectionVariables.get(\"checkin\"));\r",
							"\r",
							"\r",
							"pm.collectionVariables.set(\"checkout\", util.formatDate(pm.variables.replaceIn('{{$randomDateFuture}}')));\r",
							"console.log(\"checkout: \" + pm.collectionVariables.get(\"checkout\"));\r",
							"\r",
							"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomNoun}}'));\r",
							"console.log(\"additionalneeds: \" + pm.collectionVariables.get(\"additionalneeds\"));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"#TEST: Update Booking - URL Encoded: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - URL Encoded: response data validation\", () => {\r",
							"    try {\r",
							"        pm.response.to.be.ok;\r",
							"        pm.response.to.be.withBody;\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"URL Encoded response data validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"console.log(\"Update Booking URL Encoded Response Body: \" + pm.response.text());\r",
							"//console.log(\"Decoded URI Component: \" + decodeURIComponent(pm.response.text()));\r",
							"\r",
							"querystring = require(\"querystring\");\r",
							"let jsonData = querystring.parse(pm.response.text());\r",
							"console.log(jsonData);\r",
							"//console.log(JSON.stringify(params));\r",
							"\r",
							"\r",
							"// JSON schema validation\r",
							"const schema = JSON.parse(pm.collectionVariables.get(\"UPDATE_BOOKING_URLENCODED_SCHEMA\"));\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - URL Encoded: response schema validation\", () => {\r",
							"    try {\r",
							"        //tv4.validate(jsonData, schema);\r",
							"        let Ajv = require('ajv');\r",
							"        ajv = new Ajv({logger: console, allErrors: true});\r",
							"        pm.expect(ajv.validate(schema, jsonData), JSON.stringify(ajv.errors)).to.be.true;\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"URL Encoded to JSON schema validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - URL Encoded: First Name validation\", function () {\r",
							"    const firstname = pm.collectionVariables.get(\"firstname\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"firstname\", firstname);\r",
							"        console.log(\"firstname: \" + jsonData[\"firstname\"]);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"First Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - URL Encoded: Last Name validation\", function () {\r",
							"    const lastname = pm.collectionVariables.get(\"lastname\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"lastname\", lastname);\r",
							"        console.log(\"lastname: \" + jsonData[\"lastname\"]);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Last Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - URL Encoded: Total Price validation\", function () {\r",
							"    const totalprice = pm.collectionVariables.get(\"totalprice\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"totalprice\", totalprice);\r",
							"        console.log(\"totalprice: \" + jsonData[\"totalprice\"]);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Total Price validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - URL Encoded: Deposit Paid validation\", function () {\r",
							"    const depositpaid = pm.collectionVariables.get(\"depositpaid\");\r",
							"    try {\r",
							"        //var boolVal = JSON.parse(depositpaid);\r",
							"        var boolVal = depositpaid === \"true\";\r",
							"        console.log(\"collectionVariables depositpaid: \" + depositpaid)\r",
							"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
							"        pm.expect(jsonData).to.have.property(\"depositpaid\", depositpaid);\r",
							"        console.log(\"depositpaid: \" + jsonData[\"depositpaid\"]);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Deposit Paid validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - URL Encoded: Additional Needs validation\", function () {\r",
							"    const additionalneeds = pm.collectionVariables.get(\"additionalneeds\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"additionalneeds\", additionalneeds);\r",
							"        console.log(\"additionalneeds: \" + jsonData[\"additionalneeds\"]);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Additional Needs validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - URL Encoded: Checkin Date validation\", function () {\r",
							"    const checkin = pm.collectionVariables.get(\"checkin\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"bookingdates[checkin]\", checkin);\r",
							"        console.log(\"checkin: \" + jsonData[\"bookingdates[checkin]\"]);\r",
							"        console.log(\"collectionVariables checkin: \" + checkin);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkin Date validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Update Booking - URL Encoded: Checkout Date validation\", function () {\r",
							"    const checkout = pm.collectionVariables.get(\"checkout\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"bookingdates[checkout]\", checkout);\r",
							"        console.log(\"checkout: \" + jsonData[\"bookingdates[checkout]\"]);\r",
							"        console.log(\"collectionVariables checkout: \" + checkout);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkout Date validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token_key}}",
						"description": "Auth token returned from the Auth request",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "firstname",
							"value": "{{firstname}}",
							"description": "First name",
							"type": "text"
						},
						{
							"key": "lastname",
							"value": "{{lastname}}",
							"description": "Last name",
							"type": "text"
						},
						{
							"key": "totalprice",
							"value": "{{totalprice}}",
							"description": "Total price of booking",
							"type": "text"
						},
						{
							"key": "depositpaid",
							"value": "{{depositpaid}}",
							"description": "Deposit paid (true | false)",
							"type": "text"
						},
						{
							"key": "bookingdates[checkin]",
							"value": "{{checkin}}",
							"description": "Check in date in YYYY-MM-DD string format",
							"type": "text"
						},
						{
							"key": "bookingdates[checkout]",
							"value": "{{checkout}}",
							"description": "Check out date in YYYY-MM-DD string format",
							"type": "text"
						},
						{
							"key": "additionalneeds",
							"value": "{{additionalneeds}}",
							"description": "Additional needs",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{update_booking_urlencoded_url}}/:id",
					"host": [
						"{{update_booking_urlencoded_url}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookingid}}",
							"description": "Booking ID of the booking record to update"
						}
					]
				},
				"description": "Sends an update booking request using URL encoded format. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-UpdateBooking)."
			},
			"response": [
				{
					"name": "Update Booking - URL Encoded",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token=abc123",
								"description": "Auth token returned from the Auth request",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "firstname",
									"value": "{{firstname}}",
									"description": "First name",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "{{lastname}}",
									"description": "Last name",
									"type": "text"
								},
								{
									"key": "totalprice",
									"value": "{{totalprice}}",
									"description": "Total price of booking",
									"type": "text"
								},
								{
									"key": "depositpaid",
									"value": "{{depositpaid}}",
									"description": "Deposit paid (true | false)",
									"type": "text"
								},
								{
									"key": "bookingdates[checkin]",
									"value": "{{checkin}}",
									"description": "Check in date in YYYY-MM-DD string format",
									"type": "text"
								},
								{
									"key": "bookingdates[checkout]",
									"value": "{{checkout}}",
									"description": "Check out date in YYYY-MM-DD string format",
									"type": "text"
								},
								{
									"key": "additionalneeds",
									"value": "{{additionalneeds}}",
									"description": "Additional needs",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Booking ID of the booking record to update"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "164"
						},
						{
							"key": "Etag",
							"value": "W/\"a4-qKIk7Eb2JRUuyZz7bPt/q6OeZJU\""
						},
						{
							"key": "Date",
							"value": "Tue, 01 Mar 2022 16:38:14 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "firstname=Magdalena&lastname=Weber&totalprice=50&depositpaid=true&bookingdates%5Bcheckin%5D=2021-10-18&bookingdates%5Bcheckout%5D=2022-09-26&additionalneeds=program"
				},
				{
					"name": "Update Booking (Mock) - URL Encoded",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token=abc123",
								"description": "Auth token returned from the Auth request",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "firstname",
									"value": "{{firstname}}",
									"description": "First name",
									"type": "text"
								},
								{
									"key": "lastname",
									"value": "{{lastname}}",
									"description": "Last name",
									"type": "text"
								},
								{
									"key": "totalprice",
									"value": "{{totalprice}}",
									"description": "Total price of booking",
									"type": "text"
								},
								{
									"key": "depositpaid",
									"value": "{{depositpaid}}",
									"description": "Deposit paid (true | false)",
									"type": "text"
								},
								{
									"key": "bookingdates[checkin]",
									"value": "{{checkin}}",
									"description": "Check in date in YYYY-MM-DD string format",
									"type": "text"
								},
								{
									"key": "bookingdates[checkout]",
									"value": "{{checkout}}",
									"description": "Check out date in YYYY-MM-DD string format",
									"type": "text"
								},
								{
									"key": "additionalneeds",
									"value": "{{additionalneeds}}",
									"description": "Additional needs",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/mock/urlencoded/fullupdate/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"urlencoded",
								"fullupdate",
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Booking ID of the booking record to update"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "164"
						},
						{
							"key": "Etag",
							"value": "W/\"a4-qKIk7Eb2JRUuyZz7bPt/q6OeZJU\""
						},
						{
							"key": "Date",
							"value": "Tue, 01 Mar 2022 16:38:14 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "firstname=Magdalena&lastname=Weber&totalprice=50&depositpaid=true&bookingdates%5Bcheckin%5D=2021-10-18&bookingdates%5Bcheckout%5D=2022-09-26&additionalneeds=program"
				}
			]
		},
		{
			"name": "Partial Update Booking - URL Encoded",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"checkin\", util.formatDate(pm.variables.replaceIn('{{$randomDatePast}}')));\r",
							"console.log(\"checkin: \" + pm.collectionVariables.get(\"checkin\"));\r",
							"\r",
							"\r",
							"pm.collectionVariables.set(\"checkout\", util.formatDate(pm.variables.replaceIn('{{$randomDateFuture}}')));\r",
							"console.log(\"checkout: \" + pm.collectionVariables.get(\"checkout\"));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"#TEST: Partial Update Booking - URL Encoded: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - URL Encoded: response data validation\", () => {\r",
							"    try {\r",
							"        pm.response.to.be.ok;\r",
							"        pm.response.to.be.withBody;\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"URL Encoded response data validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"console.log(\"Partial Update Booking URL Encoded Response Body: \" + pm.response.text());\r",
							"//console.log(\"Decoded URI Component: \" + decodeURIComponent(pm.response.text()));\r",
							"\r",
							"querystring = require(\"querystring\");\r",
							"let jsonData = querystring.parse(pm.response.text());\r",
							"console.log(jsonData);\r",
							"//console.log(JSON.stringify(params));\r",
							"\r",
							"\r",
							"// JSON schema validation\r",
							"const schema = JSON.parse(pm.collectionVariables.get(\"UPDATE_BOOKING_URLENCODED_SCHEMA\"));\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - URL Encoded: response schema validation\", () => {\r",
							"    try {\r",
							"        //tv4.validate(jsonData, schema);\r",
							"        let Ajv = require('ajv');\r",
							"        ajv = new Ajv({logger: console, allErrors: true});\r",
							"        pm.expect(ajv.validate(schema, jsonData), JSON.stringify(ajv.errors)).to.be.true;\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"URL Encoded to JSON schema validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - URL Encoded: First Name validation\", function () {\r",
							"    const firstname = pm.collectionVariables.get(\"firstname\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"firstname\", firstname);\r",
							"        console.log(\"firstname: \" + jsonData[\"firstname\"]);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"First Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - URL Encoded: Last Name validation\", function () {\r",
							"    const lastname = pm.collectionVariables.get(\"lastname\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"lastname\", lastname);\r",
							"        console.log(\"lastname: \" + jsonData[\"lastname\"]);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Last Name validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - URL Encoded: Total Price validation\", function () {\r",
							"    const totalprice = pm.collectionVariables.get(\"totalprice\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"totalprice\", totalprice);\r",
							"        console.log(\"totalprice: \" + jsonData[\"totalprice\"]);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Total Price validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - URL Encoded: Deposit Paid validation\", function () {\r",
							"    const depositpaid = pm.collectionVariables.get(\"depositpaid\");\r",
							"    try {\r",
							"        //var boolVal = JSON.parse(depositpaid);\r",
							"        var boolVal = depositpaid === \"true\";\r",
							"        console.log(\"collectionVariables depositpaid: \" + depositpaid)\r",
							"        console.log(\"depositpaid boolVal: \" + boolVal)\r",
							"        pm.expect(jsonData).to.have.property(\"depositpaid\", depositpaid);\r",
							"        console.log(\"depositpaid: \" + jsonData[\"depositpaid\"]);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Deposit Paid validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - URL Encoded: Additional Needs validation\", function () {\r",
							"    const additionalneeds = pm.collectionVariables.get(\"additionalneeds\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"additionalneeds\", additionalneeds);\r",
							"        console.log(\"additionalneeds: \" + jsonData[\"additionalneeds\"]);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Additional Needs validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - URL Encoded: Checkin Date validation\", function () {\r",
							"    const checkin = pm.collectionVariables.get(\"checkin\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"bookingdates[checkin]\", checkin);\r",
							"        console.log(\"checkin: \" + jsonData[\"bookingdates[checkin]\"]);\r",
							"        console.log(\"collectionVariables checkin: \" + checkin);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkin Date validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"#TEST: Partial Update Booking - URL Encoded: Checkout Date validation\", function () {\r",
							"    const checkout = pm.collectionVariables.get(\"checkout\");\r",
							"    try {\r",
							"        pm.expect(jsonData).to.have.property(\"bookingdates[checkout]\", checkout);\r",
							"        console.log(\"checkout: \" + jsonData[\"bookingdates[checkout]\"]);\r",
							"        console.log(\"collectionVariables checkout: \" + checkout);\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"Checkout Date validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "firstname",
							"value": "{{firstname}}",
							"description": "First name",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastname",
							"value": "{{lastname}}",
							"description": "Last name",
							"type": "text",
							"disabled": true
						},
						{
							"key": "totalprice",
							"value": "{{totalprice}}",
							"description": "Total price of booking",
							"type": "text",
							"disabled": true
						},
						{
							"key": "depositpaid",
							"value": "{{depositpaid}}",
							"description": "Deposit paid (true | false)",
							"type": "text",
							"disabled": true
						},
						{
							"key": "bookingdates[checkin]",
							"value": "{{checkin}}",
							"description": "Check in date in YYYY-MM-DD string format",
							"type": "text"
						},
						{
							"key": "bookingdates[checkout]",
							"value": "{{checkout}}",
							"description": "Check out date in YYYY-MM-DD string format",
							"type": "text"
						},
						{
							"key": "additionalneeds",
							"value": "{{additionalneeds}}",
							"description": "Additional needs",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{update_booking_urlencoded_url}}/:id",
					"host": [
						"{{update_booking_urlencoded_url}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookingid}}",
							"description": "Booking ID of the booking record to update"
						}
					]
				},
				"description": "Sends a partial update booking request using JSON format. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-PartialUpdateBooking)."
			},
			"response": [
				{
					"name": "Partial Update Booking - URL Encoded",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "firstname",
									"value": "{{firstname}}",
									"description": "First name",
									"type": "text",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "{{lastname}}",
									"description": "Last name",
									"type": "text",
									"disabled": true
								},
								{
									"key": "totalprice",
									"value": "{{totalprice}}",
									"description": "Total price of booking",
									"type": "text",
									"disabled": true
								},
								{
									"key": "depositpaid",
									"value": "{{depositpaid}}",
									"description": "Deposit paid (true | false)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "bookingdates[checkin]",
									"value": "{{checkin}}",
									"description": "Check in date in YYYY-MM-DD string format",
									"type": "text"
								},
								{
									"key": "bookingdates[checkout]",
									"value": "{{checkout}}",
									"description": "Check out date in YYYY-MM-DD string format",
									"type": "text"
								},
								{
									"key": "additionalneeds",
									"value": "{{additionalneeds}}",
									"description": "Additional needs",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Booking ID of the booking record to update"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "165"
						},
						{
							"key": "Etag",
							"value": "W/\"a5-fFRumevE4PtRZcLNLRQ0PnRzW6w\""
						},
						{
							"key": "Date",
							"value": "Wed, 02 Mar 2022 13:58:21 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "firstname=Alejandrin&lastname=Streich&totalprice=228&depositpaid=true&bookingdates%5Bcheckin%5D=2021-05-13&bookingdates%5Bcheckout%5D=2022-05-07&additionalneeds=port"
				},
				{
					"name": "Partial Update Booking (Mock) - URL Encoded",
					"originalRequest": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "firstname",
									"value": "{{firstname}}",
									"description": "First name",
									"type": "text",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "{{lastname}}",
									"description": "Last name",
									"type": "text",
									"disabled": true
								},
								{
									"key": "totalprice",
									"value": "{{totalprice}}",
									"description": "Total price of booking",
									"type": "text",
									"disabled": true
								},
								{
									"key": "depositpaid",
									"value": "{{depositpaid}}",
									"description": "Deposit paid (true | false)",
									"type": "text",
									"disabled": true
								},
								{
									"key": "bookingdates[checkin]",
									"value": "{{checkin}}",
									"description": "Check in date in YYYY-MM-DD string format",
									"type": "text"
								},
								{
									"key": "bookingdates[checkout]",
									"value": "{{checkout}}",
									"description": "Check out date in YYYY-MM-DD string format",
									"type": "text"
								},
								{
									"key": "additionalneeds",
									"value": "{{additionalneeds}}",
									"description": "Additional needs",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/mock/urlencoded/partialupdate/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"urlencoded",
								"partialupdate",
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Booking ID of booking record to update"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "165"
						},
						{
							"key": "Etag",
							"value": "W/\"a5-fFRumevE4PtRZcLNLRQ0PnRzW6w\""
						},
						{
							"key": "Date",
							"value": "Wed, 02 Mar 2022 13:58:21 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "firstname=Alejandrin&lastname=Streich&totalprice=228&depositpaid=true&bookingdates%5Bcheckin%5D=2021-05-13&bookingdates%5Bcheckout%5D=2022-05-07&additionalneeds=port"
				}
			]
		},
		{
			"name": "Get Booking - Non Existent - JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"#TEST: Get Booking Request: Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"TEST: Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{get_booking_json_url}}/:id",
					"host": [
						"{{get_booking_json_url}}"
					],
					"path": [
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "123456789",
							"description": "Dummy booking id"
						}
					]
				},
				"description": "Sends a get booking request to the Restfulbooker API to retrieve a booking record based on the booking ID. This test is specific for a non-existent booking record to test the response status. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-GetBooking)."
			},
			"response": [
				{
					"name": "Get Booking - Non Existent - JSON",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{get_booking_json_url}}/:id",
							"host": [
								"{{get_booking_json_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "123456789",
									"description": "Dummy booking id"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/plain; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "9"
						},
						{
							"key": "Etag",
							"value": "W/\"9-0gXL1ngzMqISxa6S1zx3F4wtLyg\""
						},
						{
							"key": "Date",
							"value": "Fri, 18 Feb 2022 18:07:48 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "Not Found"
				},
				{
					"name": "Get Booking - Non Existent (Mock) - JSON",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/mock/json/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"json",
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "123456789",
									"description": "Dummy booking id"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "text/plain; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "9"
						},
						{
							"key": "Etag",
							"value": "W/\"9-0gXL1ngzMqISxa6S1zx3F4wtLyg\""
						},
						{
							"key": "Date",
							"value": "Fri, 18 Feb 2022 18:07:48 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "Not Found"
				}
			]
		},
		{
			"name": "Get Booking IDs - JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"#TEST: Get Booking IDs Request: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsondata = {};\r",
							"\r",
							"pm.test(\"#TEST: Get Booking IDs - JSON: JSON response data validation\", () => {\r",
							"    try {\r",
							"        /*\r",
							"        pm.response.to.be.ok;\r",
							"        pm.response.to.be.withBody;\r",
							"        pm.response.to.be.json;\r",
							"        */\r",
							"\r",
							"        pm.response.to.be.ok.\r",
							"            and.to.be.withBody.\r",
							"            and.to.be.json;\r",
							"\r",
							"\r",
							"        jsonData = pm.response.json();\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"JSON response data validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"// JSON schema validation\r",
							"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKINGIDS_JSON_SCHEMA\"));\r",
							"\r",
							"pm.test(\"#TEST: Get Booking IDs - JSON: JSON response schema validation\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// validate if last booking ID created is present in list.\r",
							"pm.test(\"#TEST: Get Booking IDs - JSON: JSON Booking ID validation\", () => {\r",
							"    const bookingid = Number.parseInt(pm.collectionVariables.get(\"bookingid\"));\r",
							"    let found = false;\r",
							"\r",
							"    // alternative validation checking each property, instead of performing schema validation\r",
							"    jsonData.forEach(booking => {\r",
							"        pm.expect(booking).to.have.key(\"bookingid\");\r",
							"        if (booking.bookingid === bookingid) {\r",
							"            found = true;\r",
							"        }\r",
							"    });\r",
							"\r",
							"    /*\r",
							"    // alternative way to iterate array of bookindid until one is found to exist in the returned list\r",
							"    for(let i=0; i<jsonData.length && !found; i++) {\r",
							"        if (jsonData[i].bookingid === bookingid) {\r",
							"            found = true;\r",
							"        } \r",
							"        console.log(\"Booking ID index = \" + i);\r",
							"    }\r",
							"    */\r",
							"\r",
							"    console.log(\"Booking ID [\" + bookingid +\"] found = \" + found);\r",
							"\r",
							"    pm.expect(found, \"Booking ID \" + bookingid + \" not found in returned list!\").to.be.true;\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{get_booking_ids_url}}",
					"host": [
						"{{get_booking_ids_url}}"
					]
				},
				"description": "Sends a request to the Restfulbooker API to retrieve the list of all available booking IDs without any search filter. The response is expected to have an array of JSON object with a bookingid property. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-GetBookings)."
			},
			"response": [
				{
					"name": "Get Booking IDs - JSON",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "757"
						},
						{
							"key": "Etag",
							"value": "W/\"2f5-iGVwSYDvvlDJ5a87FSlF9mGGChE\""
						},
						{
							"key": "Date",
							"value": "Thu, 10 Feb 2022 16:03:57 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"bookingid\": 12\n    },\n    {\n        \"bookingid\": 23\n    },\n    {\n        \"bookingid\": 39\n    },\n    {\n        \"bookingid\": 24\n    },\n    {\n        \"bookingid\": 5\n    }\n]"
				},
				{
					"name": "Get Booking IDs (Mock) - JSON",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/mock/json/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"json",
								"booking"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "757"
						},
						{
							"key": "Etag",
							"value": "W/\"2f5-iGVwSYDvvlDJ5a87FSlF9mGGChE\""
						},
						{
							"key": "Date",
							"value": "Thu, 10 Feb 2022 16:03:57 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"bookingid\": 13\n    },\n    {\n        \"bookingid\": 1\n    },\n    {\n        \"bookingid\": 8\n    },\n    {\n        \"bookingid\": 10\n    },\n    {\n        \"bookingid\": 5\n    }\n]"
				}
			]
		},
		{
			"name": "Get Booking IDs with Filter by Name  - JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"#TEST: Get Booking IDs Filter by Name Request: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsondata = {};\r",
							"\r",
							"pm.test(\"#TEST: Get Booking IDs Filter by Name - JSON: JSON response data validation\", () => {\r",
							"    try {\r",
							"        /*\r",
							"        pm.response.to.be.ok;\r",
							"        pm.response.to.be.withBody;\r",
							"        pm.response.to.be.json;\r",
							"        */\r",
							"\r",
							"        pm.response.to.be.ok.\r",
							"            and.to.be.withBody.\r",
							"            and.to.be.json;\r",
							"\r",
							"\r",
							"        jsonData = pm.response.json();\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"JSON response data validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"// JSON schema validation\r",
							"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKINGIDS_JSON_SCHEMA\"));\r",
							"\r",
							"pm.test(\"#TEST: Get Booking IDs Filter by Name - JSON: JSON response schema validation\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// validate if last booking ID created is present in list.\r",
							"pm.test(\"#TEST: Get Booking IDs Filter by Name - JSON: Booking ID validation\", () => {\r",
							"    if (jsonData.length === 0) {\r",
							"        console.log(\"#TEST: Get Booking IDs Filter by Name - List of Booking empty\");\r",
							"    }\r",
							"\r",
							"    jsonData.forEach(booking => {\r",
							"        pm.expect(booking).to.have.key(\"bookingid\");\r",
							"\r",
							"        console.log(\"get_booking_json_url: \" + pm.variables.replaceIn('{{get_booking_json_url}}'));\r",
							"\r",
							"        // send a request to get booking details\r",
							"        const getBookingReq = {\r",
							"            url: pm.variables.replaceIn('{{get_booking_json_url}}') + \"/\" + booking.bookingid,\r",
							"            //\"url\": \"https://restful-booker.herokuapp.com/booking/\" + booking.bookingid,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                Accept: \"application/json\"\r",
							"            }\r",
							"        };\r",
							"\r",
							"        console.log(\"getBookingReq: \" + JSON.stringify(getBookingReq));\r",
							"\r",
							"        pm.sendRequest(\r",
							"            getBookingReq,\r",
							"            (error, response) => {\r",
							"                pm.test(\"#TEST: Get Booking IDs Filter by Name - JSON: First and Last Name validation\", () => {\r",
							"                    if (error) {\r",
							"                        console.error(error);\r",
							"                    }\r",
							"\r",
							"                    //pm.response.to.have.status(200);\r",
							"                    pm.expect(error).to.equal(null);\r",
							"                    pm.expect(response).to.have.property('code', 200);\r",
							"                    pm.expect(response).to.have.property('status', 'OK');\r",
							"\r",
							"                    //validate first name and last name of each booking id\r",
							"                    let jsonData2 = response.json();\r",
							"                    const firstname = pm.collectionVariables.get(\"firstname\");\r",
							"                    try {\r",
							"                        pm.expect(jsonData2).to.have.property(\"firstname\", firstname);\r",
							"                        console.log(\"firstname: \" + jsonData2.firstname);\r",
							"                    }\r",
							"                    catch (e) {\r",
							"                        console.error(\"First Name validation failed! \" + e);\r",
							"                        throw e;\r",
							"                    }\r",
							"\r",
							"                    const lastname = pm.collectionVariables.get(\"lastname\");\r",
							"                    try {\r",
							"                        pm.expect(jsonData2).to.have.property(\"lastname\", lastname);\r",
							"                        console.log(\"lastname: \" + jsonData2.lastname);\r",
							"                    }\r",
							"                    catch (e) {\r",
							"                        console.error(\"Last Name validation failed! \" + e);\r",
							"                        throw e;\r",
							"                    }\r",
							"                })\r",
							"            } // callback function\r",
							"        );       \r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"/*\r",
							"pm.test(\"#TEST: Get Booking IDs Filter by Name - JSON: First and Last Name validation\", () => {\r",
							"    if (jsonData.length === 0) {\r",
							"        console.log(\"#TEST: Get Booking IDs Filter by Name - List of Booking empty\");\r",
							"    }\r",
							"\r",
							"    jsonData.forEach(booking => {\r",
							"        pm.expect(booking).to.have.key(\"bookingid\");\r",
							"\r",
							"        console.log(\"get_booking_json_url: \" + pm.variables.replaceIn('{{get_booking_json_url}}'));\r",
							"\r",
							"        // send a request to get booking details\r",
							"        const getBookingReq = {\r",
							"            url: pm.variables.replaceIn('{{get_booking_json_url}}') + \"/\" + booking.bookingid,\r",
							"            //\"url\": \"https://restful-booker.herokuapp.com/booking/\" + booking.bookingid,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                Accept: \"application/json\"\r",
							"            }\r",
							"        };\r",
							"\r",
							"        console.log(\"getBookingReq: \" + JSON.stringify(getBookingReq));\r",
							"\r",
							"        pm.sendRequest(getBookingReq, (error, response) => {\r",
							"            if (error) {\r",
							"                console.error(error);\r",
							"            }\r",
							"\r",
							"            //pm.response.to.have.status(200);\r",
							"            pm.expect(error).to.equal(null);\r",
							"            pm.expect(response).to.have.property('code', 200);\r",
							"            pm.expect(response).to.have.property('status', 'OK');\r",
							"\r",
							"            //validate first name and last name of each booking id\r",
							"            let jsonData2 = response.json();\r",
							"            const firstname = pm.collectionVariables.get(\"firstname\");\r",
							"            try {\r",
							"                pm.expect(jsonData2).to.have.property(\"firstname\", firstname);\r",
							"                console.log(\"firstname: \" + jsonData2.firstname);\r",
							"            }\r",
							"            catch (e) {\r",
							"                console.error(\"First Name validation failed! \" + e);\r",
							"                throw e;\r",
							"            }\r",
							"\r",
							"            const lastname = pm.collectionVariables.get(\"lastname\");\r",
							"            try {\r",
							"                pm.expect(jsonData2).to.have.property(\"lastname\", lastname);\r",
							"                console.log(\"lastname: \" + jsonData2.lastname);\r",
							"            }\r",
							"            catch (e) {\r",
							"                console.error(\"Last Name validation failed! \" + e);\r",
							"                throw e;\r",
							"            }\r",
							"        }) // callback function\r",
							"    })\r",
							"})\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{get_booking_ids_url}}?firstname={{firstname}}&lastname={{lastname}}",
					"host": [
						"{{get_booking_ids_url}}"
					],
					"query": [
						{
							"key": "firstname",
							"value": "{{firstname}}",
							"description": "First name search filter"
						},
						{
							"key": "lastname",
							"value": "{{lastname}}",
							"description": "Last name search filter"
						}
					]
				},
				"description": "Sends a request to the Restfulbooker API to retrieve the list of all available booking IDs with search filter for first and last name. The response is expected to have an array of JSON object with a bookingid property if the first name and last name match the search filters. The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-GetBookings)."
			},
			"response": [
				{
					"name": "Get Booking IDs with Filter by Name- JSON",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking?firstname=John&lastname=Doe",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "John",
									"description": "First name search filter"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Last name search filter"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "757"
						},
						{
							"key": "Etag",
							"value": "W/\"2f5-iGVwSYDvvlDJ5a87FSlF9mGGChE\""
						},
						{
							"key": "Date",
							"value": "Thu, 10 Feb 2022 16:03:57 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"bookingid\": 12\n    }\n]"
				},
				{
					"name": "Get Booking IDs Filter by Name (Mock) - JSON",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/mock/json/booking?firstname=John&lastname=Doe",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"json",
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "John",
									"description": "First name search filter"
								},
								{
									"key": "lastname",
									"value": "Doe",
									"description": "Last name search filter"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "757"
						},
						{
							"key": "Etag",
							"value": "W/\"2f5-iGVwSYDvvlDJ5a87FSlF9mGGChE\""
						},
						{
							"key": "Date",
							"value": "Thu, 10 Feb 2022 16:03:57 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"bookingid\": 13\n    }\n]"
				}
			]
		},
		{
			"name": "Get Booking IDs with Filter by Date  - JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"#TEST: Get Booking IDs Filter by Date Request: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsondata = {};\r",
							"\r",
							"pm.test(\"#TEST: Get Booking IDs Filter by Date - JSON: JSON response data validation\", () => {\r",
							"    try {\r",
							"        /*\r",
							"        pm.response.to.be.ok;\r",
							"        pm.response.to.be.withBody;\r",
							"        pm.response.to.be.json;\r",
							"        */\r",
							"\r",
							"        pm.response.to.be.ok.\r",
							"            and.to.be.withBody.\r",
							"            and.to.be.json;\r",
							"\r",
							"\r",
							"        jsonData = pm.response.json();\r",
							"    }\r",
							"    catch (e) {\r",
							"        console.error(\"JSON response data validation failed! \" + e);\r",
							"        throw e;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"// JSON schema validation\r",
							"const schema = JSON.parse(pm.collectionVariables.get(\"GET_BOOKINGIDS_JSON_SCHEMA\"));\r",
							"\r",
							"pm.test(\"#TEST: Get Booking IDs Filter by Date - JSON: JSON response schema validation\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"#TEST: Get Booking IDs Filter by Date - JSON: Booking ID validation\", () => {\r",
							"    if (jsonData.length === 0) {\r",
							"        console.log(\"#TEST: Get Booking IDs Filter by Date - List of Booking empty\");\r",
							"    }\r",
							"\r",
							"    jsonData.forEach(booking => {\r",
							"        pm.expect(booking).to.have.key(\"bookingid\");\r",
							"\r",
							"        //console.log(\"get_booking_json_url: \" + pm.variables.replaceIn('{{get_booking_json_url}}'));\r",
							"\r",
							"        // send a request to get booking details for each booking ID returned\r",
							"        const getBookingReq = {\r",
							"            url: pm.variables.replaceIn('{{get_booking_json_url}}') + \"/\" + booking.bookingid,\r",
							"            //\"url\": \"https://restful-booker.herokuapp.com/booking/\" + booking.bookingid,\r",
							"            method: \"GET\",\r",
							"            header: {\r",
							"                Accept: \"application/json\"\r",
							"            }\r",
							"        };\r",
							"\r",
							"        console.log(\"getBookingReq: \" + JSON.stringify(getBookingReq));\r",
							"\r",
							"        pm.sendRequest(\r",
							"            getBookingReq,\r",
							"            (error, response) => {\r",
							"                pm.test(\"#TEST: Get Booking IDs Filter by Date - JSON: Checkin and Checkout Date validation\", () => {\r",
							"                    if (error) {\r",
							"                        console.error(error);\r",
							"                    }\r",
							"\r",
							"                    //pm.response.to.have.status(200);\r",
							"                    pm.expect(error).to.equal(null);\r",
							"                    pm.expect(response).to.have.property('code', 200);\r",
							"                    pm.expect(response).to.have.property('status', 'OK');\r",
							"\r",
							"                    //let _ = require(\"lodash\");\r",
							"                    let moment = require(\"moment\");\r",
							"\r",
							"                    //validate checkin and checkout date of each booking id\r",
							"                    let jsonData2 = response.json();\r",
							"                    const checkin = pm.collectionVariables.get(\"checkin\");\r",
							"                    const checkout = pm.collectionVariables.get(\"checkout\");\r",
							"                    console.log(\"Filter by checkin=\" + checkin + \" and checkout=\" + checkout);\r",
							"\r",
							"                    pm.expect(jsonData2).haveOwnProperty(\"bookingdates\");\r",
							"                    try {\r",
							"                        pm.expect(jsonData2.bookingdates).to.have.property(\"checkin\");\r",
							"                        console.log(\"Returned checkin: \" + jsonData2.bookingdates.checkin);\r",
							"\r",
							"                        //pm.expect(_.gte(jsonData2.bookingdates.checkin, checkin), \"Returned checkin date \" + jsonData2.bookingdates.checkin + \" should be >= \" + checkin);\r",
							"\r",
							"                        pm.expect(moment(jsonData2.bookingdates.checkin, \"YYYY-MM-DD\").isSameOrAfter(moment(checkin, \"YYYY-MM-DD\")), \r",
							"                            \"Returned checkin date \" + jsonData2.bookingdates.checkin + \" should be >= \" + checkin).to.be.true;\r",
							"                    }\r",
							"                    catch (e) {\r",
							"                        console.error(\"Checkin Date validation failed! \" + e);\r",
							"                        throw e;\r",
							"                    }\r",
							"\r",
							"                    try {\r",
							"                        pm.expect(jsonData2.bookingdates).to.have.property(\"checkout\");\r",
							"                        console.log(\"Returned checkout: \" + jsonData2.bookingdates.checkout);\r",
							"                        //pm.expect(_.lte(jsonData2.bookingdates.checkout, checkout), \"Returned checkout date \" + jsonData2.bookingdates.checkout + \" should be <= \" + checkout);\r",
							"                        pm.expect(moment(jsonData2.bookingdates.checkout, \"YYYY-MM-DD\").isSameOrBefore(moment(checkout, \"YYYY-MM-DD\")), \r",
							"                            \"Returned checkout date \" + jsonData2.bookingdates.checkout + \" should be <= \" + checkout).to.be.true;\r",
							"                    }\r",
							"                    catch (e) {\r",
							"                        console.error(\"Checkout Date validation failed! \" + e);\r",
							"                        throw e;\r",
							"                    }\r",
							"                })\r",
							"            } // callback function\r",
							"        );\r",
							"    });\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{get_booking_ids_url}}?checkin={{checkin}}&checkout={{checkout}}",
					"host": [
						"{{get_booking_ids_url}}"
					],
					"query": [
						{
							"key": "checkin",
							"value": "{{checkin}}",
							"description": "Check-in date filter in YYYY-MM-DD format."
						},
						{
							"key": "checkout",
							"value": "{{checkout}}",
							"description": "Check-out date filter in YYYY-MM-DD format."
						}
					]
				},
				"description": "Sends a request to the Restfulbooker API to retrieve the list of all available booking IDs with search filter for check in and check out dates. The response is expected to have an array of JSON object with a bookingid property if the booking dates fall between the search filter dates (inclusive). The API documentation can be found in this [link](https://restful-booker.herokuapp.com/apidoc/index.html#api-Booking-GetBookings)."
			},
			"response": [
				{
					"name": "Get Booking IDs with Filter by Date- JSON",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking?checkin=2022-01-01&checkout=2022-12-31",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "2022-01-01",
									"description": "Check-in date filter in YYYY-MM-DD format."
								},
								{
									"key": "checkout",
									"value": "2022-12-31",
									"description": "Check-out date filter in YYYY-MM-DD format."
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "757"
						},
						{
							"key": "Etag",
							"value": "W/\"2f5-iGVwSYDvvlDJ5a87FSlF9mGGChE\""
						},
						{
							"key": "Date",
							"value": "Thu, 10 Feb 2022 16:03:57 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"bookingid\": 12\n    }\n]"
				},
				{
					"name": "Get Booking IDs Filter by Date (Mock) - JSON",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/mock/json/booking?checkin=2022-01-01&checkout=2022-12-31",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"mock",
								"json",
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "2022-01-01",
									"description": "Check-in date filter in YYYY-MM-DD format."
								},
								{
									"key": "checkout",
									"value": "2022-12-31",
									"description": "Check-out date filter in YYYY-MM-DD format."
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "757"
						},
						{
							"key": "Etag",
							"value": "W/\"2f5-iGVwSYDvvlDJ5a87FSlF9mGGChE\""
						},
						{
							"key": "Date",
							"value": "Thu, 10 Feb 2022 16:03:57 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"bookingid\": 13\n    }\n]"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/**",
					" * Utility class that contain resuable functions.",
					" */",
					"class TestUtil {",
					"    constructor () {};",
					"",
					"    /**",
					"     * Utility function to convert a date to ISO string yyyy-mm-dd format.",
					"     */",
					"    formatDate(date) {",
					"        let yourDate = new Date(date);",
					"        yourDate.toISOString().split('T')[0];",
					"        const offset = yourDate.getTimezoneOffset();",
					"        yourDate = new Date(yourDate.getTime() - (offset*60000));",
					"        return yourDate.toISOString().split('T')[0];",
					"    };",
					"};",
					"",
					"util = new TestUtil();",
					"//console.log(\"Restful Booker Test Collection Pre-req: \" + util.formatDate(\"Sat Jan 19 2021 01:58:04 GMT+0800 (Philippine Standard Time)\"))",
					"//console.log(\"Collection Pre-request Script - Set collectionVariable: \" + util);",
					"pm.collectionVariables.set(\"utilityclass\", util);",
					"",
					"//util2 = pm.collectionVariables.get(\"utilityclass\");",
					"//console.debug(\"Collection Pre-requesite Script - Get collectionVariable: \" + util2.name);",
					"//console.log(\"Restful Booker Test Collection Pre-req: \" + util2.formatDate(\"Sat Jan 20 2021 01:58:04 GMT+0800 (Philippine Standard Time)\"))",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://restful-booker.herokuapp.com",
			"type": "string"
		},
		{
			"key": "token_key",
			"value": "abc123"
		},
		{
			"key": "firstname",
			"value": "FirstName"
		},
		{
			"key": "lastname",
			"value": "LastName"
		},
		{
			"key": "totalprice",
			"value": "1"
		},
		{
			"key": "depositpaid",
			"value": "false"
		},
		{
			"key": "checkin",
			"value": "2022-01-01"
		},
		{
			"key": "checkout",
			"value": "2022-12-31"
		},
		{
			"key": "additionalneeds",
			"value": "AdditionalNeeds"
		},
		{
			"key": "bookingid",
			"value": "1"
		},
		{
			"key": "BOOKING_JSON_SCHEMA",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"bookingid\": {\n      \"type\": \"integer\"\n    },\n    \"booking\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"firstname\": {\n          \"type\": \"string\"\n        },\n        \"lastname\": {\n          \"type\": \"string\"\n        },\n        \"totalprice\": {\n          \"type\": \"integer\"\n        },\n        \"depositpaid\": {\n          \"type\": \"boolean\"\n        },\n        \"bookingdates\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"checkin\": {\n              \"type\": \"string\"\n            },\n            \"checkout\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"checkin\",\n            \"checkout\"\n          ]\n        },\n        \"additionalneeds\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"firstname\",\n        \"lastname\",\n        \"totalprice\",\n        \"depositpaid\",\n        \"bookingdates\",\n        \"additionalneeds\"\n      ]\n    }\n  },\n  \"required\": [\n    \"bookingid\",\n    \"booking\"\n  ]\n}"
		},
		{
			"key": "BOOKING_XML2JSON_SCHEMA",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"created-booking\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"bookingid\": {\n          \"type\": \"string\"\n        },\n        \"booking\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"firstname\": {\n              \"type\": \"string\"\n            },\n            \"lastname\": {\n              \"type\": \"string\"\n            },\n            \"totalprice\": {\n              \"type\": \"string\"\n            },\n            \"depositpaid\": {\n              \"type\": \"string\"\n            },\n            \"bookingdates\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"checkin\": {\n                  \"type\": \"string\"\n                },\n                \"checkout\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"checkin\",\n                \"checkout\"\n              ]\n            },\n            \"additionalneeds\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"firstname\",\n            \"lastname\",\n            \"totalprice\",\n            \"depositpaid\",\n            \"bookingdates\",\n            \"additionalneeds\"\n          ]\n        }\n      },\n      \"required\": [\n        \"bookingid\",\n        \"booking\"\n      ]\n    }\n  },\n  \"required\": [\n    \"created-booking\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "BOOKING_URLENCODED_SCHEMA",
			"value": "{\n   \"type\": \"object\",\n  \"properties\": {\n    \"bookingid\": {\n      \"type\": \"string\"\n    },\n    \"booking[firstname]\": {\n      \"type\": \"string\"\n    },\n    \"booking[lastname]\": {\n      \"type\": \"string\"\n    },\n    \"booking[totalprice]\": {\n      \"type\": \"string\"\n    },\n    \"booking[depositpaid]\": {\n      \"type\": \"string\"\n    },\n    \"booking[bookingdates][checkin]\": {\n      \"type\": \"string\"\n    },\n    \"booking[bookingdates][checkout]\": {\n      \"type\": \"string\"\n    },\n    \"booking[additionalneeds]\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"bookingid\",\n    \"booking[firstname]\",\n    \"booking[lastname]\",\n    \"booking[totalprice]\",\n    \"booking[depositpaid]\",\n    \"booking[bookingdates][checkin]\",\n    \"booking[bookingdates][checkout]\",\n    \"booking[additionalneeds]\"\n  ]\n}",
			"type": "string"
		},
		{
			"key": "GET_BOOKING_JSON_SCHEMA",
			"value": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"http://example.com/example.json\",\n    \"type\": \"object\",\n    \"title\": \"The root schema\",\n    \"description\": \"The root schema comprises the entire JSON document.\",\n    \"examples\": [\n        {\n            \"firstname\": \"Miguel\",\n            \"lastname\": \"Rohan\",\n            \"totalprice\": 206,\n            \"depositpaid\": true,\n            \"bookingdates\": {\n                \"checkin\": \"2021-04-17\",\n                \"checkout\": \"2022-10-15\"\n            },\n            \"additionalneeds\": \"hard drive\"\n        }\n    ],\n    \"required\": [\n        \"firstname\",\n        \"lastname\",\n        \"totalprice\",\n        \"depositpaid\",\n        \"bookingdates\"\n    ],\n    \"properties\": {\n        \"firstname\": {\n            \"$id\": \"#/properties/firstname\",\n            \"type\": \"string\",\n            \"title\": \"The firstname schema\",\n            \"description\": \"The first name used when booking was created.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"Miguel\"\n            ]\n        },\n        \"lastname\": {\n            \"$id\": \"#/properties/lastname\",\n            \"type\": \"string\",\n            \"title\": \"The lastname schema\",\n            \"description\": \"The last name used when booking was created.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"Rohan\"\n            ]\n        },\n        \"totalprice\": {\n            \"$id\": \"#/properties/totalprice\",\n            \"type\": \"integer\",\n            \"title\": \"The totalprice schema\",\n            \"description\": \"The total price used when booking was created.\",\n            \"default\": 0,\n            \"examples\": [\n                206\n            ]\n        },\n        \"depositpaid\": {\n            \"$id\": \"#/properties/depositpaid\",\n            \"type\": \"boolean\",\n            \"title\": \"The depositpaid schema\",\n            \"description\": \"The deposit paid indicator used when booking was created.\",\n            \"default\": false,\n            \"examples\": [\n                true\n            ]\n        },\n        \"bookingdates\": {\n            \"$id\": \"#/properties/bookingdates\",\n            \"type\": \"object\",\n            \"title\": \"The bookingdates schema\",\n            \"description\": \"Check in and check out dates used when booking was created.\",\n            \"default\": {},\n            \"examples\": [\n                {\n                    \"checkin\": \"2021-04-17\",\n                    \"checkout\": \"2022-10-15\"\n                }\n            ],\n            \"required\": [\n                \"checkin\",\n                \"checkout\"\n            ],\n            \"properties\": {\n                \"checkin\": {\n                    \"$id\": \"#/properties/bookingdates/properties/checkin\",\n                    \"type\": \"string\",\n                    \"title\": \"The checkin schema\",\n                    \"description\": \"Check in date in YYYY-MM-DD format when booking was created.\",\n                    \"default\": \"\",\n                    \"examples\": [\n                        \"2021-04-17\"\n                    ]\n                },\n                \"checkout\": {\n                    \"$id\": \"#/properties/bookingdates/properties/checkout\",\n                    \"type\": \"string\",\n                    \"title\": \"The checkout schema\",\n                    \"description\": \"Check out date in YYYY-MM-DD format when booking was created.\",\n                    \"default\": \"\",\n                    \"examples\": [\n                        \"2022-10-15\"\n                    ]\n                }\n            },\n            \"additionalProperties\": false\n        },\n        \"additionalneeds\": {\n            \"$id\": \"#/properties/additionalneeds\",\n            \"type\": \"string\",\n            \"title\": \"The additionalneeds schema\",\n            \"description\": \"An optional property to indicate additional needs when booking was created.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"hard drive\"\n            ]\n        }\n    },\n    \"additionalProperties\": false\n}",
			"type": "string"
		},
		{
			"key": "GET_BOOKINGIDS_JSON_SCHEMA",
			"value": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"http://example.com/example.json\",\n    \"type\": \"array\",\n    \"uniqueItems\": true,\n    \"title\": \"The root schema\",\n    \"description\": \"The root schema comprises the entire JSON document.\",\n    \"default\": [],\n    \"examples\": [\n        [\n            {\n                \"bookingid\": 12\n            },\n            {\n                \"bookingid\": 23\n            }\n        ]\n    ],\n    \"additionalItems\": false,\n    \"items\": {\n        \"$id\": \"#/items\",\n        \"anyOf\": [\n            {\n                \"$id\": \"#/items/anyOf/0\",\n                \"type\": \"object\",\n                \"title\": \"The first anyOf schema\",\n                \"description\": \"A list of zero or more objects containing a single property of bookingid.\",\n                \"examples\": [\n                    {\n                        \"bookingid\": 12\n                    }\n                ],\n                \"required\": [\n                    \"bookingid\"\n                ],\n                \"properties\": {\n                    \"bookingid\": {\n                        \"$id\": \"#/items/anyOf/0/properties/bookingid\",\n                        \"type\": \"integer\",\n                        \"title\": \"The bookingid schema\",\n                        \"description\": \"bookingid property of type integer.\",\n                        \"examples\": [\n                            12\n                        ]\n                    }\n                },\n                \"additionalProperties\": false\n            }\n        ]\n    }\n}",
			"type": "string"
		},
		{
			"key": "GET_BOOKING_XML_SCHEMA",
			"value": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"http://example.com/example.json\",\n    \"type\": \"object\",\n    \"title\": \"The root schema\",\n    \"description\": \"The root schema comprises the entire JSON document which was transformed from an XML document.\",\n    \"default\": {},\n    \"examples\": [\n        {\n            \"booking\": {\n                \"firstname\": \"Junior\",\n                \"lastname\": \"Collier\",\n                \"totalprice\": \"74\",\n                \"depositpaid\": \"true\",\n                \"bookingdates\": {\n                    \"checkin\": \"2021-08-15\",\n                    \"checkout\": \"2022-10-16\"\n                },\n                \"additionalneeds\": \"panel\"\n            }\n        }\n    ],\n    \"required\": [\n        \"booking\"\n    ],\n    \"properties\": {\n        \"booking\": {\n            \"$id\": \"#/properties/booking\",\n            \"default\": {},\n            \"description\": \"This object contains the properties of a booking record.\",\n            \"examples\": [\n                {\n                    \"firstname\": \"Junior\",\n                    \"lastname\": \"Collier\",\n                    \"totalprice\": \"74\",\n                    \"depositpaid\": \"true\",\n                    \"bookingdates\": {\n                        \"checkin\": \"2021-08-15\",\n                        \"checkout\": \"2022-10-16\"\n                    },\n                    \"additionalneeds\": \"panel\"\n                }\n            ],\n            \"required\": [\n                \"firstname\",\n                \"lastname\",\n                \"totalprice\",\n                \"depositpaid\",\n                \"bookingdates\",\n                \"additionalneeds\"\n            ],\n            \"title\": \"The booking schema\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"firstname\": {\n                    \"$id\": \"#/properties/booking/properties/firstname\",\n                    \"default\": \"\",\n                    \"description\": \"First name of the booking record.\",\n                    \"examples\": [\n                        \"Junior\"\n                    ],\n                    \"title\": \"The firstname schema\",\n                    \"type\": \"string\"\n                },\n                \"lastname\": {\n                    \"$id\": \"#/properties/booking/properties/lastname\",\n                    \"default\": \"\",\n                    \"description\": \"The last name of the booking record.\",\n                    \"examples\": [\n                        \"Collier\"\n                    ],\n                    \"title\": \"The lastname schema\",\n                    \"type\": \"string\"\n                },\n                \"totalprice\": {\n                    \"$id\": \"#/properties/booking/properties/totalprice\",\n                    \"default\": \"\",\n                    \"description\": \"The total price paid for the booking.\",\n                    \"examples\": [\n                        \"74\"\n                    ],\n                    \"title\": \"The totalprice schema\",\n                    \"type\": \"string\"\n                },\n                \"depositpaid\": {\n                    \"$id\": \"#/properties/booking/properties/depositpaid\",\n                    \"default\": \"\",\n                    \"description\": \"true if a deposit was paid, othewise false.\",\n                    \"examples\": [\n                        \"true\"\n                    ],\n                    \"title\": \"The depositpaid schema\",\n                    \"type\": \"string\"\n                },\n                \"bookingdates\": {\n                    \"$id\": \"#/properties/booking/properties/bookingdates\",\n                    \"default\": {},\n                    \"description\": \"An object containing the checkin and checkout date properties.\",\n                    \"examples\": [\n                        {\n                            \"checkin\": \"2021-08-15\",\n                            \"checkout\": \"2022-10-16\"\n                        }\n                    ],\n                    \"required\": [\n                        \"checkin\",\n                        \"checkout\"\n                    ],\n                    \"title\": \"The bookingdates schema\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"checkin\": {\n                            \"$id\": \"#/properties/booking/properties/bookingdates/properties/checkin\",\n                            \"default\": \"\",\n                            \"description\": \"Indicates the check-in date in YYYY-MM-DD string format.\",\n                            \"examples\": [\n                                \"2021-08-15\"\n                            ],\n                            \"title\": \"The checkin schema\",\n                            \"type\": \"string\"\n                        },\n                        \"checkout\": {\n                            \"$id\": \"#/properties/booking/properties/bookingdates/properties/checkout\",\n                            \"default\": \"\",\n                            \"description\": \"Indicates the check-out date in YYYY-MM-DD string format.\",\n                            \"examples\": [\n                                \"2022-10-16\"\n                            ],\n                            \"title\": \"The checkout schema\",\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"additionalProperties\": false\n                },\n                \"additionalneeds\": {\n                    \"$id\": \"#/properties/booking/properties/additionalneeds\",\n                    \"default\": \"\",\n                    \"description\": \"Indicates if there are any additional needs per the booking record.\",\n                    \"examples\": [\n                        \"panel\"\n                    ],\n                    \"title\": \"The additionalneeds schema\",\n                    \"type\": \"string\"\n                }\n            },\n            \"additionalProperties\": false\n        }\n    },\n    \"additionalProperties\": false\n}",
			"type": "string"
		},
		{
			"key": "utilityclass",
			"value": ""
		},
		{
			"key": "UPDATE_BOOKING_URLENCODED_SCHEMA",
			"value": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"http://example.com/example.json\",\n    \"type\": \"object\",\n    \"title\": \"The root schema\",\n    \"description\": \"The root schema comprises the entire JSON document.\",\n    \"default\": {},\n    \"examples\": [\n        {\n            \"firstname\": \"Francis\",\n            \"lastname\": \"Kutch\",\n            \"totalprice\": \"790\",\n            \"depositpaid\": \"true\",\n            \"bookingdates[checkin]\": \"2021-08-10\",\n            \"bookingdates[checkout]\": \"2023-01-02\",\n            \"additionalneeds\": \"circuit\"\n        }\n    ],\n    \"required\": [\n        \"firstname\",\n        \"lastname\",\n        \"totalprice\",\n        \"depositpaid\",\n        \"bookingdates[checkin]\",\n        \"bookingdates[checkout]\",\n        \"additionalneeds\"\n    ],\n    \"properties\": {\n        \"firstname\": {\n            \"$id\": \"#/properties/firstname\",\n            \"type\": \"string\",\n            \"title\": \"The firstname schema\",\n            \"description\": \"An explanation about the purpose of this instance.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"Francis\"\n            ]\n        },\n        \"lastname\": {\n            \"$id\": \"#/properties/lastname\",\n            \"type\": \"string\",\n            \"title\": \"The lastname schema\",\n            \"description\": \"An explanation about the purpose of this instance.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"Kutch\"\n            ]\n        },\n        \"totalprice\": {\n            \"$id\": \"#/properties/totalprice\",\n            \"type\": \"string\",\n            \"title\": \"The totalprice schema\",\n            \"description\": \"An explanation about the purpose of this instance.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"790\"\n            ]\n        },\n        \"depositpaid\": {\n            \"$id\": \"#/properties/depositpaid\",\n            \"type\": \"string\",\n            \"title\": \"The depositpaid schema\",\n            \"description\": \"An explanation about the purpose of this instance.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"true\"\n            ]\n        },\n        \"bookingdates[checkin]\": {\n            \"$id\": \"#/properties/bookingdates%5Bcheckin%5D\",\n            \"type\": \"string\",\n            \"title\": \"The bookingdates[checkin] schema\",\n            \"description\": \"An explanation about the purpose of this instance.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"2021-08-10\"\n            ]\n        },\n        \"bookingdates[checkout]\": {\n            \"$id\": \"#/properties/bookingdates%5Bcheckout%5D\",\n            \"type\": \"string\",\n            \"title\": \"The bookingdates[checkout] schema\",\n            \"description\": \"An explanation about the purpose of this instance.\",\n            \"default\": \"\",\n            \"examples\": [\n                \"2023-01-02\"\n            ]\n        },\n        \"additionalneeds\": {\n            \"$id\": \"#/properties/additionalneeds\",\n            \"default\": \"\",\n            \"description\": \"An explanation about the purpose of this instance.\",\n            \"examples\": [\n                \"circuit\"\n            ],\n            \"title\": \"The additionalneeds schema\",\n            \"type\": \"string\"\n        }\n    },\n    \"additionalProperties\": false\n}",
			"type": "string"
		}
	]
}